Abs( expression )\nCalculates the absolute value of a number.
ACos( expression )\nCalculates the arcCosine of a number.
AdlibRegister( "function" [, time] )\nRegisters an Adlib function.
AdlibUnRegister( ["function"] )\nUnregisters an adlib function.
Asc( "char" )\nReturns the ASCII code of a character.
AscW( "char" )\nReturns the unicode code of a character.
ASin( expression )\nCalculates the arcsine of a number.
Assign( "varname", "data" [, flag] )\nAssigns a variable by name with the data.
ATan( expression )\nCalculates the arctangent of a number.
AutoItSetOption( "CaretCoordMode" [, param ] )\nSets the way coords are used in the caret functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default)\n2 = relative coords to the client area of the active window 
AutoItSetOption( "ExpandEnvStrings" [, param ] )\nChanges how literal strings and % symbols are interpreted.  By default strings are treated literally, this option allows you to use %environment% variables inside strings, e.g., "The temp directory is: %temp%". 1 = expand environment variables (similar to AutoIt v2)\n0 = do not expand environment variables (default)\nWithout this option the usual way would be: 	"The temp directory is: " & EnvGet("temp")\n
AutoItSetOption( "ExpandVarStrings" [, param ] )\nChanges how literal strings and variable/macro ($ and @)\nsymbols are interpreted.  By default strings are treated literally, this option allows you to use variables and macros inside strings, e.g., "The value of var1 is $var1$". 1 = expand variables (when in this mode and you want to use a literal $ or @ then double it up: "This is a single dollar $$ sign". 0 = do not expand variables (default)\n
AutoItSetOption( "GUICloseOnESC" [, param ] )\nWhen ESC is pressed on a GUI the $GUI_EVENT_CLOSE message is sent.  This option toggles this behavior on and off. 1 = Send the $GUI_EVENT_CLOSE message when ESC is pressed (default). 0 = Don't send the $GUI_EVENT_CLOSE message when ESC is pressed. 
AutoItSetOption( "GUICoordMode" [, param ] )\nAlters the position of a control defined by <a href="GUICtrlSetPos.htm">GUICtrlSetPos</a>. 1 = absolute coordinates (default)\nstill relative to the dialog box. 0 = relative position to the start of the last control (upper left corner). 2 = cell positioning relative to current cell. A -1 for left or top parameter don't increment the start. So next line is -1,offset; next cell is offset,-1; current cell is -1,-1. Obviously "offset" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back. 
AutoItSetOption( "GUIDataSeparatorChar" [, param ] )\nDefine the character which delimits subitems in GUICtrlSetData. The default character is '|'. 
AutoItSetOption( "GUIOnEventMode" [, param ] )\nEnable/disable OnEvent functions notifications. 0 = (default)\ndisable. 1 = enable. 
AutoItSetOption( "GUIResizeMode" [, param ] )\nChange default resizing for a control. 0 = (default)\nkeep default control resizing. &lt;1024 = anytype of resizing see <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing</a>. 
AutoItSetOption( "GUIEventOptions" [, param ] )\nChange special event behavior or GUI function return values. 0 = (default)\nWindows behavior on click on Minimize,Restore, Maximize, Resize. 1 = suppress windows behavior on minimize, restore or maximize click button or window resize. Just sends the notification. 
AutoItSetOption( "MouseClickDelay" [, param ] )\nAlters the length of the brief pause in between mouse clicks. Time in milliseconds to pause (default=10). 
AutoItSetOption( "MouseClickDownDelay" [, param ] )\nAlters the length a click is held down before release. Time in milliseconds to pause (default=10). 
AutoItSetOption( "MouseClickDragDelay" [, param ] )\nAlters the length of the brief pause at the start and end of a mouse drag operation. Time in milliseconds to pause (default=250). 
AutoItSetOption( "MouseCoordMode" [, param ] )\nSets the way coords are used in the mouse functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default)\n2 = relative coords to the client area of the active window 
AutoItSetOption( "MustDeclareVars" [, param ] )\nIf this option is used then all variables must be pre-declared with Dim, Local or Global before they can be used - removes the chance for misspelled variables causing bugs. 1 = Variables must be pre-declared 0 = Variables don't need to be pre-declared (default)\n
AutoItSetOption( "PixelCoordMode" [, param ] )\nSets the way coords are used in the pixel functions, either absolute coords or coords relative to the window defined by hwnd (default active window): 0 = relative coords to the defined window 1 = absolute screen coordinates (default)\n2 = relative coords to the client area of the defined window 
AutoItSetOption( "SendAttachMode" [, param ] )\nSpecifies if AutoIt attaches input threads when using Send()\nfunction.  When not attaching (default mode=0)\ndetecting the state of capslock/scrolllock and numlock can be unreliable under NT4.  However, when you specify attach mode=1 the Send("{... down/up}")\nsyntax will not work and there may be problems with sending keys to "hung" windows.  ControlSend()\nALWAYS attaches and is not affected by this mode. 0 = don't attach (default)\n1 = attach 
AutoItSetOption( "SendCapslockMode" [, param ] )\nSpecifies if AutoIt should store the state of capslock before a Send function and restore it afterwards. 0 = don't store/restore 1 = store and restore (default)\n
AutoItSetOption( "SendKeyDelay" [, param ] )\nAlters the length of the brief pause in between sent keystrokes.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
AutoItSetOption( "SendKeyDownDelay" [, param ] )\nAlters the length of time a key is held down before being released during a keystroke.  For applications that take a while to register keypresses you may need to raise this value from the default.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
AutoItSetOption( "TCPTimeout" [, param ] )\nDefines the time before TCP functions stop if no communication. Time in milliseconds before timeout (default=100). 
AutoItSetOption( "TrayAutoPause" [, param ] )\nScript pauses when click on tray icon. 0 = no pause 1 = pause (default). If there is no DefaultMenu no pause will occurs. 
AutoItSetOption( "TrayIconDebug" [, param ] )\nIf enabled shows the current script line in the tray icon tip to help debugging. 0 = no debug information (default)\n1 = show debug 
AutoItSetOption( "TrayIconHide" [, param ] )\nHides the AutoIt tray icon.  Note:  The icon will still initially appear ~750 milliseconds. 0 = show icon (default)\n1 = hide icon 
AutoItSetOption( "TrayMenuMode" [, param ] )\nExtend the behaviour of the script tray icon/menu. This can be done with a combination (adding)\nof the following values. 0 = default menu items (Script Paused/Exit)\nare appended to the usercreated menu; usercreated checked items will automatically unchecked; if you double click the tray icon then the controlid is returned which has the "Default"-style (default). 1 = no default menu 2 = user created checked items will not automatically unchecked if you click it 4 = don't return the menuitemID which has the "default"-style in the main contextmenu if you double click the tray icon 8 = turn off auto check of radio item groups 
AutoItSetOption( "TrayOnEventMode" [, param ] )\nEnable/disable OnEvent functions notifications for the tray. 0 = (default)\ndisable 1 = enable 
AutoItSetOption( "WinDetectHiddenText" [, param ] )\nSpecifies if hidden window text can be "seen" by the window matching functions. 0 = Do not detect hidden text (default)\n1 = Detect hidden text 
AutoItSetOption( "WinSearchChildren" [, param ] )\nAllows the window search routines to search child windows as well as top-level windows. 0 = Only search top-level windows (default)\n1 = Search top-level and child windows 
AutoItSetOption( "WinTextMatchMode" [, param ] )\nAlters the method that is used to match window text during search operations. 1 = Complete / Slow mode (default)\n2 = Quick mode In quick mode AutoIt can usually only "see" dialog text, button text and the captions of some controls.  In the default mode much more text can be seen (for instance the contents of the Notepad window). If you are having performance problems when performing many window searches then changing to the "quick" mode may help. 
AutoItSetOption( "WinTitleMatchMode" [, param ] )\nAlters the method that is used to match window titles during search operations. 1 = Match the title from the start (default)\n2 = Match any substring in the title 3 = Exact title match 4 = Advanced mode, see <a href="../intro/windowsadvanced.htm">Window Titles & Text (Advanced)</a> -1 to -4 = force lower case match according to other type of match. 
AutoItSetOption( "WinWaitDelay" [, param ] )\nAlters how long a script should briefly pause after a successful window-related operation. Time in milliseconds to pause (default=250). 
AutoItWinGetTitle(  )\nRetrieves the title of the AutoIt window.
AutoItWinSetTitle( "newtitle" )\nChanges the title of the AutoIt window.
Beep( [Frequency [, Duration]] )\nPlays back a beep to the user.
Binary( expression )\nReturns the binary representation of an expression.
BinaryLen( binary )\n Returns the number of bytes in a binary variant.
BinaryMid( binary, start [, count] )\nExtracts a number of bytes from a binary variant.
BinaryToString( expression [, flag] )\nConverts a binary variant into a string.
BitAND( value1, value2 [, value n] )\nPerforms a bitwise AND operation.
BitNOT( value )\nPerforms a bitwise NOT operation.
BitOR( value1, value2 [, value n] )\nPerforms a bitwise OR operation.
BitRotate( value [, shift [, size]] )\nPerforms a bit shifting operation, with rotation.
BitShift( value, shift )\nPerforms a bit shifting operation.
BitXOR( value1, value2 [, value n] )\nPerforms a bitwise exclusive OR (XOR)\noperation.
BlockInput( flag )\nDisable/enable the mouse and keyboard.
Break( mode )\nEnables or disables the users' ability to exit a script from the tray icon menu.
Call( "function" [, param1 [, param2 [, param<i>N</i>]]] )\nCalls a user-defined function contained in a string parameter.
CDTray( "drive", "status" )\nOpens or closes the CD tray.
Ceiling( expression )\nReturns a number rounded up to the next integer.
Chr( ASCIIcode )\nReturns a character corresponding to an ASCII code.
ChrW( UNICODEcode )\nReturns a character corresponding to a unicode code.
ClipGet(  )\nRetrieves text from the clipboard.
ClipPut( "value" )\nWrites text to the clipboard.
ConsoleRead( [peek = false [, binary = false]] )\nRead from the STDIN stream of the AutoIt script process.
ConsoleWrite( "data" )\nWrites data to the STDOUT stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.
ConsoleWriteError( "data" )\nWrites data to the STDERR stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.
ControlClick( "title", "text", controlID [, button [, clicks [, x [, y]]]] )\nSends a mouse click command to a given control.
ControlCommand( "title", "text", "classnameNN", "IsVisible", "" )\nReturns 1 if Control is visible, 0 otherwise
ControlCommand( "title", "text", "classnameNN", "IsEnabled", "" )\nReturns 1 if Control is enabled, 0 otherwise
ControlCommand( "title", "text", "classnameNN", "ShowDropDown", "" )\nDrops a ComboBox
ControlCommand( "title", "text", "classnameNN", "HideDropDown", "" )\nUndrops a ComboBox
ControlCommand( "title", "text", "classnameNN", "AddString", 'string' )\nAdds a string to the end in a ListBox or ComboBox
ControlCommand( "title", "text", "classnameNN", "DelString", occurrence )\nDeletes a string according to occurrence in a ListBox or ComboBox
ControlCommand( "title", "text", "classnameNN", "FindString", 'string' )\nReturns occurrence ref of the exact string in a ListBox or ComboBox
ControlCommand( "title", "text", "classnameNN", "SetCurrentSelection", occurrence )\nSets selection to occurrence ref in a ListBox or ComboBox
ControlCommand( "title", "text", "classnameNN", "SelectString", 'string' )\nSets selection according to string in a ListBox or ComboBox
ControlCommand( "title", "text", "classnameNN", "IsChecked", "" )\nReturns 1 if Button is checked, 0 otherwise
ControlCommand( "title", "text", "classnameNN", "Check", "" )\nChecks radio or check Button
ControlCommand( "title", "text", "classnameNN", "UnCheck", "" )\nUnchecks radio or check Button
ControlCommand( "title", "text", "classnameNN", "GetCurrentLine", "" )\nReturns the line # where the caret is in an Edit
ControlCommand( "title", "text", "classnameNN", "GetCurrentCol", "" )\nReturns the column # where the caret is in an Edit
ControlCommand( "title", "text", "classnameNN", "GetCurrentSelection", "" )\nReturns name of the currently selected item in a ListBox or ComboBox
ControlCommand( "title", "text", "classnameNN", "GetLineCount", "" )\nReturns # of lines in an Edit
ControlCommand( "title", "text", "classnameNN", "GetLine", line# )\nReturns text at line # passed of an Edit
ControlCommand( "title", "text", "classnameNN", "GetSelected", "" )\nReturns selected text of an Edit
ControlCommand( "title", "text", "classnameNN", "EditPaste", 'string' )\nPastes the 'string' at the Edit's caret position
ControlCommand( "title", "text", "classnameNN", "CurrentTab", "" )\nReturns the current Tab shown of a SysTabControl32
ControlCommand( "title", "text", "classnameNN", "TabRight", "" )\nMoves to the next tab to the right of a SysTabControl32
ControlCommand( "title", "text", "classnameNN", "TabLeft", "" )\nMoves to the next tab to the left of a SysTabControl32
ControlCommand( "title", "text", "classnameNN", "SendCommandID", Command ID )\nSimulates the WM_COMMAND message. Usually used for ToolbarWindow32 controls - use the ToolBar tab of Au3Info to get the Command ID.
ControlDisable( "title", "text", controlID )\nDisables or "grays-out" a control.
ControlEnable( "title", "text", controlID )\nEnables a "grayed-out" control.
ControlFocus( "title", "text", controlID )\nSets input focus to a given control on a window.
ControlGetFocus( "title" [, "text"] )\nReturns the ControlRef# of the control that has keyboard focus within a specified window.
ControlGetHandle( "title", "text", controlID )\nRetrieves the internal handle of a control.
ControlGetPos( "title", "text", controlID )\nRetrieves the position and size of a control relative to its window.
ControlGetText( "title", "text", controlID )\nRetrieves text from a control.
ControlHide( "title", "text", controlID )\nHides a control.
ControlListView( "title", "text", "classnameNN", "DeSelect", From [, To] )\nDeselects one or more items.
ControlListView( "title", "text", "classnameNN", "FindItem", "string to find" [, SubItem] )\nReturns the item index of the string.  Returns -1 if the string is not found.
ControlListView( "title", "text", "classnameNN", "GetItemCount" )\nReturns the number of list items.
ControlListView( "title", "text", "classnameNN", "GetSelected" [, option] )\nReturns a string containing the item index of selected items.  If option=0 (default)\nonly the first selected item is returned.  If option=1 then all the selected items are returned delimited by |, e.g: &quot;0|3|4|10&quot;.  If no items are selected a blank "" string is returned.
ControlListView( "title", "text", "classnameNN", "GetSelectedCount" )\nReturns the number of items that are selected.
ControlListView( "title", "text", "classnameNN", "GetSubItemCount" )\nReturns the number of subitems.
ControlListView( "title", "text", "classnameNN", "GetText", Item, SubItem )\nReturns the text of a given item/subitem.
ControlListView( "title", "text", "classnameNN", "IsSelected", Item )\nReturns 1 if the item is selected, otherwise returns 0.
ControlListView( "title", "text", "classnameNN", "Select", From [, To] )\nSelects one or more items.
ControlListView( "title", "text", "classnameNN", "SelectAll" )\nSelects all items.
ControlListView( "title", "text", "classnameNN", "SelectClear" )\nClears the selection of all items.
ControlListView( "title", "text", "classnameNN", "SelectInvert" )\nInverts the current selection.
ControlListView( "title", "text", "classnameNN", "ViewChange", "view" )\nChanges the current view.  Valid views are "list", "details", "smallicons", "largeicons".
ControlMove( "title", "text", controlID, x, y [, width [, height]] )\nMoves a control within a window.
ControlSend( "title", "text", controlID, "string" [, flag] )\nSends a string of characters to a control.
ControlSetText( "title", "text", controlID, "new text" [, flag] )\nSets text of a control.
ControlShow( "title", "text", controlID )\nShows a control that was hidden.
ControlTreeView( "title", "text", controlID, "command" [, option1 [, option2]] )\nSends a command to a TreeView32 control.
Cos( expression )\nCalculates the cosine of a number.
Dec( "hex" [, flag ] )\nReturns a numeric representation of a hexadecimal string.
DirCopy( "source dir", "dest dir" [, flag] )\nCopies a directory and all sub-directories and files (Similar to xcopy).
DirCreate( "path" )\nCreates a directory/folder.
DirGetSize( "path" [, flag] )\nReturns the size in bytes of a given directory.
DirMove( "source dir", "dest dir" [, flag] )\nMoves a directory and all sub-directories and files.
DirRemove( "path" [, recurse] )\nDeletes a directory/folder.
DllCall( "dll", "return type", "function" [, type1, param1 [, type n, param n]] )\nDynamically calls a function in a DLL.
DllCallAddress( "return type", address [, type1, param1 [, type n, param n]] )\nDynamically calls a function at a specific memory address. <div class="experimental">Warning: This is an advanced function.  Incorrect use of this function may cause AutoIt to crash. Before using this function make sure <a href="DllCall.htm">DllCall()</a> doesn't do what you need.</div>
DllCallbackFree( handle )\nFrees a previously created handle created with DllCallbackRegister.
DllCallbackGetPtr( handle )\nReturns the pointer to a callback function that can be passed to the Win32 API.
DllCallbackRegister( "function", "return type", "params" )\nCreates a user-defined DLL Callback function.
DllClose( dllhandle )\nCloses a previously opened DLL.
DllOpen( "filename" )\nOpens a DLL file for use in DllCall.
DllStructCreate( Struct [,Pointer] )\nCreates a C/C++ style structure to be used in DllCall.
DllStructGetData( Struct, Element [, index] )\nReturns the data of an element of the struct.
DllStructGetPtr( Struct [,Element] )\nReturns the pointer to the struct or an element in the struct.
DllStructGetSize( Struct )\nReturns the size of the struct in bytes.
DllStructSetData( Struct, Element, value [, index] )\nSets the data in of an element in the struct.
DriveGetDrive( "type" )\nReturns an array containing the enumerated drives.
DriveGetFileSystem( "path" )\nReturns File System Type of a drive.
DriveGetLabel( "path" )\nReturns Volume Label of a drive, if it has one.
DriveGetSerial( "path" )\nReturns Serial Number of a drive.
DriveGetType( "path" )\nReturns drive type.
DriveMapAdd( "device", "remote share" [, flags [, "user" [, "password"]]] )\nMaps a network drive.
DriveMapDel( "drive" )\nDisconnects a network drive.
DriveMapGet( "device" )\nRetrieves the details of a mapped drive.
DriveSetLabel( "path", "label" )\nSets the Volume Label of a drive.
DriveSpaceFree( "path" )\nReturns the free disk space of a path in Megabytes.
DriveSpaceTotal( "path" )\nReturns the total disk space of a path in Megabytes.
DriveStatus( "path" )\nReturns the status of the drive as a string.
EnvGet( "envvariable" )\nRetrieves an environment variable.
EnvSet( "envvariable" [, "value"] )\nWrites an environment variable.
EnvUpdate(  )\nRefreshes the OS environment.
Eval( string )\nReturn the value of the variable defined by an string.
Execute( string )\nExecute an expression.
Exp( expression )\nCalculates <i><b>e</b></i> to the power of a number.
FileChangeDir( "path" )\nChanges the current working directory.
FileClose( "filehandle" )\nCloses a previously opened text file.
FileCopy( "source", "dest" [, flag] )\nCopies one or more files.
FileCreateNTFSLink( "source", "hardlink" [, flag] )\nCreates an NTFS hardlink to a file or a directory
FileCreateShortcut( "file", "lnk" [, "workdir" [, "args" [, "desc" [, "icon" [, "hotkey" [, icon number [, state]]]]]]] )\nCreates a shortcut (.lnk)\nto a file.
FileDelete( "path" )\nDelete one or more files.
FileExists( "path" )\nChecks if a file or directory exists.
FileFindFirstFile( "filename" )\nReturns a search "handle" according to file search string.
FileFindNextFile( search )\nReturns a filename according to a previous call to FileFindFirstFile.
FileFlush( "filehandle" )\nFlushes the file's buffer to disk.
FileGetAttrib( "filename" )\nReturns a code string representing a file's attributes.
FileGetEncoding( "filehandle/filename" [, mode] )\nDetermines the text encoding used in a file.
FileGetLongName( "file" [, flag] )\nReturns the long path+name of the path+name passed.
FileGetPos( "filehandle" )\nRetrieves the current file position.
FileGetShortcut( "lnk" )\nRetrieves details about a shortcut.
FileGetShortName( "file" [, flag] )\nReturns the 8.3 short path+name of the path+name passed.
FileGetSize( "filename" )\nReturns the size of a file in bytes.
FileGetTime( "filename" [, option [, format]] )\nReturns the time and date information for a file.
FileGetVersion( "filename" [,"stringname"] )\nReturns the "File" version information.
FileInstall( "source", "dest" [, flag] )\nInclude and install a file with the compiled script.
FileMove( "source", "dest" [, flag] )\nMoves one or more files
FileOpen( "filename" [, mode] )\nOpens a text file for reading or writing.
FileOpenDialog( "title", "init dir", "filter" [, options [, "default name" [, hwnd]]] )\nInitiates a Open File Dialog.
FileRead( "filehandle/filename" [, count] )\nRead in a number of characters from a previously opened text file.
FileReadLine( "filehandle/filename" [, line] )\nRead in a line of text from a previously opened text file.
FileRecycle( "source" )\nSends a file or directory to the recycle bin.
FileRecycleEmpty( ["source"] )\nEmpties the recycle bin.
FileSaveDialog( "title", "init dir", "filter" [, options [, "default name" [, hwnd]]] )\nInitiates a Save File Dialog.
FileSelectFolder( "dialog text", "root dir" [, flag [, "initial dir" [, hwnd]]] )\nInitiates a Browse For Folder dialog.
FileSetAttrib( "file pattern", "+-RASHNOT" [, recurse] )\nSets the attributes of one or more files.
FileSetPos( "filehandle", offset, origin )\nSets the current file position.
FileSetTime( "file pattern", "time" [, type [, recurse]] )\nSets the timestamp of one of more files.
FileWrite( "filehandle/filename", "text/data" )\nAppend a text/data to the end of a previously opened file.
FileWriteLine( "filehandle/filename", "line" )\nAppend a line of text to the end of a previously opened text file.
Floor( expression )\nReturns a number rounded down to the closest integer.
FtpSetProxy( mode [, "proxy:port" [, "username" [, "password"]]] )\nSets the internet proxy to use for ftp access.
GUICreate( "title" [, width [, height [, left [, top [, style [, exStyle [, parent]]]]]]] )\nCreate a GUI window.
GUICtrlCreateAvi( filename, subfileid, left, top [, width [, height [, style [, exStyle]]]] )\nCreates an AVI video control for the GUI.
GUICtrlCreateButton( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Button control for the GUI.
GUICtrlCreateCheckbox( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Checkbox control for the GUI.
GUICtrlCreateCombo( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a ComboBox control for the GUI.
GUICtrlCreateContextMenu( [controlID] )\nCreates a context menu for a control or entire GUI window.
GUICtrlCreateDate( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a date control for the GUI.
GUICtrlCreateDummy(  )\nCreates a Dummy control for the GUI.
GUICtrlCreateEdit( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates an Edit control for the GUI.
GUICtrlCreateGraphic( left, top [, width [, height [, style]]] )\nCreates a Graphic control for the GUI.
GUICtrlCreateGroup( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Group control for the GUI.
GUICtrlCreateIcon( filename, iconName, left, top [, width [, height [, style [, exStyle]]]] )\nCreates an Icon control for the GUI.
GUICtrlCreateInput( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates an Input control for the GUI.
GUICtrlCreateLabel( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a static Label control for the GUI.
GUICtrlCreateList( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a List control for the GUI.
GUICtrlCreateListView( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a ListView control for the GUI.
GUICtrlCreateListViewItem( "text", listviewID )\nCreates a ListView item.
GUICtrlCreateMenu( "submenutext" [, menuID [, menuentry]] )\nCreates a Menu control for the GUI.
GUICtrlCreateMenuItem( "text", menuID [, menuentry [, menuradioitem]] )\nCreates a MenuItem control for the GUI.
GUICtrlCreateMonthCal( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a month calendar control for the GUI.
GUICtrlCreateObj( ObjectVar, left, top [, width [, height]] )\nCreates an ActiveX control in the GUI.
GUICtrlCreatePic( filename, left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Picture control for the GUI.
GUICtrlCreateProgress( left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Progress control for the GUI.
GUICtrlCreateRadio( "text", left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Radio button control for the GUI.
GUICtrlCreateSlider( left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Slider control for the GUI.
GUICtrlCreateTab( left, top [, width [, height [, style [, exStyle]]]] )\nCreates a Tab control for the GUI.
GUICtrlCreateTabItem( "text" )\nCreates a TabItem control for the GUI.
GUICtrlCreateTreeView( left, top [, width [, height [, style [, exStyle]]]] )\nCreates a TreeView control for the GUI.
GUICtrlCreateTreeViewItem( "text", treeviewID )\nCreates a TreeViewItem control for the GUI.
GUICtrlCreateUpdown( inputcontrolID [,style] )\nCreates an UpDown control for the GUI.
GUICtrlDelete( controlID )\nDeletes a control.
GUICtrlGetHandle( controlID )\nReturns the handle for a control and some special (item)\nhandles (Menu, ContextMenu, TreeViewItem).
GUICtrlGetState( [controlID] )\nGets the current state of a control
GUICtrlRead( controlID [, advanced] )\nRead state or data of a control.
GUICtrlRecvMsg( controlID , msg [, wParam [, lParamType]] )\nSend a message to a control and retrieve information in lParam.
GUICtrlRegisterListViewSort( controlID, "function" )\nRegister a user defined function for an internal listview sorting callback function.
GUICtrlSendMsg( controlID, msg , wParam, lParam )\nSend a message to a control.
GUICtrlSendToDummy( controlID [, state] )\nSends a message to a Dummy control.
GUICtrlSetBkColor( controlID, backgroundcolor )\nSets the background color of a control.
GUICtrlSetColor( controlID, textcolor )\nSets the text color of a control.
GUICtrlSetCursor( controlID, cursorID )\nSets the mouse cursor icon for a particular control.
GUICtrlSetData( controlID, data [, default] )\nModifies the data for a control.
GUICtrlSetDefBkColor( defbkcolor [, winhandle] )\nSets the default background color of all the controls of the GUI window.
GUICtrlSetDefColor( deftextcolor [, winhandle] )\nSets the default text color of all the controls of the GUI window.
GUICtrlSetFont( controlID, size [, weight [, attribute [, fontname [, quality]]]] )\nSets the font for a control.
GUICtrlSetGraphic( controlID, type [, par1 [, ... par6]] )\nModifies the data for a control.
GUICtrlSetImage( controlID, filename [, iconname [, icontype]] )\nSets the bitmap or icon image to use for a control.
GUICtrlSetLimit( controlID, max [, min] )\nLimits the number of characters/pixels for a control.
GUICtrlSetOnEvent( controlID, "function" )\nDefines a user-defined function to be called when a control is clicked.
GUICtrlSetPos( controlID, left [, top [, width [, height]]] )\nChanges the position of a control within the GUI window.
GUICtrlSetResizing( controlID, resizing )\nDefines the resizing method used by a control.
GUICtrlSetState( controlID, state )\nChanges the state of a control.
GUICtrlSetStyle( controlID, style [, exStyle] )\nChanges the style of a control.
GUICtrlSetTip( controlID, tiptext [, "title" [, icon [, options]]] )\nSets the tip text associated with a control.
GUIDelete( [winhandle] )\nDeletes a GUI window and all controls that it contains.
GUIGetCursorInfo( [winhandle] )\nGets the mouse cursor position relative to GUI window.
GUIGetMsg( [advanced] )\nPolls the GUI to see if any events have occurred.
GUIGetStyle( [winhandle] )\nRetrieves the styles of a GUI window.
GUIRegisterMsg( msgID, "function" )\nRegister a user defined function for a known Windows Message ID (WM_MSG).
GUISetAccelerators( accelerators [, winhandle] )\nSets the accelerator table to be used in a GUI window.
GUISetBkColor( background [, winhandle] )\nSets the background color of the GUI window.
GUISetCoord( left, top [, width [, height [, winhandle]]] )\nSets absolute coordinates for the next control.
GUISetCursor( [cursorID [, override [, winhandle]]] )\nSets the mouse cursor icon for a GUI window.
GUISetFont( size [, weight [, attribute [, fontname [, winhandle [, quality]]]]] )\nSets the default font for a GUI window.
GUISetHelp( helpfile [, winhandle] )\nSets an executable file that will be run when F1 is pressed.
GUISetIcon( iconfile [, iconID [, winhandle]] )\nSets the icon used in a GUI window.
GUISetOnEvent( specialID, "function" [, winhandle] )\nDefines a user function to be called when a system button is clicked.
GUISetState( [flag [, winhandle]] )\nChanges the state of a GUI window.
GUISetStyle( Style [,ExStyle [, winhandle]] )\nChanges the styles of a GUI window.
GUIStartGroup( [winhandle] )\nDefines that any subsequent controls that are created will be "grouped" together.
GUISwitch( winhandle [, tabitemID] )\nSwitches the current window used for GUI functions.
Hex( expression [, length] )\nReturns a string representation of an integer or of a binary type converted to hexadecimal.
HotKeySet( "key" [, "function"] )\nSets a hotkey that calls a user function.
HttpSetProxy( mode [, "proxy:port" [, "username" [, "password"]]] )\nSets the internet proxy to use for http access.
HttpSetUserAgent( "user agent" )\nSets the user-agent string sent with InetGet()\nand InetRead()\nrequests.
HWnd( expression )\nConverts an expression into an HWND handle.
InetClose( handle )\nCloses a handle returned from InetGet().
InetGet( "URL" [,"filename" [, options [, background]]] )\nDownloads a file from the internet using the HTTP, HTTPS or FTP protocol.
InetGetInfo( [handle [, index]] )\nReturns detailed data for a handle returned from InetGet().
InetGetSize( "URL" [, options] )\nReturns the size (in bytes)\nof a file located on the internet.
InetRead( "URL" [, options] )\nDownloads a file from the internet using the HTTP, HTTPS or FTP protocol.
IniDelete( "filename", "section" [, "key"] )\nDeletes a value from a standard format .ini file.
IniRead( "filename", "section", "key", "default" )\nReads a value from a standard format .ini file.
IniReadSection( "filename", "section" )\nReads all key/value pairs from a section in a standard format .ini file.
IniReadSectionNames( "filename" )\nReads all sections in a standard format .ini file.
IniRenameSection( "filename", "section", "new section" [, flag] )\nRenames a section in a standard format .ini file.
IniWrite( "filename", "section", "key", "value" )\nWrites a value to a standard format .ini file.
IniWriteSection( "filename", "section", "data" [, index] )\nWrites a section to a standard format .ini file.
InputBox( "title", "prompt" [, "default" [, "password char" [, width [, height [, left [, top [, timeout [, hwnd]]]]]]]] )\nDisplays an input box to ask the user to enter a string.
Int( expression [, flag ] )\nReturns the integer (whole number)\nrepresentation of an expression.
IsAdmin(  )\nChecks if the current user has full administrator privileges.
IsArray( variable )\nChecks if a variable is an array type.
IsBinary( expression )\nChecks if a variable or expression is a binary type.
IsBool( variable )\nChecks if a variable's base type is boolean.
IsDeclared( expression )\nCheck if a variable has been declared.
IsDllStruct( variable )\nChecks if a variable is a DllStruct type.
IsFloat( variable )\nChecks if a variable or expression is a float-type.
IsHWnd( variable )\nChecks if a variable's base type is a pointer and window handle.
IsInt( variable )\nChecks if a variable or expression is an integer type.
IsKeyword( variable )\nChecks if a variable is a keyword (for example, Default).
IsNumber( variable )\nChecks if a variable's base type is numeric.
IsObj( variable )\nChecks if a variable or expression is an object type.
IsPtr( variable )\nChecks if a variable's base type is a pointer.
IsString( variable )\nChecks if a variable is a string type.
Log( expression )\n Calculates the natural logarithm of a number.
MemGetStats(  )\nRetrieves memory related information.
Mod( value1, value2 )\nPerforms the modulus operation.
MouseClick( "button" [, x, y [, clicks [, speed]]] )\nPerform a mouse click operation.
MouseClickDrag( "button", x1, y1, x2, y2 [, speed] )\n Perform a mouse click and drag operation.
MouseDown( "button" )\nPerform a mouse down event at the current mouse position.
MouseGetCursor(  )\nReturns the cursor ID Number for the current Mouse Cursor.
MouseGetPos( [dimension] )\nRetrieves the current position of the mouse cursor.
MouseMove( x, y [, speed] )\nMoves the mouse pointer.
MouseUp( "button" )\nPerform a mouse up event at the current mouse position.
MouseWheel( "direction" [, clicks] )\nMoves the mouse wheel up or down.  NT/2000/XP ONLY.
MsgBox( flag, "title", "text" [, timeout [, hwnd]] )\nDisplays a simple message box with optional timeout.
Number( expression [, flag ] )\nReturns the numeric representation of an expression.
ObjCreate( "classname" [, "servername" [,"username", ["password"]]] )\nCreates a reference to a COM object from the given classname.
ObjCreateInterface( "CLSID" , "IID" [,"interface_description", ["flag"]] )\nCreates a reference to an object from the given classname/object pointer, interface identifier and description string.
ObjEvent( $ObjectVar, "functionprefix" [, "interface name"] )\nHandles incoming events from the given Object.
ObjEvent( "AutoIt.Error" [, "function name"] )\nHandles incoming events from the given Object.
ObjGet( "filename" [, "classname" [, instance]])\nRetrieves a reference to a COM object from an existing process or filename.
ObjName( $Objectvariable [,Flag] )\nReturns the name or interface description of an Object
OnAutoItExitRegister( "function" )\nRegisters a function to be called when AutoIt exits.
OnAutoItExitUnRegister( "function" )\nUnRegisters a function that was called when AutoIt exits.
Opt( "CaretCoordMode" [, param ] )\nSets the way coords are used in the caret functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default)\n2 = relative coords to the client area of the active window 
Opt( "ExpandEnvStrings" [, param ] )\nChanges how literal strings and % symbols are interpreted.  By default strings are treated literally, this option allows you to use %environment% variables inside strings, e.g., "The temp directory is: %temp%". 1 = expand environment variables (similar to AutoIt v2)\n0 = do not expand environment variables (default)\nWithout this option the usual way would be: 	"The temp directory is: " & EnvGet("temp")\n
Opt( "ExpandVarStrings" [, param ] )\nChanges how literal strings and variable/macro ($ and @)\nsymbols are interpreted.  By default strings are treated literally, this option allows you to use variables and macros inside strings, e.g., "The value of var1 is $var1$". 1 = expand variables (when in this mode and you want to use a literal $ or @ then double it up: "This is a single dollar $$ sign". 0 = do not expand variables (default)\n
Opt( "GUICloseOnESC" [, param ] )\nWhen ESC is pressed on a GUI the $GUI_EVENT_CLOSE message is sent.  This option toggles this behavior on and off. 1 = Send the $GUI_EVENT_CLOSE message when ESC is pressed (default). 0 = Don't send the $GUI_EVENT_CLOSE message when ESC is pressed. 
Opt( "GUICoordMode" [, param ] )\nAlters the position of a control defined by <a href="GUICtrlSetPos.htm">GUICtrlSetPos</a>. 1 = absolute coordinates (default)\nstill relative to the dialog box. 0 = relative position to the start of the last control (upper left corner). 2 = cell positioning relative to current cell. A -1 for left or top parameter don't increment the start. So next line is -1,offset; next cell is offset,-1; current cell is -1,-1. Obviously "offset" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back. 
Opt( "GUIDataSeparatorChar" [, param ] )\nDefine the character which delimits subitems in GUICtrlSetData. The default character is '|'. 
Opt( "GUIOnEventMode" [, param ] )\nEnable/disable OnEvent functions notifications. 0 = (default)\ndisable. 1 = enable. 
Opt( "GUIResizeMode" [, param ] )\nChange default resizing for a control. 0 = (default)\nkeep default control resizing. &lt;1024 = anytype of resizing see <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing</a>. 
Opt( "GUIEventOptions" [, param ] )\nChange special event behavior or GUI function return values. 0 = (default)\nWindows behavior on click on Minimize,Restore, Maximize, Resize. 1 = suppress windows behavior on minimize, restore or maximize click button or window resize. Just sends the notification. 
Opt( "MouseClickDelay" [, param ] )\nAlters the length of the brief pause in between mouse clicks. Time in milliseconds to pause (default=10). 
Opt( "MouseClickDownDelay" [, param ] )\nAlters the length a click is held down before release. Time in milliseconds to pause (default=10). 
Opt( "MouseClickDragDelay" [, param ] )\nAlters the length of the brief pause at the start and end of a mouse drag operation. Time in milliseconds to pause (default=250). 
Opt( "MouseCoordMode" [, param ] )\nSets the way coords are used in the mouse functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default)\n2 = relative coords to the client area of the active window 
Opt( "MustDeclareVars" [, param ] )\nIf this option is used then all variables must be pre-declared with Dim, Local or Global before they can be used - removes the chance for misspelled variables causing bugs. 1 = Variables must be pre-declared 0 = Variables don't need to be pre-declared (default)\n
Opt( "PixelCoordMode" [, param ] )\nSets the way coords are used in the pixel functions, either absolute coords or coords relative to the window defined by hwnd (default active window): 0 = relative coords to the defined window 1 = absolute screen coordinates (default)\n2 = relative coords to the client area of the defined window 
Opt( "SendAttachMode" [, param ] )\nSpecifies if AutoIt attaches input threads when using Send()\nfunction.  When not attaching (default mode=0)\ndetecting the state of capslock/scrolllock and numlock can be unreliable under NT4.  However, when you specify attach mode=1 the Send("{... down/up}")\nsyntax will not work and there may be problems with sending keys to "hung" windows.  ControlSend()\nALWAYS attaches and is not affected by this mode. 0 = don't attach (default)\n1 = attach 
Opt( "SendCapslockMode" [, param ] )\nSpecifies if AutoIt should store the state of capslock before a Send function and restore it afterwards. 0 = don't store/restore 1 = store and restore (default)\n
Opt( "SendKeyDelay" [, param ] )\nAlters the length of the brief pause in between sent keystrokes.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
Opt( "SendKeyDownDelay" [, param ] )\nAlters the length of time a key is held down before being released during a keystroke.  For applications that take a while to register keypresses you may need to raise this value from the default.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
Opt( "TCPTimeout" [, param ] )\nDefines the time before TCP functions stop if no communication. Time in milliseconds before timeout (default=100). 
Opt( "TrayAutoPause" [, param ] )\nScript pauses when click on tray icon. 0 = no pause 1 = pause (default). If there is no DefaultMenu no pause will occurs. 
Opt( "TrayIconDebug" [, param ] )\nIf enabled shows the current script line in the tray icon tip to help debugging. 0 = no debug information (default)\n1 = show debug 
Opt( "TrayIconHide" [, param ] )\nHides the AutoIt tray icon.  Note:  The icon will still initially appear ~750 milliseconds. 0 = show icon (default)\n1 = hide icon 
Opt( "TrayMenuMode" [, param ] )\nExtend the behaviour of the script tray icon/menu. This can be done with a combination (adding)\nof the following values. 0 = default menu items (Script Paused/Exit)\nare appended to the usercreated menu; usercreated checked items will automatically unchecked; if you double click the tray icon then the controlid is returned which has the "Default"-style (default). 1 = no default menu 2 = user created checked items will not automatically unchecked if you click it 4 = don't return the menuitemID which has the "default"-style in the main contextmenu if you double click the tray icon 8 = turn off auto check of radio item groups 
Opt( "TrayOnEventMode" [, param ] )\nEnable/disable OnEvent functions notifications for the tray. 0 = (default)\ndisable 1 = enable 
Opt( "WinDetectHiddenText" [, param ] )\nSpecifies if hidden window text can be "seen" by the window matching functions. 0 = Do not detect hidden text (default)\n1 = Detect hidden text 
Opt( "WinSearchChildren" [, param ] )\nAllows the window search routines to search child windows as well as top-level windows. 0 = Only search top-level windows (default)\n1 = Search top-level and child windows 
Opt( "WinTextMatchMode" [, param ] )\nAlters the method that is used to match window text during search operations. 1 = Complete / Slow mode (default)\n2 = Quick mode In quick mode AutoIt can usually only "see" dialog text, button text and the captions of some controls.  In the default mode much more text can be seen (for instance the contents of the Notepad window). If you are having performance problems when performing many window searches then changing to the "quick" mode may help. 
Opt( "WinTitleMatchMode" [, param ] )\nAlters the method that is used to match window titles during search operations. 1 = Match the title from the start (default)\n2 = Match any substring in the title 3 = Exact title match 4 = Advanced mode, see <a href="../intro/windowsadvanced.htm">Window Titles & Text (Advanced)</a> -1 to -4 = force lower case match according to other type of match. 
Opt( "WinWaitDelay" [, param ] )\nAlters how long a script should briefly pause after a successful window-related operation. Time in milliseconds to pause (default=250). 
Ping( "address/hostname" [, timeout] )\nPings a host and returns the roundtrip-time.
PixelChecksum( left, top, right, bottom [, step [, hwnd [, mode]]] )\nGenerates a checksum for a region of pixels.
PixelGetColor( x , y [, hwnd] )\nReturns a pixel color according to x,y pixel coordinates.
PixelSearch( left, top, right, bottom, color [, shade-variation [, step [, hwnd]]] )\nSearches a rectangle of pixels for the pixel color provided.
PluginClose( dllhandle )\nClose a plugin file
PluginOpen( filename )\nOpen a plugin file.
ProcessClose( "process" )\nTerminates a named process.
ProcessExists( "process" )\n Checks to see if a specified process exists. 
ProcessGetStats( ["process" [, type]] )\nReturns an array about Memory or IO infos of a running process.
ProcessList( ["name"] )\nReturns an array listing the currently running processes (names and PIDs).
ProcessSetPriority( "process", priority )\nChanges the priority of a process
ProcessWait( "process" [, timeout] )\nPauses script execution until a given process exists.
ProcessWaitClose( "process" [, timeout] )\nPauses script execution until a given process does not exist.
ProgressOff(  )\nTurns Progress window off.
ProgressOn( "title", "maintext" [, "subtext" [, x pos [, y pos [, opt]]]] )\nCreates a customizable progress bar window.
ProgressSet( percent [, "subtext" [, "maintext"]] )\nSets the position and/or text of a previously created Progress bar window.
Ptr( expression )\nConverts an expression into a pointer variant.
Random( [Min [, Max [, Flag]]] )\nGenerates a pseudo-random float-type number.
RegDelete( "keyname" [, "valuename"] )\nDeletes a key or value from the registry.
RegEnumKey( "keyname", instance )\nReads the name of a subkey according to its instance.
RegEnumVal( "keyname", instance )\nReads the name of a value according to its instance.
RegRead( "keyname", "valuename" )\nReads a value from the registry.
RegWrite( "keyname" [,"valuename" [, "type" [, value]]] )\nCreates a key or value in the registry.
Round( expression [, decimalplaces] )\nReturns a number rounded to a specified number of decimal places.
Run( "program" [, "workingdir" [, show_flag [, opt_flag]]] )\nRuns an external program.
RunAs( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )\nRuns an external program under the context of a different user.
RunAsWait( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )\nRuns an external program under the context of a different user and pauses script execution until the program finishes.
RunWait( "program" [, "workingdir" [, show_flag [, opt_flag]]] )\nRuns an external program and pauses script execution until the program finishes.
Send( "keys" [, flag] )\nSends simulated keystrokes to the active window.
SendKeepActive( "title" [, "text"] )\nAttempts to keep a specified window active during Send().
SetError( code [, extended [, return value]] )\nManually set the value of the @error macro.
SetExtended( code [, return value] )\nManually set the value of the @extended macro.
ShellExecute( "filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] )\nRuns an external program using the ShellExecute API.
ShellExecuteWait( "filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] )\nRuns an external program using the ShellExecute API and pauses script execution until it finishes.
Shutdown( code [, reason] )\nShuts down the system.
Sin( expression )\nCalculates the sine of a number.
Sleep( delay )\nPause script execution.
SoundPlay( "filename" [, wait] )\nPlay a sound file.
SoundSetWaveVolume( percent )\nSets the system wave volume by percent.
SplashImageOn( "title", "file" [, width [, height [, x pos [, y pos [, opt]]]]] )\nCreates a customizable image popup window.
SplashOff(  )\nTurns SplashText or SplashImage off.
SplashTextOn( "title", "text" [, w [, h [, x pos [, y pos [, opt [, "fontname" [, fontsz [, fontwt]]]]]]]] )\nCreates a customizable text popup window.
Sqrt( expression )\nCalculates the square-root of a number.
SRandom( Seed )\nSet Seed for random number generation.
StatusbarGetText( "title" [, "text" [, part]] )\nRetrieves the text from a standard status bar control.
StderrRead( process_id [, peek = false [, binary = false]] )\nReads from the STDERR stream of a previously run child process.
StdinWrite( process_id [, data] )\nWrites a number of characters to the STDIN stream of a previously run child process.
StdioClose( process_id )\nCloses all resources associated with a process previously run with STDIO redirection.
StdoutRead( process_id [, peek = false [, binary = false]] )\nReads from the STDOUT stream of a previously run child process.
String( expression )\nReturns the string representation of an expression.
StringAddCR( "string" )\nTakes a string and prefixes all linefeed characters ( Chr(10)\n)\nwith a carriage return character ( Chr(13)\n).
StringCompare( "string1", "string2" [, casesense] )\nCompares two strings with options.
StringFormat( "format control", var1 [, ... var32] )\nReturns a formatted string (similar to the C sprintf()\nfunction).
StringFromASCIIArray( array, [start [, end [, encoding]]] )\nConverts an array of ASCII codes to a string.
StringInStr( "string", "substring" [, casesense [, occurrence [, start [, count]]]] )\nChecks if a string contains a given substring.
StringIsAlNum( "string" )\nChecks if a string contains only alphanumeric characters.
StringIsAlpha( "string" )\nChecks if a string contains only alphabetic characters.
StringIsASCII( "string" )\nChecks if a string contains only ASCII characters in the range 0x00 - 0x7f (0 - 127).
StringIsDigit( "string" )\nChecks if a string contains only digit (0-9)\ncharacters.
StringIsFloat( "string" )\nChecks if a string is a floating point number.
StringIsInt( "string" )\nChecks if a string is an integer.
StringIsLower( "string" )\nChecks if a string contains only lowercase characters.
StringIsSpace( "string" )\nChecks if a string contains only whitespace characters.
StringIsUpper( "string" )\nChecks if a string contains only uppercase characters.
StringIsXDigit( "string" )\nChecks if a string contains only hexadecimal digit (0-9, A-F)\ncharacters.
StringLeft( "string", count )\nReturns a number of characters from the left-hand side of a string.
StringLen( "string" )\n Returns the number of characters in a string. 
StringLower( "string" )\nConverts a string to lowercase.
StringMid( "string", start [, count] )\nExtracts a number of characters from a string.
StringRegExp( "test", "pattern" [, flag [, offset]] )\nCheck if a string fits a given regular expression pattern.
StringRegExpReplace( "test", "pattern", "replace", [count] )\nReplace text in a string based on regular expressions.
StringReplace( "string", "searchstring/start", "replacestring" [, occurrence [, casesense]] )\nReplaces substrings in a string.
StringRight( "string", count )\nReturns a number of characters from the right-hand side of a string.
StringSplit( "string", "delimiters" [, flag] )\nSplits up a string into substrings depending on the given delimiters.
StringStripCR( "string" )\nRemoves all carriage return values ( Chr(13)\n)\nfrom a string.
StringStripWS( "string", flag )\nStrips the white space in a string.
StringToASCIIArray( "string", [start [, end [, encoding]]] )\nConverts a string to an array containing the ASCII code of each character.
StringToBinary( expression [, flag] )\nConverts a string into binary data.
StringTrimLeft( "string", count )\nTrims a number of characters from the left hand side of a string.
StringTrimRight( "string", count )\nTrims a number of characters from the right hand side of a string.
StringUpper( "string" )\nConverts a string to uppercase.
Tan( expression )\nCalculates the tangent of a number.
TCPAccept( mainsocket )\nPermits an incoming connection attempt on a socket.
TCPCloseSocket( socket )\nCloses a TCP socket.
TCPConnect( IPAddr, port )\nCreate a socket connected to an existing server.
TCPListen( IPAddr, port [, MaxPendingConnection] )\nCreates a socket listening for an incoming connection.
TCPNameToIP( name )\nConverts an Internet name to IP address.
TCPRecv( mainsocket, maxlen [, flag] )\nReceives data from a connected socket.
TCPSend( mainsocket, data )\nSends data on a connected socket.
TCPShutdown( )\nStops TCP/UDP services.
TCPStartup( )\nStarts TCP or UDP services.
TimerDiff( handle )\nReturns the difference in time from a previous call to TimerInit().
TimerInit(  )\nReturns a handle that can be passed to TimerDiff()\nto calculate the difference in milliseconds.
ToolTip( "text" [, x [, y [, "title" [, icon [, options]]]]] )\nCreates a tooltip anywhere on the screen.
TrayCreateItem( text [, menuID [, menuentry [, menuradioitem]]] )\nCreates a menuitem control for the tray.
TrayCreateMenu( "sub/menutext" [, menuID [, menuentry]] )\nCreates a menu control for the tray menu.
TrayGetMsg(  )\nPolls the tray to see if any events have occurred.
TrayItemDelete( controlID )\nDeletes a menu/item control from the tray menu.
TrayItemGetHandle( controlID )\nReturns the handle for a tray menu(item).
TrayItemGetState( [controlID] )\nGets the current state of a control.
TrayItemGetText( controlID )\nGets the itemtext of a tray menu/item control.
TrayItemSetOnEvent( itemID, "function" )\nDefines a user-defined function to be called when a tray item is clicked.
TrayItemSetState( controlID, state )\nSets the state of a tray menu/item control.
TrayItemSetText( controlID, text )\nSets the itemtext of a tray menu/item control.
TraySetClick( flag )\nSets the clickmode of the tray icon - what mouseclicks will display the tray menu.
TraySetIcon( [filename [, iconID]] )\nLoads/Sets a specified tray icon.
TraySetOnEvent( specialID, "function" )\nDefines a user function to be called when a special tray action happens.
TraySetPauseIcon( [filename [, iconID]] )\nLoads/Sets a specified tray pause icon.
TraySetState( [flag] )\nSets the state of the tray icon.
TraySetToolTip( [text] )\n(Re)Sets the tooltip text for the tray icon.
TrayTip( "title", "text", timeout [, option] )\nDisplays a balloon tip from the AutoIt Icon.
UBound( Array [, Dimension] )\nReturns the size of array dimensions.
UDPBind( IPAddr, port )\nCreate a socket bound to an incoming connection.
UDPCloseSocket( socketarray )\nClose a UDP socket.
UDPOpen( IPAddr, port [, flag] )\nOpen a socket connected to an existing server .
UDPRecv( socketarray, maxlen [, flag] )\nReceives data from an opened socket
UDPSend( socketarray, data )\nSends data on an opened socket
UDPShutdown( )\nStops TCP/UDP services.
UDPStartup( )\nStarts TCP or UDP services.
VarGetType( expression )\nReturns the internal type representation of a variant.
WinActivate( "title" [, "text"] )\nActivates (gives focus to)\na window.
WinActive( "title" [, "text"] )\nChecks to see if a specified window exists and is currently active.
WinClose( "title" [, "text"] )\nCloses a window.
WinExists( "title" [, "text"] )\nChecks to see if a specified window exists.
WinFlash( "title" [,"text" [,flashes [,delay]]] )\nFlashes a window in the taskbar.
WinGetCaretPos(  )\nReturns the coordinates of the caret in the foreground window
WinGetClassList( "title" [, "text"] )\nRetrieves the classes from a window.
WinGetClientSize( "title" [, "text"] )\nRetrieves the size of a given window's client area.
WinGetHandle( "title" [, "text"] )\nRetrieves the internal handle of a window.
WinGetPos( "title" [, "text"] )\nRetrieves the position and size of a given window.
WinGetProcess( "title" [, "text"] )\nRetrieves the Process ID (PID)\nassociated with a window.
WinGetState( "title" [, "text"] )\nRetrieves the state of a given window.
WinGetText( "title" [, "text"] )\nRetrieves the text from a window.
WinGetTitle( "title" [, "text"] )\nRetrieves the full title from a window.
WinKill( "title" [, "text"] )\nForces a window to close.
WinList( ["title" [, "text"]] )\nRetrieves a list of windows.
WinMenuSelectItem( "title", "text", "item" [, "item" [, "item" [, "item" [, "item" [, "item" [, "item"]]]]]] )\nInvokes a menu item of a window.
WinMinimizeAll(  )\nMinimizes all windows.
WinMinimizeAllUndo(  )\nUndoes a previous WinMinimizeAll function.
WinMove( "title", "text", x, y [, width [, height [, speed]]] )\nMoves and/or resizes a window.
WinSetOnTop( "title", "text", flag )\nChange a window's  "Always On Top" attribute.
WinSetState( "title", "text", flag )\nShows, hides, minimizes, maximizes, or restores a window.
WinSetTitle( "title", "text", "newtitle" )\nChanges the title of a window.
WinSetTrans( "title", "text", transparency )\nSets the transparency of a window. (Windows 2000/XP or later)
WinWait( "title" [, "text" [, timeout]] )\nPauses execution of the script until the requested window exists.
WinWaitActive( "title" [, "text" [, timeout]] )\nPauses execution of the script until the requested window is active.
WinWaitClose( "title" [, "text" [, timeout]] )\nPauses execution of the script until the requested window does not exist.
WinWaitNotActive( "title" [, "text" [, timeout]] )\nPauses execution of the script until the requested window is not active.
_ArrayAdd(ByRef $avArray, $vValue)\nAdds a specified value at the end of an existing array. (Requires: #include <Array.au3>)
_ArrayBinarySearch(Const ByRef $avArray, $vValue [, $iStart = 0 [, $iEnd = 0]])\nUses the binary search algorithm to search through a 1-dimensional array. (Requires: #include <Array.au3>)
_ArrayCombinations(ByRef $avArray, $iSet [, $sDelim = ""])\nReturns an Array of the Combinations of a Set of Elements from a Selected Array (Requires: #include <Array.au3>)
_ArrayConcatenate(ByRef $avArrayTarget, Const ByRef $avArraySource [, $iStart = 0])\nConcatenate two arrays. (Requires: #include <Array.au3>)
_ArrayDelete(ByRef $avArray, $iElement)\nDeletes the specified element from the given array. (Requires: #include <Array.au3>)
_ArrayDisplay(Const ByRef $avArray [, $sTitle = "Array: ListView Display" [, $iItemLimit = -1 [, $iTranspose = 0 [, $sSeparator = "" [, $sReplace = "|" [, $sHeader = ""]]]]]])\nDisplays given 1D or 2D array array in a listview. (Requires: #include <Array.au3>)
_ArrayFindAll(Const ByRef $avArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iSubItem = 0]]]]])\nFind the indices of all ocurrences of a search query between two points in a 1D or 2D array using _ArraySearch(). (Requires: #include <Array.au3>)
_ArrayInsert(ByRef $avArray, $iElement [, $vValue = ""])\nAdd a new value at the specified position. (Requires: #include <Array.au3>)
_ArrayMax(Const ByRef $avArray [, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]])\nReturns the highest value held in an array. (Requires: #include <Array.au3>)
_ArrayMaxIndex(Const ByRef $avArray [, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]])\nReturns the index where the highest value occurs in the array. (Requires: #include <Array.au3>)
_ArrayMin(Const ByRef $avArray [, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]])\nReturns the lowest value held in an array. (Requires: #include <Array.au3>)
_ArrayMinIndex(Const ByRef $avArray [, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]])\nReturns the index where the lowest value occurs in the array. (Requires: #include <Array.au3>)
_ArrayPermute(ByRef $avArray [, $sDelim = ""])\nReturns an Array of the Permutations of all Elements in an Array (Requires: #include <Array.au3>)
_ArrayPop(ByRef $avArray)\nReturns the last element of an array, deleting that element from the array at the same time. (Requires: #include <Array.au3>)
_ArrayPush(ByRef $avArray, $vValue [, $iDirection = 0])\nAdd new values without increasing array size by inserting at the end the new value and deleting the first one or vice versa. (Requires: #include <Array.au3>)
_ArrayReverse(ByRef $avArray [, $iStart = 0 [, $iEnd = 0]])\nTakes the given array and reverses the order in which the elements appear in the array. (Requires: #include <Array.au3>)
_ArraySearch(Const ByRef $avArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare= 0 [, $iForward = 1 [, $iSubItem = -1]]]]]])\nFinds an entry within a 1D or 2D array. Similar to _ArrayBinarySearch(), except that the array does not need to be sorted. (Requires: #include <Array.au3>)
_ArraySort(ByRef $avArray [, $iDescending = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0]]]])\nSort a 1D or 2D array on a specific index using the quicksort/insertionsort algorithms. (Requires: #include <Array.au3>)
_ArraySwap(ByRef $vItem1, ByRef $vItem2)\nSwaps two items. (Requires: #include <Array.au3>)
_ArrayToClip(Const ByRef $avArray [, $iStart = 0 [, $iEnd = 0]])\nSends the contents of an array to the clipboard, each element delimited by a carriage return. (Requires: #include <Array.au3>)
_ArrayToString(Const ByRef $avArray [, $sDelim = "|" [, $iStart = 0 [, $iEnd = 0]]])\nPlaces the elements of an array into a single string, separated by the specified delimiter. (Requires: #include <Array.au3>)
_ArrayTrim(ByRef $avArray, $iTrimNum [, $iDirection = 0 [, $iStart = 0 [, $iEnd = 0]]])\nTrims a certain number of characters from all elements in an array. (Requires: #include <Array.au3>)
_ArrayUnique($aArray [, $iDimension = 1 [, $iBase = 0 [, $iCase = 0 [, $vDelim = "|"]]]])\nReturns the Unique Elements of a 1-dimensional array. (Requires: #include <Array.au3>)
_Assert($sCondition [,$bExit = True [,$nCode = 0x7FFFFFFF [,$sLine = @ScriptLineNumber]]])\nDisplay a message if assertion fails. (Requires: #include <Debug.au3>)
_ChooseColor([$iReturnType = 0 [, $iColorRef = 0 [, $iRefType = 0 [, $hWndOwnder = 0]]]])\nCreates a Color dialog box that enables the user to select a color (Requires: #include <Misc.au3>)
_ChooseFont([$sFontName = "Courier New" [, $iPointSize = 10 [, $iColorRef = 0 [, $iFontWeight = 0 [, $iItalic = False [, $iUnderline = False [, $iStrikethru = False [, $hWndOwner = 0]]]]]]]])\nCreates a Font dialog box that enables the user to choose attributes for a logical font. (Requires: #include <Misc.au3>)
_ClipBoard_ChangeChain($hRemove, $hNewNext)\nRemoves a specified window from the chain of clipboard viewers (Requires: #include <Clipboard.au3>)
_ClipBoard_Close()\nCloses the clipboard (Requires: #include <Clipboard.au3>)
_ClipBoard_CountFormats()\nRetrieves the number of different data formats currently on the clipboard (Requires: #include <Clipboard.au3>)
_ClipBoard_Empty()\nEmpties the clipboard and frees handles to data in the clipboard (Requires: #include <Clipboard.au3>)
_ClipBoard_EnumFormats($iFormat)\nEnumerates the data formats currently available on the clipboard (Requires: #include <Clipboard.au3>)
_ClipBoard_FormatStr($iFormat)\nReturns a string representation of a standard clipboard format (Requires: #include <Clipboard.au3>)
_ClipBoard_GetData([$iFormat = 1])\nRetrieves data from the clipboard in a specified format (Requires: #include <Clipboard.au3>)
_ClipBoard_GetDataEx([$iFormat = 1])\nRetrieves data from the clipboard in a specified format (Requires: #include <Clipboard.au3>)
_ClipBoard_GetFormatName($iFormat)\nRetrieves the name of the specified registered format (Requires: #include <Clipboard.au3>)
_ClipBoard_GetOpenWindow()\nRetrieves the handle to the window that currently has the clipboard open (Requires: #include <Clipboard.au3>)
_ClipBoard_GetOwner()\nRetrieves the window handle of the current owner of the clipboard (Requires: #include <Clipboard.au3>)
_ClipBoard_GetPriorityFormat($aFormats)\nRetrieves the first available clipboard format in the specified list (Requires: #include <Clipboard.au3>)
_ClipBoard_GetSequenceNumber()\nRetrieves the clipboard sequence number for the current window station (Requires: #include <Clipboard.au3>)
_ClipBoard_GetViewer()\nRetrieves the handle to the first window in the clipboard viewer chain (Requires: #include <Clipboard.au3>)
_ClipBoard_IsFormatAvailable($iFormat)\nDetermines whether the clipboard contains data in the specified format (Requires: #include <Clipboard.au3>)
_ClipBoard_Open($hOwner)\nOpens the clipboard and prevents other applications from modifying the clipboard (Requires: #include <Clipboard.au3>)
_ClipBoard_RegisterFormat($sFormat)\nRegisters a new clipboard format (Requires: #include <Clipboard.au3>)
_ClipBoard_SetData($vData [, $iFormat = 1])\nPlaces data on the clipboard in a specified clipboard format (Requires: #include <Clipboard.au3>)
_ClipBoard_SetDataEx(ByRef $hMemory [, $iFormat = 1])\nPlaces data on the clipboard in a specified clipboard format (Requires: #include <Clipboard.au3>)
_ClipBoard_SetViewer($hViewer)\nAdds the specified window to the chain of clipboard viewers (Requires: #include <Clipboard.au3>)
_ClipPutFile($sFile [, $sSeparator = "|"])\nCopy Files to Clipboard Like Explorer does (Requires: #include <Misc.au3>)
_ColorConvertHSLtoRGB($avArray)\nConverts HSL to RGB (Requires: #include <Color.au3>)
_ColorConvertRGBtoHSL($avArray)\nConverts RGB to HSL (Requires: #include <Color.au3>)
_ColorGetBlue($nColor)\nReturns the blue component of a given color. (Requires: #include <Color.au3>)
_ColorGetCOLORREF($nColor)\nReturns the COLORREF color. (Requires: #include <Color.au3>)
_ColorGetGreen($nColor)\nReturns the green component of a given color. (Requires: #include <Color.au3>)
_ColorGetRed($nColor)\nReturns the red component of a given color. (Requires: #include <Color.au3>)
_ColorGetRGB($nColor)\nReturns an array containing RGB values in their respective positions. (Requires: #include <Color.au3>)
_ColorSetCOLORREF($aColor)\nReturns the COLORREF color. (Requires: #include <Color.au3>)
_ColorSetRGB($aColor)\nReturns the RGB color. (Requires: #include <Color.au3>)
_Crypt_DecryptData($vData, $vCryptKey, $iALG_ID [, $fFinal = True])\nDecrypts data using the supplied key (Requires: #include <Crypt.au3>)
_Crypt_DecryptFile($sSourceFile, $sDestinationFile, $vCryptKey, $iALG_ID)\nDecrypts a file with specified key and algorithm (Requires: #include <Crypt.au3>)
_Crypt_DeriveKey($vPassword, $iALG_ID [, $iHash_ALG_ID = $CALG_MD5])\nCreates a key from algorithm and password (Requires: #include <Crypt.au3>)
_Crypt_DestroyKey($hCryptKey)\nFrees the resources used by a key (Requires: #include <Crypt.au3>)
_Crypt_EncryptData($vData, $vCryptKey, $iALG_ID [, $fFinal = True])\nEncrypts data using the supplied key (Requires: #include <Crypt.au3>)
_Crypt_EncryptFile($sSourceFile, $sDestinationFile, $vCryptKey, $iALG_ID)\nEncrypts a file with specified key and algorithm (Requires: #include <Crypt.au3>)
_Crypt_HashData($vData, $iALG_ID [, $fFinal = True [, $hCryptHash = 0]])\nHash data with specified algorithm (Requires: #include <Crypt.au3>)
_Crypt_HashFile($sFile, $iALG_ID)\nHash a string with specified algorithm (Requires: #include <Crypt.au3>)
_Crypt_Shutdown()\nUninitialize the Crypt library (Requires: #include <Crypt.au3>)
_Crypt_Startup()\nInitialize the Crypt library (Requires: #include <Crypt.au3>)
_Date_Time_CompareFileTime($pFileTime1, $pFileTime2)\nCompares two file times (Requires: #include <Date.au3>)
_Date_Time_DOSDateTimeToArray($iDosDate, $iDosTime)\nDecode a DOS date/time to an array (Requires: #include <Date.au3>)
_Date_Time_DOSDateTimeToFileTime($iFatDate, $iFatTime)\nConverts MS-DOS date and time values to a file time (Requires: #include <Date.au3>)
_Date_Time_DOSDateTimeToStr($iDosDate, $iDosTime)\nDecode a DOS date to a string (Requires: #include <Date.au3>)
_Date_Time_DOSDateToArray($iDosDate)\nDecode a DOS date to an array (Requires: #include <Date.au3>)
_Date_Time_DOSDateToStr($iDosDate)\nDecode a DOS date to a string (Requires: #include <Date.au3>)
_Date_Time_DOSTimeToArray($iDosTime)\nDecode a DOS time to an array (Requires: #include <Date.au3>)
_Date_Time_DOSTimeToStr($iDosTime)\nDecode a DOS time to a string (Requires: #include <Date.au3>)
_Date_Time_EncodeFileTime($iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]])\nEncodes and returns a $tagFILETIME structure (Requires: #include <Date.au3>)
_Date_Time_EncodeSystemTime($iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]])\nEncodes and returns a $tagSYSTEMTIME structure (Requires: #include <Date.au3>)
_Date_Time_FileTimeToArray(ByRef $tFileTime)\nDecode a file time to an array (Requires: #include <Date.au3>)
_Date_Time_FileTimeToDOSDateTime($pFileTime)\nConverts MS-DOS date and time values to a file time (Requires: #include <Date.au3>)
_Date_Time_FileTimeToLocalFileTime($pFileTime)\nConverts a file time based on the Coordinated Universal Time to a local file time (Requires: #include <Date.au3>)
_Date_Time_FileTimeToStr(ByRef $tFileTime [, $bFmt = 0])\nDecode a file time to a date/time string (Requires: #include <Date.au3>)
_Date_Time_FileTimeToSystemTime($pFileTime)\nConverts a file time to system time format (Requires: #include <Date.au3>)
_Date_Time_GetFileTime($hFile)\nRetrieves the date and time that a file was created, accessed and modified (Requires: #include <Date.au3>)
_Date_Time_GetLocalTime()\nRetrieves the current local date and time (Requires: #include <Date.au3>)
_Date_Time_GetSystemTime()\nRetrieves the current system date and time expressed in UTC (Requires: #include <Date.au3>)
_Date_Time_GetSystemTimeAdjustment()\nDetermines whether the system is applying periodic time adjustments (Requires: #include <Date.au3>)
_Date_Time_GetSystemTimeAsFileTime()\nRetrieves the current system date and time expressed in UTC (Requires: #include <Date.au3>)
_Date_Time_GetSystemTimes()\nRetrieves system timing information (Requires: #include <Date.au3>)
_Date_Time_GetTickCount()\nRetrieves the number of milliseconds that have elapsed since Windows was started (Requires: #include <Date.au3>)
_Date_Time_GetTimeZoneInformation()\nRetrieves the current time zone settings (Requires: #include <Date.au3>)
_Date_Time_LocalFileTimeToFileTime($pLocalTime)\nConverts a local file time to a file time based on UTC (Requires: #include <Date.au3>)
_Date_Time_SetFileTime($hFile, $pCreateTime, $pLastAccess, $pLastWrite)\nSets the date and time that a file was created, accessed and modified (Requires: #include <Date.au3>)
_Date_Time_SetLocalTime($pSystemTime)\nSets the current local date and time (Requires: #include <Date.au3>)
_Date_Time_SetSystemTime($pSystemTime)\nSets the current system time and date, expressed in UTC (Requires: #include <Date.au3>)
_Date_Time_SetSystemTimeAdjustment($iAdjustment, $fDisabled)\nEnables or disables periodic time adjustments to the system's time of day clock (Requires: #include <Date.au3>)
_Date_Time_SetTimeZoneInformation($iBias, $sStdName, $tStdDate, $iStdBias, $sDayName, $tDayDate, $iDayBias)\nSets the current time zone settings (Requires: #include <Date.au3>)
_Date_Time_SystemTimeToArray(ByRef $tSystemTime)\nDecode a system time to an array (Requires: #include <Date.au3>)
_Date_Time_SystemTimeToDateStr(ByRef $tSystemTime [, $bFmt = 0])\nDecode a system time to a date string (Requires: #include <Date.au3>)
_Date_Time_SystemTimeToDateTimeStr(ByRef $tSystemTime [, $bFmt = 0])\nDecode a system time to a date/time string (Requires: #include <Date.au3>)
_Date_Time_SystemTimeToFileTime($pSystemTime)\nConverts a system time to file time format (Requires: #include <Date.au3>)
_Date_Time_SystemTimeToTimeStr(ByRef $tSystemTime)\nDecode a system time to a time string (Requires: #include <Date.au3>)
_Date_Time_SystemTimeToTzSpecificLocalTime($pUTC [, $pTimeZone = 0])\nConverts a UTC time to a specified time zone's corresponding local time (Requires: #include <Date.au3>)
_Date_Time_TzSpecificLocalTimeToSystemTime($pLocalTime [, $pTimeZone = 0])\nConverts a local time to a time in UTC (Requires: #include <Date.au3>)
_DateAdd($sType, $iValToAdd, $sDate)\nCalculates a new date based on a given date and add an interval. (Requires: #include <Date.au3>)
_DateDayOfWeek($iDayNum [, $iShort = 0])\nReturns the name of the weekday, based on the specified day. (Requires: #include <Date.au3>)
_DateDaysInMonth($iYear, $iMonthNum)\nReturns the number of days in a month, based on the specified month and year. (Requires: #include <Date.au3>)
_DateDiff($sType, $sStartDate, $sEndDate)\nReturns the difference between 2 dates, expressed in the type requested (Requires: #include <Date.au3>)
_DateIsLeapYear($iYear)\nChecks a given year to see if it is a leap year. (Requires: #include <Date.au3>)
_DateIsValid($sDate)\nChecks the given date to determine if it is a valid date. (Requires: #include <Date.au3>)
_DateTimeFormat($sDate, $sType)\nReturns the date in the PC's regional settings format. (Requires: #include <Date.au3>)
_DateTimeSplit($sDate, ByRef $asDatePart, ByRef $iTimePart)\nSplit a string containing Date and Time into two separate Arrays. (Requires: #include <Date.au3>)
_DateToDayOfWeek($iYear, $iMonth, $iDay)\nReturns the weekdaynumber for a given date. (Requires: #include <Date.au3>)
_DateToDayOfWeekISO($iYear, $iMonth, $iDay)\nReturns the ISO weekdaynumber for a given date. (Requires: #include <Date.au3>)
_DateToDayValue($iYear, $iMonth, $iDay)\nReturns the daynumber since since noon 4713 BC January 1 for a given Gregorian date. (Requires: #include <Date.au3>)
_DateToMonth($iMonth [, $ishort = 0])\nReturns the name of the Month, based on the specified month number. (Requires: #include <Date.au3>)
_DayValueToDate($iJulianDate, ByRef $iYear, ByRef $iMonth, ByRef $iDay)\nAdd the given days since noon 4713 BC January 1 and returns the Gregorian date. (Requires: #include <Date.au3>)
_DebugBugReportEnv()\nOutputs a string containing information for Bug report submission. (Requires: #include <Debug.au3>)
_DebugOut($sOutput [, $bActivate])\nDisplays output on a debugging session started by _DebugSetup()\n(Requires: #include <Debug.au3>)
_DebugReport($sData [,$bLastError = False [,$bExit = False]])\nWrites to a debugging session (Requires: #include <Debug.au3>)
_DebugReportEx($sData [,$bLastError = False [,$bExit = False]])\nWrites to a debugging session a formatted message (Requires: #include <Debug.au3>)
_DebugReportVar($sVarname, $vVar [,$bErrExt = False])\nWrites to debugging session the content of a variable (Requires: #include <Debug.au3>)
_DebugSetup($sTitle = Default, $bBugReportInfos = False, $vReportType = 1, $sLogFile = "")\nSetup up a debug session using a specific reporting type (Requires: #include <Debug.au3>)
_Degree($nRadians)\nConverts radians to degrees. (Requires: #include <Math.au3>)
_EventLog__Backup($hEventLog, $sFileName)\nSaves the event log to a backup file (Requires: #include <EventLog.au3>)
_EventLog__Clear($hEventLog, $sFileName)\nClears the event log (Requires: #include <EventLog.au3>)
_EventLog__Close($hEventLog)\nCloses a read handle to the event log (Requires: #include <EventLog.au3>)
_EventLog__Count($hEventLog)\nRetrieves the number of records in the event log (Requires: #include <EventLog.au3>)
_EventLog__DeregisterSource($hEventLog)\nCloses a write handle to the event log (Requires: #include <EventLog.au3>)
_EventLog__Full($hEventLog)\nRetrieves whether the event log is full (Requires: #include <EventLog.au3>)
_EventLog__Notify($hEventLog, $hEvent)\nEnables an application to receive event notifications (Requires: #include <EventLog.au3>)
_EventLog__Oldest($hEventLog)\nRetrieves the absolute record number of the oldest record in the event log (Requires: #include <EventLog.au3>)
_EventLog__Open($sServerName, $sSourceName)\nOpens a handle to the event log (Requires: #include <EventLog.au3>)
_EventLog__OpenBackup($sServerName, $sFileName)\nOpens a handle to a backup event log (Requires: #include <EventLog.au3>)
_EventLog__Read($hEventLog [, $fRead = True [, $fForward = True [, $iOffset = 0]]])\nReads an entry from the event log (Requires: #include <EventLog.au3>)
_EventLog__RegisterSource($sServerName, $sSourceName)\nRetrieves a registered handle to the specified event log (Requires: #include <EventLog.au3>)
_EventLog__Report($hEventLog, $iType, $iCategory, $iEventID, $sUserName, $sDesc, $aData)\nWrites an entry at the end of the specified event log (Requires: #include <EventLog.au3>)
_ExcelBookAttach($s_string [, $s_mode = "FilePath"])\nAttach to the first existing instance of Microsoft Excel where the search string matches based on the selected mode. (Requires: #include <Excel.au3>)
_ExcelBookClose($oExcel [, $fSave = 1 [, $fAlerts = 0]])\nCloses the active workbook and removes the specified Excel object. (Requires: #include <Excel.au3>)
_ExcelBookNew([$fVisible = 1])\nCreates new workbook and returns its object identifier. (Requires: #include <Excel.au3>)
_ExcelBookOpen($sFilePath [, $fVisible = 1 [, $fReadOnly = False [, $sPassword = "" [, $sWritePassword = ""]]]])\nOpens an existing workbook and returns its object identifier. (Requires: #include <Excel.au3>)
_ExcelBookSave($oExcel [, $fAlerts = 0])\nSaves the active workbook of the specified Excel object. (Requires: #include <Excel.au3>)
_ExcelBookSaveAs($oExcel, $sFilePath [, $sType = "xls" [, $fAlerts = 0 [, $fOverWrite = 0 [, $sPassword = "" [, $sWritePassword = "" [, $iAccessMode = 1 [, $iConflictResolution = 2]]]]]]])\nSaves the active workbook of the specified Excel object with a new filename and/or type. (Requires: #include <Excel.au3>)
_ExcelColumnDelete($oExcel, $iColumn [, $iNumCols = 1])\nDelete a number of columns from the active worksheet. (Requires: #include <Excel.au3>)
_ExcelColumnInsert($oExcel, $iColumn [, $iNumCols = 1])\nInsert a number of columns into the active worksheet. (Requires: #include <Excel.au3>)
_ExcelFontSetProperties($oExcel, $sRangeOrRowStart [, $iColStart = 1 [, $iRowEnd = 1 [, $iColEnd = 1 [, $fBold = False [, $fItalic = False [, $fUnderline = False]]]]]])\nSet the bold, italic, and underline font properties of a range in an Excel object. (Requires: #include <Excel.au3>)
_ExcelHorizontalAlignSet($oExcel, $sRangeOrRowStart [, $iColStart = 1 [, $iRowEnd = 1 [, $iColEnd = 1 [, $sHorizAlign = "left"]]]])\nSet the horizontal alignment of each cell in a range. (Requires: #include <Excel.au3>)
_ExcelHyperlinkInsert($oExcel, $sLinkText, $sAddress, $sScreenTip, $sRangeOrRow [, $iColumn = 1])\nInserts a hyperlink into the active page. (Requires: #include <Excel.au3>)
_ExcelNumberFormat($oExcel, $sFormat, $sRangeOrRowStart [, $iColStart = 1 [, $iRowEnd = 1 [, $iColEnd = 1]]])\nApplies the specified formatting to the cells in the specified R1C1 Range. (Requires: #include <Excel.au3>)
_ExcelReadArray($oExcel, $iStartRow, $iStartColumn, $iNumCells [, $iDirection = 0 [, $iIndexBase = 0]])\nCreate an array from a row or column of the active worksheet. (Requires: #include <Excel.au3>)
_ExcelReadCell($oExcel, $sRangeOrRow [, $iColumn = 1])\nRead information from the active worksheet of the specified Excel object. (Requires: #include <Excel.au3>)
_ExcelReadSheetToArray($oExcel [, $iStartRow = 1 [, $iStartColumn = 1 [, $iRowCnt = 0 [, $iColCnt = 0 [, $iColShift = False]]]]])\nCreate a 2D array from the rows/columns of the active worksheet. (Requires: #include <Excel.au3>)
_ExcelRowDelete($oExcel, $iRow [, $iNumRows = 1])\nDelete a number of rows from the active worksheet. (Requires: #include <Excel.au3>)
_ExcelRowInsert($oExcel, $iRow [, $iNumRows = 1])\nInsert a number of rows into the active worksheet. (Requires: #include <Excel.au3>)
_ExcelSheetActivate($oExcel, $vSheet)\nActivate the specified sheet by string name or by number. (Requires: #include <Excel.au3>)
_ExcelSheetAddNew($oExcel [, $sName = ""])\nAdd new sheet to workbook - optionally with a name. (Requires: #include <Excel.au3>)
_ExcelSheetDelete($oExcel, $vSheet [, $fAlerts = False])\nDelete the specified sheet by string name or by number. (Requires: #include <Excel.au3>)
_ExcelSheetList($oExcel)\nReturn a list of all sheets in workbook, by name, as an array. (Requires: #include <Excel.au3>)
_ExcelSheetMove($oExcel, $vMoveSheet [, $vRelativeSheet = 1 [, $fBefore = True]])\nMove the specified sheet before another specified sheet. (Requires: #include <Excel.au3>)
_ExcelSheetNameGet($oExcel)\nReturn the name of the active sheet. (Requires: #include <Excel.au3>)
_ExcelSheetNameSet($oExcel, $sSheetName)\nSet the name of the active sheet. (Requires: #include <Excel.au3>)
_ExcelWriteArray($oExcel, $iStartRow, $iStartColumn, $aArray [, $iDirection = 0 [, $iIndexBase = 0]])\nWrite an array to a row or column on the active worksheet of the specified Excel object. (Requires: #include <Excel.au3>)
_ExcelWriteCell($oExcel, $sValue, $sRangeOrRow [, $iColumn = 1])\nWrite information to a cell on the active worksheet of the specified Excel object. (Requires: #include <Excel.au3>)
_ExcelWriteFormula($oExcel, $sFormula, $sRangeOrRow [, $iColumn = 1])\nWrite a formula to a cell on the active worksheet of the specified Excel object. (Requires: #include <Excel.au3>)
_ExcelWriteSheetFromArray($oExcel, ByRef $aArray [, $iStartRow = 1 [, $iStartColumn = 1 [, $iRowBase = 1 [, $iColBase = 1]]]])\nWrites a 2D array to the active worksheet (Requires: #include <Excel.au3>)
_FileCountLines($sFilePath)\nReturns the number of lines in the specified file. (Requires: #include <File.au3>)
_FileCreate($sFilePath)\nCreates or zero's out the length of the file specified. (Requires: #include <File.au3>)
_FileListToArray($sPath [, $sFilter = "*" [, $iFlag = 0]])\nLists files and\or folders in a specified path (Similar to using Dir with the /B Switch)\n(Requires: #include <File.au3>)
_FilePrint($s_File [, $i_Show = @SW_HIDE])\nPrints a plain text file. (Requires: #include <File.au3>)
_FileReadToArray($sFilePath, ByRef $aArray)\nReads the specified file into an array. (Requires: #include <File.au3>)
_FileWriteFromArray($File, $a_Array [, $i_Base = 0 [, $i_UBound = 0 [, $s_Delim= "|"]]])\nWrites Array records to the specified file. (Requires: #include <File.au3>)
_FileWriteLog($sLogPath, $sLogMsg [, $iFlag = -1])\nWrites current date, time and the specified text to a log file. (Requires: #include <File.au3>)
_FileWriteToLine($sFile, $iLine, $sText [, $fOverWrite = 0])\nWrites text to a specific line in a file. (Requires: #include <File.au3>)
_FTP_Close($l_InternetSession)\nCloses the _FTP_Open session. (Requires: #include <FTPEx.au3>)
_FTP_Command($l_FTPSession, $s_FTPCommand [, $l_Flags = 0x00000001 [, $l_ExpectResponse = 0 [, $l_Context = 0]]])\nSends a command to an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_Connect($l_InternetSession, $s_ServerName, $s_Username, $s_Password [, $i_Passive = 0 [, $i_ServerPort = 0 [, $l_Service = 1 [, $l_Flags = 0 [, $l_Context = 0]]]]])\nConnects to an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_DecodeInternetStatus($dwInternetStatus)\nDecode a received Internet Status. (Requires: #include <FTPEx.au3>)
_FTP_DirCreate($l_FTPSession, $s_Remote)\nMakes an Directory on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_DirDelete($l_FTPSession, $s_Remote)\nDelete's an Directory on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_DirGetCurrent($l_FTPSession)\nGet Current Directory on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_DirPutContents($l_InternetSession, $s_LocalFolder, $s_RemoteFolder, $b_RecursivePut [, $l_Context])\nPuts an folder on an FTP server. Recursivley if selected. (Requires: #include <FTPEx.au3>)
_FTP_DirSetCurrent($l_FTPSession, $s_Remote)\nSet Current Directory on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_FileClose($l_InternetSession)\nCloses the Handle returned by _FTP_FileOpen. (Requires: #include <FTPEx.au3>)
_FTP_FileDelete($l_FTPSession, $s_RemoteFile)\nDelete an file from an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_FileGet($l_FTPSession, $s_RemoteFile, $s_LocalFile [, $fFailIfExists = False, [$dwFlagsAndAttributes = 0 [, $l_Flags = 0 [, $l_Context = 0]]]])\nGet file from a FTP server. (Requires: #include <FTPEx.au3>)
_FTP_FileGetSize($l_FTPSession, $s_FileName)\nGets filesize of a file on the FTP server. (Requires: #include <FTPEx.au3>)
_FTP_FileOpen($hConnect, $lpszFileName [, $dwAccess = 0x80000000 [, $dwFlags = 2 [, $dwContext = 0]]])\nInitiates access to a remote file on an FTP server for reading or writing. (Requires: #include <FTPEx.au3>)
_FTP_FilePut($l_FTPSession, $s_LocalFile, $s_RemoteFile [, $l_Flags = 0 [, $l_Context = 0]])\nPuts an file on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_FileRead($h_File, $dwNumberOfBytesToRead)\nReads data from a handle opened by _FTP_FileOpen()\n(Requires: #include <FTPEx.au3>)
_FTP_FileRename($l_FTPSession, $s_Existing, $s_New)\nRenames an file on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_FileTimeLoHiToStr($LoDWORD, $HiDWORD [, $bFmt = 0])\nCloses the _FTP_Open session. (Requires: #include <FTPEx.au3>)
_FTP_FindFileClose($h_Handle)\nDelete FindFile Handle. (Requires: #include <FTPEx.au3>)
_FTP_FindFileFirst($l_FTPSession, $s_RemotePath, ByRef $h_Handle [, $l_Flags = 0 [, $l_Context = 0]])\nFind First File on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_FindFileNext($h_Handle)\nFind Next File on an FTP server. (Requires: #include <FTPEx.au3>)
_FTP_GetLastResponseInfo(ByRef $dwError, ByRef $szMessage)\nRetrieves the last error description or server response on the thread calling this function. (Requires: #include <FTPEx.au3>)
_FTP_ListToArray($l_FTPSession [, $Return_Type = 0 [, $l_Flags = 0 [, $l_Context]]])\nGet Filenames, Directories or Both of current remote directory. (Requires: #include <FTPEx.au3>)
_FTP_ListToArray2D($l_FTPSession [, $Return_Type = 0 [, $l_Flags = 0 [, $l_Context]]])\nGet Filenames and filesizes of current remote directory. (Requires: #include <FTPEx.au3>)
_FTP_ListToArrayEx($l_FTPSession [, $Return_Type = 0 [, $l_Flags = 0 [, $b_Fmt = 1 [, $l_Context]]]])\nGet names, sizes, attributes and times of files/dir of current remote directory. (Requires: #include <FTPEx.au3>)
_FTP_Open($s_Agent [, $l_AccessType = 1 [, $s_ProxyName = '' [, $s_ProxyBypass = '' [, $l_Flags = 0]]]])\nOpens an FTP session. (Requires: #include <FTPEx.au3>)
_FTP_ProgressDownload($l_FTPSession, $s_LocalFile, $s_RemoteFile [, $FunctionToCall = ""])\nDownloads a file in Binary Mode and shows a Progress window or by Calling a User defined Function. (Requires: #include <FTPEx.au3>)
_FTP_ProgressUpload($l_FTPSession, $s_LocalFile, $s_RemoteFile [, $FunctionToCall = ""])\nUploads a file in Binary Mode and shows a Progress window or by Calling a User defined Function (Requires: #include <FTPEx.au3>)
_FTP_SetStatusCallback($l_InternetSession, $sFunctionName)\nRegisters callback function that WinINet functions can call as progress is made during an operation. (Requires: #include <FTPEx.au3>)
_GDIPlus_ArrowCapCreate($fHeight, $fWidth [, $bFilled = True])\nCreates an adjustable arrow line cap with the specified height and width (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapDispose($hCap)\nRelease an adjustable arrow line cap object (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetFillState($hArrowCap)\nDetermines whether the arrow cap is filled (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetHeight($hArrowCap)\nGets the height of the arrow cap (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetMiddleInset($hArrowCap)\nGets the value of the inset (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetWidth($hArrowCap)\nGets the width of the arrow cap (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetFillState($hArrowCap, $bFilled = True)\nSets whether the arrow cap is filled (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetHeight($hArrowCap, $fHeight)\nSets the height of the arrow cap (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetMiddleInset($hArrowCap, $fInset)\nGets the value of the inset (Requires: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetWidth($hArrowCap, $fWidth)\nSets the width of the arrow cap (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapCloneArea($hBmp, $iLeft, $iTop, $iWidth, $iHeight [, $iFormat = 0x00021808])\nCreate a clone of a Bitmap object from the coordinates and format specified (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromFile($sFileName)\nCreate a Bitmap object from file (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromGraphics($iWidth, $iHeight, $hGraphics)\nCreates a Bitmap object based on a Graphics object, a width, and a height (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHBITMAP($hBmp [, $hPal = 0])\nCreate a Bitmap object from a bitmap handle (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateHBITMAPFromBitmap($hBitmap [, $iARGB = 0xFF000000])\nCreate a handle to a bitmap from a bitmap object (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapDispose($hBitmap)\nRelease a bitmap object (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapLockBits($hBitmap, $iLeft, $iTop, $iWidth, $iHeight [, $iFlags = $GDIP_ILMREAD [, $iFormat = $GDIP_PXF32RGB]])\nLocks a portion of a bitmap for reading or writing (Requires: #include <GDIPlus.au3>)
_GDIPlus_BitmapUnlockBits($hBitmap, $tBitmapData)\nUnlocks a portion of a bitmap that was locked by _GDIPlus_BitmapLockBits (Requires: #include <GDIPlus.au3>)
_GDIPlus_BrushClone($hBrush)\nClone a Brush object (Requires: #include <GDIPlus.au3>)
_GDIPlus_BrushCreateSolid([$iARGB = 0xFF000000])\nCreate a solid Brush object (Requires: #include <GDIPlus.au3>)
_GDIPlus_BrushDispose($hBrush)\nRelease a Brush object (Requires: #include <GDIPlus.au3>)
_GDIPlus_BrushGetSolidColor($hBrush, [$iARGB = 0xFF000000])\nGet the color of a Solid Brush object (Requires: #include <GDIPlus.au3>)
_GDIPlus_BrushGetType($hBrush)\nRetrieve the type of Brush object (Requires: #include <GDIPlus.au3>)
_GDIPlus_BrushSetSolidColor($hBrush, [$iARGB = 0xFF000000])\nSet the color of a Solid Brush object (Requires: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapDispose($hCap)\nRelease a custom line cap object (Requires: #include <GDIPlus.au3>)
_GDIPlus_Decoders()\nGet an array of information about the available image decoders (Requires: #include <GDIPlus.au3>)
_GDIPlus_DecodersGetCount()\nGet the number of available image decoders (Requires: #include <GDIPlus.au3>)
_GDIPlus_DecodersGetSize()\nGet the total size of the structure that is returned by _GDIPlus_GetImageDecoders (Requires: #include <GDIPlus.au3>)
_GDIPlus_DrawImagePoints($hGraphic, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY [, $count = 3])\nDraws an image at a specified location. (Requires: #include <GDIPlus.au3>)
_GDIPlus_Encoders()\nGet an array of information about the available image encoders (Requires: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetCLSID($sFileExt)\nReturn the encoder CLSID for a specific image file type (Requires: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetCount()\nGet the number of available image encoders (Requires: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamList($hImage, $sEncoder)\nGet the parameter list for a specified image encoder (Requires: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamListSize($hImage, $sEncoder)\nGet the size of the parameter list for a specified image encoder (Requires: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetSize()\nGet the total size of the structure that is returned by _GDIPlus_GetImageEncoders (Requires: #include <GDIPlus.au3>)
_GDIPlus_FontCreate($hFamily, $fSize [, $iStyle = 0 [, $iUnit = 3]])\nCreate a Font object (Requires: #include <GDIPlus.au3>)
_GDIPlus_FontDispose($hFont)\nRelease a Font object (Requires: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyCreate($sFamily)\nCreate a Font Family object (Requires: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyDispose($hFamily)\nRelease a Font Family object (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsClear($hGraphics [, $iARGB = 0xFF000000])\nClears a Graphics object to a specified color (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHDC($hDC)\nCreate a Graphics object from a device context (DC)\n(Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHWND($hWnd)\nCreate a Graphics object from a window handle (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDispose($hGraphics)\nRelease a Graphics object (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawArc($hGraphics, $iX, $iY, $iWidth, $iHeight, $fStartAngle, $fSweepAngle [, $hPen = 0])\nDraw an arc (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawBezier($hGraphics, $iX1, $iY1, $iX2, $iY2, $iX3, $iY3, $iX4, $iY4 [, $hPen = 0])\nDraw a bezier spline (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawClosedCurve($hGraphics, $aPoints [, $hPen = 0])\nDraw a closed cardinal spline (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawCurve($hGraphics, $aPoints [, $hPen = 0])\nDraw a cardinal spline (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawEllipse($hGraphics, $iX, $iY, $iWidth, $iHeight [, $hPen = 0])\nDraw an ellipse (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImage($hGraphics, $hImage, $iX, $iY)\nDraw an Image object (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRect($hGraphics, $hImage, $iX, $iY, $iW, $iH)\nDraws an image at a specified location (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRectRect($hGraphics, $hImage, $iSrcX, $iSrcY, $iSrcWidth, $iSrcHeight, $iDstX, $iDstY, $iDstWidth, $iDstHeight [, $iUnit = 2])\nDraw an Image object (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawLine($hGraphics, $iX1, $iY1, $iX2, $iY2 [, $hPen = 0])\nDraw a line (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPie($hGraphics, $iX, $iY, $iWidth, $iHeight, $fStartAngle, $fSweepAngle [, $hPen = 0])\nDraw a pie (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPolygon($hGraphics, $aPoints [, $hPen = 0])\nDraw a polygon (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawRect($hGraphics, $iX, $iY, $iWidth, $iHeight [, $hPen = 0])\nDraw a rectangle (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawString($hGraphics, $sString, $nX, $nY [, $sFont = "Arial" [, $fSize = 10 [, $iFormat = 0]]])\nDraw a string (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawStringEx($hGraphics, $sString, $hFont, $tLayout, $hFormat, $hBrush)\nDraw a string (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillClosedCurve($hGraphics, $aPoints [, $hBrush = 0])\nFill a closed cardinal spline (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillEllipse($hGraphics, $iX, $iY, $iWidth, $iHeight [, $hBrush = 0])\nFill an ellipse (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPie($hGraphics, $iX, $iY, $iWidth, $iHeight, $fStartAngle, $fSweepAngle [, $hBrush = 0])\nFill a pie (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPolygon($hGraphics, $aPoints [, $hBrush = 0])\nFill a polygon (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillRect($hGraphics, $iX, $iY, $iWidth, $iHeight [, $hBrush = 0])\nFill a rectangle (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetDC($hGraphics)\nGets a handle to the device context of the Graphics object (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetSmoothingMode($hGraphics)\nGets the graphics object rendering quality (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsMeasureString($hGraphics, $sString, $hFont, $tLayout, $hFormat)\nMeasures the size of a string (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsReleaseDC($hGraphics, $hDC)\nReleases the device context of the Graphics object (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetSmoothingMode($hGraphics, $iSmooth)\nSets the graphics object rendering quality (Requires: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetTransform($hGraphics, $hMatrix)\nSets the world transformation for a graphics object (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageDispose($hImage)\nRelease an image object (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetFlags($hImage)\nReturns enumeration of pixel data attributes contained in an image (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetGraphicsContext($hImage)\nGet the graphics context of the image (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetHeight($hImage)\nGet the image height (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetHorizontalResolution($hImage)\nReturns horizontal resolution in DPI (pixels per inch)\nof an image (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetPixelFormat($hImage)\nReturns pixel format of an image: Bits per pixel, Alpha channels, RGB, Grayscale, Indexed etc. (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetRawFormat($hImage)\nReturns file format GUID and image format name of an image (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetType($hImage)\nReturns type (bitmap or metafile)\nof an image (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetVerticalResolution($hImage)\nReturns horizontal resolution in DPI (pixels per inch)\nof an image (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageGetWidth($hImage)\nGet the image width (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageLoadFromFile($sFileName)\nCreate an image object based on a file (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFile($hImage, $sFileName)\nSave an image to file (Requires: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFileEx($hImage, $sFileName, $sEncoder [, $pParams = 0])\nSave an image to file (Requires: #include <GDIPlus.au3>)
_GDIPlus_MatrixCreate()\nCreates and initializes a Matrix object that represents the identity matrix (Requires: #include <GDIPlus.au3>)
_GDIPlus_MatrixDispose($hMatrix)\nRelease a matrix object (Requires: #include <GDIPlus.au3>)
_GDIPlus_MatrixRotate($hMatrix, $fAngle [, $bAppend = False])\nUpdates a matrix with the product of itself and a rotation matrix (Requires: #include <GDIPlus.au3>)
_GDIPlus_MatrixScale($hMatrix, $fScaleX, $fScaleY [, $bOrder = False])\nUpdates a matrix with the product of itself and a scaling matrix (Requires: #include <GDIPlus.au3>)
_GDIPlus_MatrixTranslate($hMatrix, $fOffsetX, $fOffsetY [, $bAppend = False])\nUpdates a matrix with the product of itself and a translation matrix (Requires: #include <GDIPlus.au3>)
_GDIPlus_ParamAdd(ByRef $tParams, $sGUID, $iCount, $iType, $pValues)\nAdd a value to an encoder parameter list (Requires: #include <GDIPlus.au3>)
_GDIPlus_ParamInit($iCount)\nInitialize an encoder parameter list (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenCreate([$iARGB = 0xFF000000 [, $nWidth = 1 [, $iUnit = 2]]])\nCreate a pen object (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenDispose($hPen)\nRelease a pen object (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenGetAlignment($hPen)\nGets the pen alignment (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenGetColor($hPen)\nGets the pen color (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenGetCustomEndCap($hPen)\nGets the custom end cap for the pen (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenGetDashCap($hPen)\nGets the pen dash cap style (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenGetDashStyle($hPen)\nGets the pen dash style (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenGetEndCap($hPen)\nGets the pen end cap (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenGetWidth($hPen)\nRetrieve the width of a pen (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenSetAlignment($hPen [, $iAlignment = 0])\nSets the pen alignment (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenSetColor($hPen, $iARGB)\nSets the pen color (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenSetCustomEndCap($hPen, $hEndCap)\nSets the custom end cap for the pen (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenSetDashCap($hPen [, $iDash = 0])\nSets the pen dash cap style (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenSetDashStyle($hPen [, $iStyle = 0])\nSets the pen dash style (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenSetEndCap($hPen, $iEndCap)\nSets the pen end cap (Requires: #include <GDIPlus.au3>)
_GDIPlus_PenSetWidth($hPen, $fWidth)\nSets the width of a pen (Requires: #include <GDIPlus.au3>)
_GDIPlus_RectFCreate([$nX = 0 [, $nY = 0 [, $nWidth = 0 [, $nHeight = 0]]]])\nCreate a $tagGDIPRECTF structure (Requires: #include <GDIPlus.au3>)
_GDIPlus_Shutdown()\nClean up resources used by Microsoft Windows GDI+ (Requires: #include <GDIPlus.au3>)
_GDIPlus_Startup()\nInitialize Microsoft Windows GDI+ (Requires: #include <GDIPlus.au3>)
_GDIPlus_StringFormatCreate([$iFormat = 0 [, $iLangID = 0]])\nCreate a String Format object (Requires: #include <GDIPlus.au3>)
_GDIPlus_StringFormatDispose($hFormat)\nRelease a String Format object (Requires: #include <GDIPlus.au3>)
_GDIPlus_StringFormatSetAlign($hStringFormat,$iFlag)\nSets the text alignment of a string format object (Requires: #include <GDIPlus.au3>)
_GetIP()\nGet public IP address of a network/computer. (Requires: #include <Inet.au3>)
_GUICtrlAVI_Close($hWnd)\nCloses an AVI clip (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_Create($hWnd [, $sFile = "" [, $subfileid = -1 [, $iX = 0 [, $iY = 0 [, $iWidth = 0 [, $iHeight = 0 [, $iStyle = 0x00000006 [, $iExStyle = 0x00000000]]]]]]]])\nCreates an AVI control (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_IsPlaying($hWnd)\nChecks whether an Audio-Video Interleaved (AVI)\nclip is playing (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_Open($hWnd, $sFileName)\nOpens an AVI clip and displays its first frame in an animation control (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_OpenEx($hWnd, $sFileName, $iResourceID)\nOpens an AVI clip and displays its first frame in an animation control (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_Play($hWnd [, $iFrom = 0 [, $iTo = -1 [, $iRepeat = -1]]])\nPlays an AVI clip in an animation control (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_Seek($hWnd, $iFrame)\nDirects an AVI control to display a particular frame of an AVI clip (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_Show($hWnd, $iState)\nShow/Hide the AVI control (Requires: #include <GuiAVI.au3>)
_GUICtrlAVI_Stop($hWnd)\nStops playing an AVI clip (Requires: #include <GuiAVI.au3>)
_GUICtrlButton_Click($hWnd)\nSimulates the user clicking a button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_Create($hWnd, $sText, $iX, $iY, $iWidth, $iHeight [, $iStyle = -1 [, $iExStyle = -1]])\nCreates a Button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_Destroy(ByRef $hWnd)\nDelete the Button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_Enable($hWnd [, $fEnable = True])\nEnables or disables mouse and keyboard input to the specified button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetCheck($hWnd)\nGets the check state of a radio button or check box (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetFocus($hWnd)\nRetrieves if the button has keyboard focus (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetIdealSize($hWnd)\nGets the size of the button that best fits its text and image, if an image list is present (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetImage($hWnd)\nRetrieves a handle to the image (icon or bitmap)\nassociated with the button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetImageList($hWnd)\nRetrieves an array that describes the image list assigned to a button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetNote($hWnd)\nGets the text of the note associated with the Command Link button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetNoteLength($hWnd)\nGets the length of the note text that may be displayed in the description for a command link button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetSplitInfo($hWnd)\nGets information for a split button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetState($hWnd)\nDetermines the state of a button or check box (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetText($hWnd)\nRetrieve the text of the button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_GetTextMargin($hWnd)\nGets the margins used to draw text in a button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetCheck($hWnd [, $iState = $BST_CHECKED])\nSets the check state of a radio button or check box (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetDontClick($hWnd [, $fState = True])\nSets the state of $BST_DONTCLICK flag on a button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetFocus($hWnd [, $fFocus = True])\nSets the keyboard focus to the specified button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetImage($hWnd, $sImageFile [, $nIconId = -1 [, $fLarge = False]])\nSets the image of a button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetImageList($hWnd, $hImage [, $nAlign = 0 [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]]])\nAssigns an image list to a button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetNote($hWnd, $sNote)\nSets the text of the note associated with a command link button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetShield($hWnd [, $fRequired = True])\nSets the elevation required state for a specified button or command link to display an elevated icon (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetSize($hWnd, $iWidth, $iHeight)\nSets the size of the button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetSplitInfo($hWnd [, $himlGlyph = -1 [, $iSplitStyle = $BCSS_ALIGNLEFT [, $iWidth = 0 [, $iHeight = 0]]]])\nGets information for a split button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetState($hWnd [, $fHighlighted = True])\nSets the highlight state of a button. The highlight state indicates whether the button is highlighted as if the user had pushed it. (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetStyle($hWnd, $iStyle)\nSets the style of a button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetText($hWnd, $sText)\nSets the text of the button (Requires: #include <GuiButton.au3>)
_GUICtrlButton_SetTextMargin($hWnd [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]])\nSets the margins for drawing text in a button control (Requires: #include <GuiButton.au3>)
_GUICtrlButton_Show($hWnd [, $fShow = True])\nShow/Hide button (Requires: #include <GuiButton.au3>)
_GUICtrlComboBox_AddDir($hWnd, $sFile [, $iAttributes = 0 [, $fBrackets = True]])\nAdds the names of directories and files (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AddString($hWnd, $sText)\nAdd a string (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AutoComplete($hWnd)\nAutoComplete a ComboBox edit control (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_BeginUpdate($hWnd)\nPrevents updating of the control until the EndUpdate function is called (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Create($hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 120 [, $iStyle = 0x00200042 [, $iExStyle = 0x00000000]]]])\nCreate a ComboBox control (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_DeleteString($hWnd, $iIndex)\nDelete a string (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_EndUpdate($hWnd)\nEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindString($hWnd, $sText [, $iIndex = -1])\nSearch for a string (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindStringExact($hWnd, $sText [, $iIndex = -1])\nSearch for a string (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetComboBoxInfo($hWnd, ByRef $tInfo)\nGets information about the specified ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCount($hWnd)\nRetrieve the number of items (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCueBanner($hWnd)\nGets the cue banner text displayed in the edit control of a combo box (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCurSel($hWnd)\nRetrieve the index of the currently selected item (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRect($hWnd)\nRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRectEx($hWnd)\nRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedState($hWnd)\nDetermines whether the ListBox of a ComboBox is dropped down (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedWidth($hWnd)\nRetrieve the minimum allowable width, of the ListBox of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditSel($hWnd)\nGets the starting and ending character positions of the current selection in the edit control of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditText($hWnd)\nGet the text from the edit control of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetExtendedUI($hWnd)\nDetermines whether a ComboBox has the default user interface or the extended user interface (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetHorizontalExtent($hWnd)\nGets the width, in pixels, that the ListBox of a ComboBox control can be scrolled horizontally (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetItemHeight($hWnd, $iIndex = -1)\nDetermines the height of list items or the selection field in a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBText($hWnd, $iIndex, ByRef $sText)\nRetrieve a string from the list of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBTextLen($hWnd, $iIndex)\nGets the length, in characters, of a string in the list of a combo box (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetList($hWnd)\nRetrieves all items from the list portion of a ComboBox control (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetListArray($hWnd)\nRetrieves all items from the list portion of a ComboBox control (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocale($hWnd)\nRetrieves the current locale (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleCountry($hWnd)\nRetrieves the current country code (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleLang($hWnd)\nRetrieves the current language identifier (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocalePrimLang($hWnd)\nExtract primary language id from a language id (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleSubLang($hWnd)\nExtract sublanguage id from a language id (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetMinVisible($hWnd)\nRetrieve the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetTopIndex($hWnd)\nRetrieve the zero-based index of the first visible item in the ListBox portion of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InitStorage($hWnd, $iNum, $iBytes)\nAllocates memory for storing ListBox items (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InsertString($hWnd, $sText [, $iIndex = -1])\nInsert a string (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_LimitText($hWnd [, $iLimit = 0])\nLimits the length of the text the user may type into the edit control of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ReplaceEditSel($hWnd, $sText)\nReplace text selected in edit box (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ResetContent($hWnd)\nRemove all items from the ListBox and edit control of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SelectString($hWnd, $sText [, $iIndex = -1])\nSearches the ListBox of a ComboBox for an item that begins with the characters in a specified string (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCueBanner($hWnd, $sText)\nSets the cue banner text that is displayed for the edit control of a combo box (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCurSel($hWnd [, $iIndex = -1])\nSelect a string in the list of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetDroppedWidth($hWnd, $iWidth)\nSet the maximum allowable width, in pixels, of the ListBox of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditSel($hWnd, $iStart, $iStop)\nSelect characters in the edit control of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditText($hWnd, $sText)\nSet the text of the edit control of the ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetExtendedUI($hWnd [, $fExtended = False])\nSelect either the default user interface or the extended user interface (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetHorizontalExtent($hWnd, $iWidth)\nSet the width, in pixels, by which a list box can be scrolled horizontally (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetItemHeight($hWnd, $iHeight [, $iComponent = -1])\nSet the height of list items or the selection field in a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetMinVisible($hWnd, $iMinimum)\nSet the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetTopIndex($hWnd, $iIndex)\nEnsure that a particular item is visible in the ListBox of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ShowDropDown($hWnd [, $fShow = False])\nShow or hide the ListBox of a ComboBox (Requires: #include <GuiComboBox.au3>)
_GUICtrlComboBoxEx_AddDir($hWnd, $sFile [, $iAttributes = 0 [, $fBrackets = True]])\nAdds the names of directories and files (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_AddString($hWnd, $sText [, $iImage = -1 [, $iSelecteImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]])\nAdd a string (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_BeginUpdate($hWnd)\nPrevents updating of the control until the EndUpdate function is called (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Create($hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00200002 [, $iExStyle = 0x00000000]]]])\nCreate a ComboBoxEx control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_CreateSolidBitMap($hWnd, $iColor, $iWidth, $iHeight)\nCreates a solid color bitmap (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_DeleteString($hWnd, $iIndex)\nRemoves an item from a ComboBoxEx control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_EndUpdate($hWnd)\nEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_FindStringExact($hWnd, $sText [, $iIndex = -1])\nSearch for a string (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboBoxInfo($hWnd, ByRef $tInfo)\nGets information about the specified ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboControl($hWnd)\nGets the handle to the child combo box control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCount($hWnd)\nRetrieve the number of items (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCurSel($hWnd)\nRetrieve the index of the currently selected item (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRect($hWnd)\nRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRectEx($hWnd)\nRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedState($hWnd)\nDetermines whether the ListBox of a ComboBox is dropped down (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedWidth($hWnd)\nRetrieve the minimum allowable width, of the ListBox of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditControl($hWnd)\nGets the handle to the edit control portion of a ComboBoxEx control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditSel($hWnd)\nGets the starting and ending character positions of the current selection in the edit control of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditText($hWnd)\nGet the text from the edit control of a ComboBoxEx (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedStyle($hWnd)\nGets the extended styles that are in use for a ComboBoxEx control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedUI($hWnd)\nDetermines whether a ComboBox has the default user interface or the extended user interface (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetImageList($hWnd)\nRetrieves the handle to an image list assigned to a ComboBoxEx control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItem($hWnd, $iIndex)\nRetrieves an item's attributes (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemEx($hWnd, ByRef $tItem)\nRetrieves some or all of an item's attributes (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemHeight($hWnd, $iComponent = -1)\nDetermines the height of list items or the selection field in a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemImage($hWnd, $iIndex)\nRetrieves the index of the item's icon (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemIndent($hWnd, $iIndex)\nRetrieves the number of image widths the item is indented (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemOverlayImage($hWnd, $iIndex)\nRetrieves the index of the item's overlay image icon (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemParam($hWnd, $iIndex)\nRetrieves the application specific value of the item (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemSelectedImage($hWnd, $iIndex)\nRetrieves the index of the item's selected image icon (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemText($hWnd, $iIndex, ByRef $sText)\nRetrieve a string from the list of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemTextLen($hWnd, $iIndex)\nGets the length, in characters, of a string in the list of a combo box (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetList($hWnd)\nRetrieves all items from the list portion of a ComboBox control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetListArray($hWnd)\nRetrieves all items from the list portion of a ComboBox control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocale($hWnd)\nRetrieves the current locale (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleCountry($hWnd)\nRetrieves the current country code (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleLang($hWnd)\nRetrieves the current language identifier (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocalePrimLang($hWnd)\nExtract primary language id from a language id (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleSubLang($hWnd)\nExtract sublanguage id from a language id (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetMinVisible($hWnd)\nRetrieve the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetTopIndex($hWnd)\nRetrieve the zero-based index of the first visible item in the ListBox portion of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetUnicode($hWnd)\nRetrieves if control is using Unicode (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InitStorage($hWnd, $iNum, $iBytes)\nAllocates memory for storing ListBox items (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InsertString($hWnd, $sText [, $iIndex = 0 [, $iImage = -1 [, $iSelecteImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]])\nInserts a new item in the control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_LimitText($hWnd [, $iLimit = 0])\nLimits the length of the text the user may type into the edit control of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ReplaceEditSel($hWnd, $sText)\nReplace text selected in edit box (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ResetContent($hWnd)\nRemoves all items (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetCurSel($hWnd [, $iIndex = -1])\nSelect a string in the list of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetDroppedWidth($hWnd, $iWidth)\nSet the maximum allowable width, in pixels, of the ListBox of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditSel($hWnd, $iStart, $iStop)\nSelect characters in the edit control of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditText($hWnd, $sText)\nSet the text of the edit control of the ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedStyle($hWnd, $iExStyle [, $iExMask = 0])\nSets extended styles within a ComboBoxEx control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedUI($hWnd [, $fExtended = False])\nSelect either the default user interface or the extended user interface (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetImageList($hWnd, $hHandle)\nSets an image list for a ComboBoxEx control (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItem($hWnd, $sText [, $iIndex = 0 [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]])\nSets some or all of a item's attributes (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemEx($hWnd, ByRef $tItem)\nSets some or all of a item's attributes (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemHeight($hWnd, $iComponent, $iHeight)\nSet the height of list items or the selection field in a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemImage($hWnd, $iIndex, $iImage)\nSets the index of the item's icon in the control's image list (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemIndent($hWnd, $iIndex, $iIndent)\nSets the number of image widths to indent the item (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemOverlayImage($hWnd, $iIndex, $iImage)\nSets the index of the item's overlay icon in the control's image list (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemParam($hWnd, $iIndex, $iParam)\nSets the value specific to the item (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemSelectedImage($hWnd, $iIndex, $iImage)\nSets the index of the item's overlay icon in the control's image list (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetMinVisible($hWnd, $iMinimum)\nSet the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetTopIndex($hWnd, $iIndex)\nEnsure that a particular item is visible in the ListBox of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetUnicode($hWnd [, $fUnicode = True])\nSets if control is using Unicode (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ShowDropDown($hWnd [, $fShow = False])\nShow or hide the ListBox of a ComboBox (Requires: #include <GuiComboBoxEx.au3>)
_GUICtrlDTP_Create($hWnd, $iX, $iY [, $iWidth = 120 [, $iHeight = 21 [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]]]])\nCreate a DTP control (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCColor($hWnd, $iIndex)\nRetrieves the specified color (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCFont($hWnd)\nRetrieves the month calendar font handle (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMonthCal($hWnd)\nRetrieves the handle to child month calendar control (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRange($hWnd)\nRetrieves the current minimum and maximum allowable system times (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRangeEx($hWnd)\nRetrieves the current minimum and maximum allowable system times (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTime($hWnd)\nRetrieves the currently selected date and time (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTimeEx($hWnd)\nRetrieves the currently selected date and time (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetFormat($hWnd, $sFormat)\nSets the display based on a given format string (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCColor($hWnd, $iIndex, $iColor)\nSets the color for a given portion of the month calendar (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCFont($hWnd, $hFont [, $fRedraw = True])\nSets the month calendar font (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRange($hWnd, ByRef $aRange)\nSets the current minimum and maximum allowable system times (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRangeEx($hWnd, ByRef $tRange)\nSets the current minimum and maximum allowable system times (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTime($hWnd, ByRef $aDate)\nSets the currently selected date and time (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTimeEx($hWnd, ByRef $tDate [, $fFlag = False])\nSets the currently selected date and time (Requires: #include <GuiDateTimePicker.au3>)
_GUICtrlEdit_AppendText($hWnd, $sText)\nAppend text (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_BeginUpdate($hWnd)\nPrevents updating of the control until the EndUpdate function is called (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_CanUndo($hWnd)\nDetermines whether there are any actions in an edit control's undo queue (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_CharFromPos($hWnd, $iX, $iY)\nRetrieve information about the character closest to a specified point in the client area (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_Create($hWnd, $sText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x003010C4 [, $iExStyle = 0x00000200]]]])\nCreate an Edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_Destroy(ByRef $hWnd)\nDelete the Edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_EmptyUndoBuffer($hWnd)\nResets the undo flag of an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_EndUpdate($hWnd)\nEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_Find($hWnd [, $fReplace = False])\nInitiates a find dialog (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_FmtLines($hWnd [, $fSoftBreak = False])\nDetermines whether an edit control includes soft line-break characters (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetFirstVisibleLine($hWnd)\nRetrieves the zero-based index of the uppermost visible line in a multiline edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLimitText($hWnd)\nGets the current text limit for an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLine($hWnd, $iLine)\nRetrieves a line of text from an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLineCount($hWnd)\nRetrieves the number of lines (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetMargins($hWnd)\nRetrieves the widths of the left and right margins (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetModify($hWnd)\nRetrieves the state of an edit control's modification flag (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetPasswordChar($hWnd)\nGets the password character that an edit control displays when the user enters text (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECT($hWnd)\nRetrieves the formatting rectangle of an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECTEx($hWnd)\nRetrieves the formatting rectangle of an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetSel($hWnd)\nRetrieves the starting and ending character positions of the current selection (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetText($hWnd)\nGet the text from the edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_GetTextLen($hWnd)\nGet the length of all the text from the edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_HideBalloonTip($hWnd)\nHides any balloon tip associated with an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_InsertText($hWnd, $sText [, $iIndex = -1])\nInsert text (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_LineFromChar($hWnd [, $iIndex = -1])\nRetrieves the index of the line that contains the specified character index (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_LineIndex($hWnd [, $iIndex = 0])\nRetrieves the character index of the first character of a specified line (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_LineLength($hWnd [, $iIndex = -1])\nRetrieves the length, in characters, of a line (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_LineScroll($hWnd, $iHoriz, $iVert)\nScrolls the text (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_PosFromChar($hWnd, $iIndex)\nRetrieves the client area coordinates of a specified character in an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_ReplaceSel($hWnd, $sText [, $fUndo = True])\nReplaces the current selection (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_Scroll($hWnd, $iDirection)\nScrolls the text vertically (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetLimitText($hWnd, $iLimit)\nSets the text limit (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetMargins($hWnd [, $iMargin = 0x1 [, $iLeft = 0xFFFF [, $iRight = 0xFFFF]]])\nSets the widths of the left and right margins (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetModify($hWnd, $fModified)\nSets or clears the modification flag (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetPasswordChar($hWnd [, $cDisplayChar = "0"])\nSets or removes the password character for an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetReadOnly($hWnd, $fReadOnly)\nSets or removes the read-only style ($ES_READONLY)\n(Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECT($hWnd, $aRect)\nSets the formatting rectangle of a multiline edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTEx($hWnd, $tRect)\nSets the formatting rectangle of a multiline edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTNP($hWnd, $aRect)\nSets the formatting rectangle of a multiline edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRectNPEx($hWnd, $tRect)\nSets the formatting rectangle of a multiline edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetSel($hWnd, $iStart, $iEnd)\nSelects a range of characters (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetTabStops($hWnd, $aTabStops)\nSets the tab stops (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_SetText($hWnd, $sText)\nSet the text (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_ShowBalloonTip($hWnd, $sTitle, $sText, $iIcon)\nDisplays a balloon tip associated with an edit control (Requires: #include <GuiEdit.au3>)
_GUICtrlEdit_Undo($hWnd)\nUndoes the last edit control operation in the control's undo queue (Requires: #include <GuiEdit.au3>)
_GUICtrlHeader_AddItem($hWnd, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $fOnRight = False]]]])\nAdds a new header item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilter($hWnd, $iIndex)\nClears the filter (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilterAll($hWnd)\nClears all of the filters (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_Create($hWnd [, $iStyle = 0x00000046])\nCreates a Header control (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_CreateDragImage($hWnd, $iIndex)\nCreates a semi-transparent version of an item's image for use as a dragging image (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_DeleteItem($hWnd, $iIndex)\nDeletes a header item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_Destroy(ByRef $hWnd)\nDelete the Header control (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_EditFilter($hWnd, $iIndex [, $fDiscard = True])\nStarts editing the specified filter (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetBitmapMargin($hWnd)\nRetrieves the width of the bitmap margin (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetImageList($hWnd)\nRetrieves the handle to the image list (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItem($hWnd, $iIndex, ByRef $tItem)\nRetrieves information about an item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemAlign($hWnd, $iIndex)\nRetrieves the item text alignment (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemBitmap($hWnd, $iIndex)\nRetrieves the item bitmap handle (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemCount($hWnd)\nRetrieves a count of the items (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemDisplay($hWnd, $iIndex)\nReturns the item display information (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFlags($hWnd, $iIndex)\nReturns the item flag information (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFormat($hWnd, $iIndex)\nReturns the format of the item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemImage($hWnd, $iIndex)\nRetrieves the index of an image within the image list (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemOrder($hWnd, $iIndex)\nRetrieves the order in which the item appears (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemParam($hWnd, $iIndex)\nRetrieves the param value of the item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRect($hWnd, $iIndex)\nRetrieves the bounding rectangle for a given item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRectEx($hWnd, $iIndex)\nRetrieves the bounding rectangle for a given item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemText($hWnd, $iIndex)\nRetrieves the item text (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemWidth($hWnd, $iIndex)\nRetrieves the item's width (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetOrderArray($hWnd)\nRetrieves the current left-to-right order of items in a header control (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag for the control (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_HitTest($hWnd, $iX, $iY)\nTests a point to determine which item is at the specified point (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_InsertItem($hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $fOnRight = False]]]])\nInserts a new header item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_Layout($hWnd, ByRef $tRect)\nRetrieves the correct size and position of the control (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_OrderToIndex($hWnd, $iOrder)\nRetrieves an index value for an item based on its order (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetBitmapMargin($hWnd, $iWidth)\nSets the width of the margin, specified in pixels, of a bitmap (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetFilterChangeTimeout($hWnd, $iTimeOut)\nSets the filter change timeout interval (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetHotDivider($hWnd, $iFlag, $iInputValue)\nChanges the hot divider color (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetImageList($hWnd, $hImage)\nAssigns an image list (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItem($hWnd, $iIndex, ByRef $tItem)\nSets information about an item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemAlign($hWnd, $iIndex, $iAlign)\nSets the item text alignment (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemBitmap($hWnd, $iIndex, $hBmp)\nSets the item bitmap handle (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemDisplay($hWnd, $iIndex, $iDisplay)\nReturns the item display information (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFlags($hWnd, $iIndex, $iFlags)\nReturns the item flag information (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFormat($hWnd, $iIndex, $iFormat)\nSets the format of the item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemImage($hWnd, $iIndex, $iImage)\nSets the index of an image within the image list (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemOrder($hWnd, $iIndex, $iOrder)\nSets the order in which the item appears (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemParam($hWnd, $iIndex, $iParam)\nSets the param value of the item (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemText($hWnd, $iIndex, $sText)\nSets the item text (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemWidth($hWnd, $iIndex, $iWidth)\nSets the item's width (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetOrderArray($hWnd, ByRef $aOrder)\nSets the current left-to-right order of items (Requires: #include <GuiHeader.au3>)
_GUICtrlHeader_SetUnicodeFormat($hWnd, $fUnicode)\nSets the Unicode character format flag for the control (Requires: #include <GuiHeader.au3>)
_GUICtrlIpAddress_ClearAddress($hWnd)\nClears the contents of the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Create($hWnd, $iX, $iY [, $iWidth = 125 [, $iHeight = 25 [, $iStyles = 0x00000000 [, $iExstyles = 0x00000000]]]])\nCreate a GUI IP Address Control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Get($hWnd)\nRetrieves the address from the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetArray($hWnd)\nRetrieves the address from the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetEx($hWnd)\nRetrieves the address from the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_IsBlank($hWnd)\nDetermines if all fields in the IP address control are blank (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Set($hWnd, $sAddress)\nSets the address in the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetArray($hWnd, $aAddress)\nSets the address in the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetEx($hWnd, $tIP)\nSets the address in the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFocus($hWnd, $iIndex)\nSets the keyboard focus to the specified field in the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFont($hWnd [, $sFaceName = "Arial" [, $iFontSize = 12 [, $iFontWeight = 400 [, $fFontItalic = False]]]])\nSet font of the control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetRange($hWnd, $iIndex [, $iLowRange = 0 [, $iHighRange = 255]])\nSets the valid range for the specified field in the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_ShowHide($hWnd, $iState)\nShows/Hides the IP address control (Requires: #include <GuiIPAddress.au3>)
_GUICtrlListBox_AddFile($hWnd, $sFile)\nAdds the specified filename that contains a directory listing (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_AddString($hWnd, $sText)\nAdd a string (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_BeginUpdate($hWnd)\nPrevents updating of the control until the EndUpdate function is called (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_ClickItem($hWnd, $iIndex [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 0]]]])\nClicks an item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_Create($hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00B00002 [, $iExStyle = 0x00000200]]]])\nCreate a Listbox control (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_DeleteString($hWnd, $iIndex)\nDelete a string (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_Dir($hWnd, $sFile [, $iAttributes = 0 [, $fBrackets = True]])\nAdds the names of directories and files (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_EndUpdate($hWnd)\nEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_FindInText($hWnd, $sText [, $iStart = -1 [, $fWrapOK = True]])\nSearches for an item that contains the specified text anywhere in its text (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_FindString($hWnd, $sText [, $fExact = False])\nSearch for a string (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetAnchorIndex($hWnd)\nRetrieves the index of the anchor item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCaretIndex($hWnd)\nReturn index of item that has the focus rectangle (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCount($hWnd)\nRetrieves the number of items (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCurSel($hWnd)\nRetrieve the index of the currently selected item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetHorizontalExtent($hWnd)\nRetrieve from a list box the the scrollable width (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemData($hWnd, $iIndex)\nRetrieves the application defined value associated with an item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemHeight($hWnd)\nRetrieves the height of items (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRect($hWnd, $iIndex)\nRetrieves the rectangle that bounds an item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRectEx($hWnd, $iIndex)\nRetrieves the rectangle that bounds an item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetListBoxInfo($hWnd)\nRetrieve the number of items per column in a specified list box (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocale($hWnd)\nRetrieves the current locale (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleCountry($hWnd)\nRetrieves the current country code (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleLang($hWnd)\nRetrieves the current language identifier (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocalePrimLang($hWnd)\nExtract primary language id from a language id (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleSubLang($hWnd)\nExtract sublanguage id from a language id (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSel($hWnd, $iIndex)\nRetrieves the selection state of an item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelCount($hWnd)\nRetrieves the total number of selected items (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItems($hWnd)\nFills a buffer with an array of selected items (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItemsText($hWnd)\nRetrieves the text of selected items (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetText($hWnd, $iIndex)\nReturns the item (string)\nat the specified index (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTextLen($hWnd, $iIndex)\nGets the length of a string in a list box (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTopIndex($hWnd)\nRetrieve the index of the first visible item in a list (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_InitStorage($hWnd, $iItems, $iBytes)\nThis message allocates memory for storing items (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_InsertString($hWnd, $sText [, $iIndex = -1])\nInsert a string into the list (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_ItemFromPoint($hWnd, $iX, $iY)\nRetrieves the zero based index of the item nearest the specified point (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_ReplaceString($hWnd, $iIndex, $sText)\nReplaces the text of an item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_ResetContent($hWnd)\nRemove all items from the list box (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SelectString($hWnd, $sText [, $iIndex = -1])\nSearchs for an item that begins with the specified string (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRange($hWnd, $iFirst, $iLast [, $fSelect = True])\nSelect one or more consecutive items in a multiple-selection list box (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRangeEx($hWnd, $iFirst, $iLast)\nSelect one or more consecutive items in a multiple-selection list box (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetAnchorIndex($hWnd, $iIndex)\nSet the anchor item梩hat is, the item from which a multiple selection starts (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCaretIndex($hWnd, $iIndex [, $fPartial = False])\nSet the focus rectangle to the item at the specified index in a multiple-selection list box (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetColumnWidth($hWnd, $iWidth)\nSet the width, in pixels, of all columns (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCurSel($hWnd, $iIndex)\nSelect a string and scroll it into view, if necessary (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetHorizontalExtent($hWnd, $iWidth)\nSet the width, in pixels, by which a list box can be scrolled horizontally (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemData($hWnd, $iIndex, $iValue)\nSets the value associated with the specified item (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemHeight($hWnd, $iHeight [, $iIndex = 0])\nSets the height, in pixels, of items (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetLocale($hWnd, $iLocal)\nSet the current locale (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetSel($hWnd [, $iIndex = -1 [, $fSelect = -1]])\nSelect a string(s)\nin a multiple-selection list box (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTabStops($hWnd, $aTabStops)\nSets the tab-stop positions (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTopIndex($hWnd, $iIndex)\nEnsure that a particular item in a list box is visible (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_Sort($hWnd)\nRe-sorts list box if it has the $LBS_SORT style (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_SwapString($hWnd, $iIndexA, $iIndexB)\nSwaps the text of two items at the specified indices (Requires: #include <GuiListBox.au3>)
_GUICtrlListBox_UpdateHScroll($hWnd)\nUpdate the horizontal scroll bar based on the longest string (Requires: #include <GuiListBox.au3>)
_GUICtrlListView_AddArray($hWnd, ByRef $aItems)\nAdds items from an array to the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_AddColumn($hWnd, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $fOnRight = False]]]])\nAdds a new column in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_AddItem($hWnd, $sText [, $iImage = -1 [, $iParam = 0]])\nAdds a new item to the end of the list (Requires: #include <GuiListView.au3>)
_GUICtrlListView_AddSubItem($hWnd, $iIndex, $sText, $iSubItem [, $iImage = -1])\nAdds a new subitem to the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewHeight($hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]])\nCalculates the approximate height required to display a given number of items (Requires: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewRect($hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]])\nCalculates the approximate size required to display a given number of items (Requires: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewWidth($hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]])\nCalculates the approximate width required to display a given number of items (Requires: #include <GuiListView.au3>)
_GUICtrlListView_Arrange($hWnd [, $iArrange = 0])\nArranges items in icon view (Requires: #include <GuiListView.au3>)
_GUICtrlListView_BeginUpdate($hWnd)\nPrevents updating of the control until the EndUpdate function is called (Requires: #include <GuiListView.au3>)
_GUICtrlListView_CancelEditLabel($hWnd)\nCancels an item text editing operation (Requires: #include <GuiListView.au3>)
_GUICtrlListView_ClickItem($hWnd, $iIndex [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 1]]]])\nClicks an item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_CopyItems($hWnd_Source, $hWnd_Destination [, $fDelFlag = False])\nCopy Items between 2 list-view controls (Requires: #include <GuiListView.au3>)
_GUICtrlListView_Create($hWnd, $sHeaderText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x0000000D [, $iExStyle = 0x00000000 [, $fCoInit = False]]]]])\nCreate a ListView control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_CreateDragImage($hWnd, $iIndex)\nCreates a drag image list for the specified item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_CreateSolidBitMap($hWnd, $iColor, $iWidth, $iHeight)\nCreates a solid color bitmap (Requires: #include <GuiListView.au3>)
_GUICtrlListView_DeleteAllItems($hWnd)\nRemoves all items from a list-view control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_DeleteColumn($hWnd, $iCol)\nRemoves a column from a list-view control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_DeleteItem($hWnd, $iIndex)\nRemoves an item from a list-view control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_DeleteItemsSelected($hWnd)\nDeletes item(s)\nselected (Requires: #include <GuiListView.au3>)
_GUICtrlListView_Destroy(ByRef $hWnd)\nDelete the listview control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_DrawDragImage(ByRef $hWnd, ByRef $aDrag)\nDraw the Drage Image (Requires: #include <GuiListView.au3>)
_GUICtrlListView_EditLabel($hWnd, $iIndex)\nBegins in place editing of the specified item text (Requires: #include <GuiListView.au3>)
_GUICtrlListView_EnableGroupView($hWnd [, $fEnable = True])\nEnables or disables whether the items in the control display as a group (Requires: #include <GuiListView.au3>)
_GUICtrlListView_EndUpdate($hWnd)\nEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include <GuiListView.au3>)
_GUICtrlListView_EnsureVisible($hWnd, $iIndex [, $fPartialOK = False])\nEnsures that a list-view item is either entirely or partially visible (Requires: #include <GuiListView.au3>)
_GUICtrlListView_FindInText($hWnd, $sText [, $iStart = -1 [, $fWrapOK = True [, $fReverse = False]]])\nSearches for an item that contains the specified text anywhere in its text (Requires: #include <GuiListView.au3>)
_GUICtrlListView_FindItem($hWnd, $iStart, ByRef $tFindInfo [, $sText = ""])\nSearches for an item with the specified characteristics (Requires: #include <GuiListView.au3>)
_GUICtrlListView_FindNearest($hWnd, $iX, $iY [, $iDir = 0 [, $iStart = -1 [, $fWrapOK = True]]])\nFinds the item nearest to the position specified (Requires: #include <GuiListView.au3>)
_GUICtrlListView_FindParam($hWnd, $iParam [, $iStart = -1])\nSearches for an item with the specified lParam (Requires: #include <GuiListView.au3>)
_GUICtrlListView_FindText($hWnd, $sText [, $iStart = -1 [, $fPartialOK = True [, $fWrapOK = True]]])\nSearches for an item with the specified text (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetBkColor($hWnd)\nRetrieves the background color of a list-view control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetBkImage($hWnd)\nRetrieves the background image in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetCallbackMask($hWnd)\nRetrieves the callback mask for the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetColumn($hWnd, $iIndex)\nRetrieves the attributes of a column (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnCount($hWnd)\nRetrieve the number of columns (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrder($hWnd)\nRetrieves the current left-to-right order of columns (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrderArray($hWnd)\nRetrieves the current left-to-right order of columns in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnWidth($hWnd, $iCol)\nRetrieves the width of a column in report or list view (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetCounterPage($hWnd)\nCalculates the number of items that can fit vertically in the visible area (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetEditControl($hWnd)\nRetrieves the handle to the edit control being used to edit an item's text (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetExtendedListViewStyle($hWnd)\nRetrieves the extended styles that are currently in use (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetFocusedGroup($hWnd)\nGets the group that has the focus (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupCount($hWnd)\nGets the number of groups (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfo($hWnd, $iGroupID)\nRetrieves group information (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfoByIndex($hWnd, $iIndex)\nRetrieves group information (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupRect($hWnd, $iGroupID [, $iGet = $LVGGR_GROUP])\nGets the rectangle for a specified group (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupViewEnabled($hWnd)\nChecks whether the control has group view enabled (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetHeader($hWnd)\nRetrieves the handle to the header control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetHotCursor($hWnd)\nRetrieves the HCURSOR value used when the pointer is over an item while hot tracking is enabled (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetHotItem($hWnd)\nRetrieves the index of the hot item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetHoverTime($hWnd)\nRetrieves the amount of time that the mouse cursor must hover over an item before it is selected (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetImageList($hWnd, $iImageList)\nRetrieves the handle to an image list used for drawing listview items (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetISearchString($hWnd)\nRetrieves the incremental search string of the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItem($hWnd, $iIndex [, $iSubItem = 0])\nRetrieves an item's attributes (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemChecked($hWnd, $iIndex)\nReturns the check state for a list-view control item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemCount($hWnd)\nRetrieves the number of items in a list-view control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemCut($hWnd, $iIndex)\nDetermines whether the item is marked for a cut and paste operation (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemDropHilited($hWnd, $iIndex)\nDetermines whether the item is highlighted as a drag-and-drop target (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemEx($hWnd, ByRef $tItem)\nRetrieves some or all of an item's attributes (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemFocused($hWnd, $iIndex)\nDetermines whether the item is highlighted as a drag-and-drop target (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemGroupID($hWnd, $iIndex)\nGets the item group ID (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemImage($hWnd, $iIndex [, $iSubItem = 0])\nRetrieves the index of the item's icon (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemIndent($hWnd, $iIndex)\nRetrieves the number of image widths the item is indented (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemParam($hWnd, $iIndex)\nRetrieves the application specific value of the item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPosition($hWnd, $iIndex)\nRetrieves the position of an item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionX($hWnd, $iIndex)\nRetrieves the X position of an item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionY($hWnd, $iIndex)\nRetrieves the Y position of an item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemRect($hWnd, $iIndex [, $iPart = 3])\nRetrieves the bounding rectangle for all or part of an item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemRectEx($hWnd, $iIndex [, $iPart = 3])\nRetrieves the bounding rectangle for all or part of an item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSelected($hWnd, $iIndex)\nDetermines whether the item is selected (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacing($hWnd [, $fSmall = False])\nDetermines the spacing between items in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingX($hWnd [, $fSmall = False])\nDetermines the horizontal spacing between items in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingY($hWnd [, $fSmall = False])\nDetermines the vertical spacing between items in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemState($hWnd, $iIndex, $iMask)\nRetrieves the state of a listview item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemStateImage($hWnd, $iIndex)\nGets the state image that is displayed (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemText($hWnd, $iIndex [, $iSubItem = 0])\nRetrieves the text of an item or subitem (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemTextArray($hWnd [, $iItem = -1])\nRetrieves all of a list-view item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetItemTextString($hWnd [, $iItem = -1])\nRetrieves all of a list-view item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetNextItem($hWnd [, $iStart = -1 [, $iSearch = 0 [, $iState = 8]]])\nSearches for an item that has the specified properties (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetNumberOfWorkAreas($hWnd)\nRetrieves the number of working areas in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetOrigin($hWnd)\nRetrieves the current view origin for the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetOriginX($hWnd)\nRetrieves the current horizontal view origin for the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetOriginY($hWnd)\nRetrieves the current vertical view origin for the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetOutlineColor($hWnd)\nRetrieves the color of the border of the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedColumn($hWnd)\nRetrieves the index of the selected column (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedCount($hWnd)\nDetermines the number of selected items (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedIndices($hWnd, $fArray = False)\nRetrieve indices of selected item(s)\n(Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectionMark($hWnd)\nRetrieves the selection mark from the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetStringWidth($hWnd, $sString)\nDetermines the width of a specified string (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetSubItemRect($hWnd, $iIndex, $iSubItem [, $iPart = 0])\nRetrieves information about an item bounding rectangle (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetTextBkColor($hWnd)\nRetrieves the text background color of the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetTextColor($hWnd)\nRetrieves the text color of the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetToolTips($hWnd)\nRetrieves the ToolTip control handle (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetTopIndex($hWnd)\nRetrieves the index of the topmost visible item when in list or report view (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetUnicodeFormat($hWnd)\nRetrieves the UNICODE character format flag (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetView($hWnd)\nRetrieves the current view of the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetViewDetails($hWnd)\nDetermines whether the view mode is in detail mode (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetViewLarge($hWnd)\nDetermines whether the view mode is in large icon mode (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetViewList($hWnd)\nDetermines whether the view mode is in list mode (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetViewRect($hWnd)\nRetrieves the bounding rectangle of all items in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetViewSmall($hWnd)\nDetermines whether the view mode is in small icon mode (Requires: #include <GuiListView.au3>)
_GUICtrlListView_GetViewTile($hWnd)\nDetermines whether the view mode is in tile mode (Requires: #include <GuiListView.au3>)
_GUICtrlListView_HideColumn($hWnd, $iCol)\nHides the column "sets column width to zero" (Requires: #include <GuiListView.au3>)
_GUICtrlListView_HitTest($hWnd [, $iX = -1 [, $iY = -1]])\nDetermines which item is at a specified position (Requires: #include <GuiListView.au3>)
_GUICtrlListView_InsertColumn($hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $fOnRight = False]]]])\nInserts a new column in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_InsertGroup($hWnd, $iIndex, $iGroupID, $sHeader [, $iAlign = 0])\nInserts a group (Requires: #include <GuiListView.au3>)
_GUICtrlListView_InsertItem($hWnd, $sText [, $iIndex = -1 [, $iImage = -1 [, $iParam = 0]]])\nInserts a new item in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_JustifyColumn($hWnd, $iIndex [, $iAlign = -1])\nSet Justification of a column for a list-view control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_MapIDToIndex($hWnd, $iID)\nMaps the ID of an item to an index (Requires: #include <GuiListView.au3>)
_GUICtrlListView_MapIndexToID($hWnd, $iIndex)\nMaps an index to an item ID (Requires: #include <GuiListView.au3>)
_GUICtrlListView_RedrawItems($hWnd, $iFirst, $iLast)\nForces the control to redraw a range of items (Requires: #include <GuiListView.au3>)
_GUICtrlListView_RegisterSortCallBack($hWnd [, $fNumbers = True [, $fArrows = True]])\nRegister the Simple Sort callback function (Requires: #include <GuiListView.au3>)
_GUICtrlListView_RemoveAllGroups($hWnd)\nRemoves all groups from the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_RemoveGroup($hWnd, $iGroupID)\nRemoves a group from the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_Scroll($hWnd, $iDX, $iDY)\nScrolls the content of a list-view (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetBkColor($hWnd, $iColor)\nSets the background color of the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetBkImage($hWnd [, $sURL = "" [, $iStyle = 0 [, $iXOffset = 0 [, $iYOffset = 0]]]])\nSets the background image in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetCallBackMask($hWnd, $iMask)\nChanges the callback mask for the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetColumn($hWnd, $iIndex, $sText [, $iWidth = -1 [, $iAlign = -1 [, $iImage = -1 [, $fOnRight = False]]]])\nSets the attributes of a column (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrder($hWnd, $sOrder)\nSets the left-to-right order of columns (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrderArray($hWnd, $aOrder)\nSets the left-to-right order of columns in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnWidth($hWnd, $iCol, $iWidth)\nChanges the width of a column (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetExtendedListViewStyle($hWnd, $iExStyle [, $iExMask = 0])\nSets extended styles (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetGroupInfo($hWnd, $iGroupID, $sHeader [, $iAlign = 0 [, $iState = $LVGS_NORMAL]])\nSets group information (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetHotItem($hWnd, $iIndex)\nSets the hot item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetHoverTime($hWnd, $iTime)\nSets the amount of time which the mouse cursor must hover over an item before it is selected (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetIconSpacing($hWnd, $iCX, $iCY)\nSets the spacing between icons where the style is large icon (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetImageList($hWnd, $hHandle [, $iType = 0])\nAssigns an image list to the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItem($hWnd, $sText [, $iIndex = 0 [, $iSubItem = 0 [, $iImage = -1 [, $iParam = -1 [, $iIndent = -1]]]]])\nSets some or all of a item's attributes (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemChecked($hWnd, $iIndex [, $fCheck = True])\nSets the checked state (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemCount($hWnd, $iItems)\nCauses the list-view control to allocate memory for the specified number of items (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemCut($hWnd, $iIndex [, $fEnabled = True])\nSets whether the item is marked for a cut-and-paste operation (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemDropHilited($hWnd, $iIndex [, $fEnabled = True])\nSets whether the item is highlighted as a drag-and-drop target (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemEx($hWnd, ByRef $tItem)\nSets some or all of a item's attributes (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemFocused($hWnd, $iIndex [, $fEnabled = True])\nSets whether the item has the focus (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemGroupID($hWnd, $iIndex, $iGroupID)\nSets the item group ID (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemImage($hWnd, $iIndex, $iImage [, $iSubItem = 0])\nSets the index of the item's icon in the control's image list (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemIndent($hWnd, $iIndex, $iIndent)\nSets the number of image widths to indent the item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemParam($hWnd, $iIndex, $iParam)\nSets the value specific to the item (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition($hWnd, $iIndex, $iCX, $iCY)\nMoves an item to a specified position in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition32($hWnd, $iIndex, $iCX, $iCY)\nMoves an item to a specified position in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemSelected($hWnd, $iIndex [, $fSelected = True [, $fFocused = False]])\nSets whether the item is selected (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemState($hWnd, $iIndex, $iState, $iStateMask)\nChanges the state of an item in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemStateImage($hWnd, $iIndex, $iImage)\nSets the state image that is displayed (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetItemText($hWnd, $iIndex, $sText [, $iSubItem = 0])\nChanges the text of an item or subitem (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetOutlineColor($hWnd, $iColor)\nSets the color of the border (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetSelectedColumn($hWnd, $iCol)\nSets the index of the selected column (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetSelectionMark($hWnd, $iIndex)\nSets the selection mark in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetTextBkColor($hWnd, $iColor)\nSets the background color of text in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetTextColor($hWnd, $iColor)\nSets the color of text in the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetToolTips($hWnd, $hToolTip)\nSets the ToolTip control that the control will use to display ToolTips (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetUnicodeFormat($hWnd, $fUnicode)\nSets the UNICODE character format flag for the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetView($hWnd, $iView)\nSets the view of the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SetWorkAreas($hWnd, $iLeft, $iTop, $iRight, $iBottom)\nCreates a work area within the control (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SimpleSort($hWnd, ByRef $vDescending, $iCol)\nSorts a list-view control (limited)\n(Requires: #include <GuiListView.au3>)
_GUICtrlListView_SortItems($hWnd, $iCol)\nStarts the sort call back, also sets the Arrow in the Header (Requires: #include <GuiListView.au3>)
_GUICtrlListView_SubItemHitTest($hWnd [, $iX = -1 [, $iY = -1]])\nDetermines which listview item or subitem is at a given position (Requires: #include <GuiListView.au3>)
_GUICtrlListView_UnRegisterSortCallBack($hWnd)\nUnRegister the Sort callback function (Requires: #include <GuiListView.au3>)
_GUICtrlMenu_AddMenuItem($hMenu, $sText [, $iCmdID = 0 [, $hSubMenu = 0]])\nAdds a new menu item to the end of the menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_AppendMenu($hMenu, $iFlags, $iNewItem, $pNewItem)\nAppends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_CheckMenuItem($hMenu, $iItem [, $fCheck = True [, $fByPos = True]])\nSets the state of the specified menu item's check mark attribute to either selected or clear (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_CheckRadioItem($hMenu, $iFirst, $iLast, $iCheck [, $fByPos = True])\nChecks a specified menu item and makes it a radio item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_CreateMenu([$iStyle = 8])\nCreates a menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_CreatePopup([$iStyle = 8])\nCreates a drop down menu, submenu, or shortcut menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_DeleteMenu($hMenu, $iItem [, $fByPos = True])\nDeletes an item from the specified menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_DestroyMenu($hMenu)\nDestroys the specified menu and frees any memory that the menu occupies (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_DrawMenuBar($hWnd)\nRedraws the menu bar of the specified window (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_EnableMenuItem($hMenu, $iItem [, $iState = 0 [, $fByPos = True]])\nEnables, disables, or grays the specified menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_FindItem($hMenu, $sText [, $fInStr = False [, $iStart = 0]])\nRetrieves a menu item based on it's text (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_FindParent($hMenu)\nRetrieves the window to which a menu belongs (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmp($hMenu, $iItem [, $fByPos = True])\nRetrieves the bitmap displayed for the item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpChecked($hMenu, $iItem [, $fByPos = True])\nRetrieves the bitmap displayed if the item is selected (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpUnchecked($hMenu, $iItem [, $fByPos = True])\nRetrieves the bitmap displayed if the item is not selected (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemChecked($hMenu, $iItem [, $fByPos = True])\nRetrieves the status of the menu item checked state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemCount($hMenu)\nRetrieves the number of items in the specified menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemData($hMenu, $iItem [, $fByPos = True])\nRetrieves the application defined value associated with the menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDefault($hMenu, $iItem [, $fByPos = True])\nRetrieves the status of the menu item default state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDisabled($hMenu, $iItem [, $fByPos = True])\nRetrieves the status of the menu item disabled state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemEnabled($hMenu, $iItem [, $fByPos = True])\nRetrieves the status of the menu item enabled state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemGrayed($hMenu, $iItem [, $fByPos = True])\nRetrieves the status of the menu item grayed state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemHighlighted($hMenu, $iItem [, $fByPos = True])\nRetrieves the status of the menu item highlighted state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemID($hMenu, $iItem [, $fByPos = True])\nRetrieves the menu item ID (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemInfo($hMenu, $iItem [, $fByPos = True])\nRetrieves information about a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRect($hWnd, $hMenu, $iItem)\nRetrieves the bounding rectangle for the specified menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRectEx($hWnd, $hMenu, $iItem)\nRetrieves the bounding rectangle for the specified menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemState($hMenu, $iItem [, $fByPos = True])\nRetrieves the menu item state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemStateEx($hMenu, $iItem [, $fByPos = True])\nRetrieves the menu flags associated with the specified menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemSubMenu($hMenu, $iItem)\nRetrieves a the submenu activated by a specified item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemText($hMenu, $iItem [, $fByPos = True])\nRetrieves the text of the specified menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemType($hMenu, $iItem [, $fByPos = True])\nRetrieves the menu item type (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenu($hWnd)\nRetrieves the handle of the menu assigned to the given window (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBackground($hMenu)\nRetrieves the brush to use for the menu's background (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBarInfo($hWnd [, $iItem = 0 [, $iObject = 1]])\nRetrieves information about the specified menu bar (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuContextHelpID($hMenu)\nRetrieves the context help identifier (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuData($hMenu)\nRetrieves the application defined value (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuDefaultItem($hMenu [, $fByPos = True [, $iFlags = 0]])\nRetrieves the default menu item on the specified menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuHeight($hMenu)\nRetrieves the maximum height of a menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuInfo($hMenu)\nRetrieves information about a specified menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuStyle($hMenu)\nRetrieves the style information for a menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_GetSystemMenu($hWnd [, $fRevert = False])\nAllows the application to access the window menu for copying and modifying (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItem($hMenu, $iIndex, $sText [, $iCmdID = 0 [, $hSubMenu = 0]])\nInserts a new menu item at the specified position (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItemEx($hMenu, $iIndex, ByRef $tMenu [, $fByPos = True])\nInserts a new menu item at the specified position in a menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_IsMenu($hMenu)\nDetermines whether a handle is a menu handle (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_LoadMenu($hInst, $sMenuName)\nLoads the specified menu resource from the executable file associated with an application instance (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_MapAccelerator($hMenu, $cAccel)\nMaps a menu accelerator key to it's position in the menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_MenuItemFromPoint($hWnd, $hMenu [, $iX = -1 [, $iY = -1]])\nDetermines which menu item is at the specified location. (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_RemoveMenu($hMenu, $iItem [, $fByPos = True])\nDeletes a menu item or detaches a submenu from the specified menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBitmaps($hMenu, $iItem, $hChecked, $hUnChecked [, $fByPos = True])\nAssociates the specified bitmap with a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmp($hMenu, $iItem, $hBmp [, $fByPos = True])\nSets the bitmap displayed for the item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpChecked($hMenu, $iItem, $hBmp [, $fByPos = True])\nSets the bitmap displayed if the item is selected (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpUnchecked($hMenu, $iItem, $hBmp [, $fByPos = True])\nSets the bitmap displayed if the item is not selected (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemChecked($hMenu, $iItem [, $fState = True [, $fByPos = True]])\nSets the checked state of a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemData($hMenu, $iItem, $iData [, $fByPos = True])\nSets the application defined value for a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDefault($hMenu, $iItem [, $fState = True [, $fByPos = True]])\nSets the status of the menu item default state (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDisabled($hMenu, $iItem [, $fState = True [, $fByPos = True]])\nSets the disabled state of a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemEnabled($hMenu, $iItem [, $fState = True [, $fByPos = True]])\nSets the enabled state of a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemGrayed($hMenu, $iItem [, $fState = True [, $fByPos = True]])\nSets the grayed state of a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemHighlighted($hMenu, $iItem [, $fState = True [, $fByPos = True]])\nSets the highlighted state of a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemID($hMenu, $iItem, $iID [, $fByPos = True])\nSets the menu item ID (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemInfo($hMenu, $iItem, ByRef $tInfo [, $fByPos = True])\nChanges information about a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemState($hMenu, $iItem, $iState [, $fState = True [, $fByPos = True]])\nSets the state of a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemSubMenu($hMenu, $iItem, $hSubMenu [, $fByPos = True])\nSets the drop down menu or submenu associated with the menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemText($hMenu, $iItem, $sText [, $fByPos = True])\nSets the text for a menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemType($hMenu, $iItem, $iType [, $fByPos = True])\nSets the menu item type (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenu($hWnd, $hMenu)\nAssigns a new menu to the specified window (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuBackground($hMenu, $hBrush)\nSets the background brush for the menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuContextHelpID($hMenu, $iHelpID)\nSets the context help identifier for the menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuData($hMenu, $iData)\nSets the application defined for the menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuDefaultItem($hMenu, $iItem [, $fByPos = True])\nSets the default menu item (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuHeight($hMenu, $iHeight)\nSets the maximum height of the menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuInfo($hMenu, ByRef $tInfo)\nSets information for a specified menu (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuStyle($hMenu, $iStyle)\nSets the menu style (Requires: #include <GuiMenu.au3>)
_GUICtrlMenu_TrackPopupMenu($hMenu, $hWnd [, $iX = -1 [, $iY = -1 [, $iAlignX = 1 [, $iAlignY = 1 [, $iNotify = 0 [, $iButtons = 0]]]]]])\nDisplays a shortcut menu at the specified location (Requires: #include <GuiMenu.au3>)
_GUICtrlMonthCal_Create($hWnd, $iX, $iY [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]])\nCreates a Month Calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_Destroy(ByRef $hWnd)\nDelete the MonthCal control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarBorder($hWnd)\nGets the size of the border, in pixels (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarCount($hWnd)\nGets the number of calendars currently displayed in the calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColor($hWnd, $iIndex)\nRetrieves a given color for the control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColorArray($hWnd, $iColor)\nRetrieves the color for a given portion of a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSel($hWnd)\nRetrieves the currently selected date (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSelStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves the currently selected date in string format (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOW($hWnd)\nRetrieves the first day of the week (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOWStr($hWnd)\nRetrieves the first day of the week as a string (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxSelCount($hWnd)\nRetrieves the maximum date range that can be selected in a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxTodayWidth($hWnd)\nRetrieves the maximum width of the "today" string in a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqHeight($hWnd)\nRetrieves the minimum height required to display a full month (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRect($hWnd)\nRetrieves the minimum size required to display a full month (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRectArray($hWnd)\nRetrieves the minimum size required to display a full month in a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqWidth($hWnd)\nRetrieves the minimum width required to display a full month (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthDelta($hWnd)\nRetrieves the scroll rate for a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRange($hWnd [, $fPartial = False])\nRetrieves date information that represents the high and low display limits (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMax($hWnd [, $fPartial = False])\nRetrieves date information that represents the high limit of the controls display (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMaxStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves date information that represents the high limit of the controls display in string format (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMin($hWnd [, $fPartial = False])\nRetrieves date information that represents the low limit of the controls display (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMinStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves date information that represents the low limit of the controls display in string format (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeSpan($hWnd [, $fPartial = False])\nReturns a value that represents the range, in months, spanned (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRange($hWnd)\nRetrieves the minimum and maximum allowable dates (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMax($hWnd)\nRetrieves the upper limit date range (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMaxStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves the upper limit date range in string format (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMin($hWnd)\nRetrieves the lower limit date range (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMinStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves the lower limit date range in string form (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRange($hWnd)\nRetrieves the upper and lower limits of the date range currently selected (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMax($hWnd)\nRetrieves the upper date range currently selected by the user (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMaxStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves the upper date range currently selected by the user in string form (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMin($hWnd)\nRetrieves the lower date range currently selected by the user (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMinStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves the lower date range currently selected by the user in string form (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetToday($hWnd)\nRetrieves the date information for the date specified as "today" (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetTodayStr($hWnd [, $sFormat = "%02d/%02d/%04d"])\nRetrieves the date information for the date specified as "today" in string format (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag for the control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_HitTest($hWnd, $iX, $iY)\nDetermines which portion of a month calendar control is at a given point (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCalendarBorder($hWnd [, $iBorderSize = 4 [, $fSetBorder = True]])\nSets the size of the border, in pixels (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetColor($hWnd, $iIndex, $iColor)\nSets the color for a given portion of the month calendar (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCurSel($hWnd, $iYear, $iMonth, $iDay)\nSets the currently selected date (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetDayState($hWnd, $aMasks)\nSets the day states for all months that are currently visible (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetFirstDOW($hWnd, $sDay)\nSets the first day of the week for a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMaxSelCount($hWnd, $iMaxSel)\nSets the maximum number of days that can be selected in a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMonthDelta($hWnd, $iDelta)\nSets the scroll rate for a month calendar control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetRange($hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay)\nSets date information that represents the high and low limits (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetSelRange($hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay)\nSets the selection for a month calendar control to a given date range (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetToday($hWnd, $iYear, $iMonth, $iDay)\nSets the date information for the date specified as "today" (Requires: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetUnicodeFormat($hWnd [, $fUnicode = False])\nSets the Unicode character format flag for the control (Requires: #include <GuiMonthCal.au3>)
_GUICtrlRebar_AddBand($hwndRebar, $hwndChild [, $iMinWidth = 100 [, $iDefaultWidth = 100 [, $sText = "" [, $iIndex = -1 [, $fStyle = -1]]]]])\nAdds a new band in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_AddToolBarBand($hwndRebar, $hwndToolbar [, $sText = "" [, $iIndex = -1 [, $fStyle = -1]]])\nAdds a new band in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_BeginDrag($hWnd, $iIndex [, $dwPos = -1])\nAdds a new band in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_Create($hWnd [, $iStyles = 0x513])\nCreate a Rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_DeleteBand($hWnd, $iIndex)\nDeletes a band from a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_DragMove($hWnd [, $dwPos = -1])\nUpdates the drag position in the rebar control after a previous _GUICtrlRebar_BeginDrag message (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_EndDrag($hWnd)\nTerminates the rebar control's drag-and-drop operation. This message does not cause an $RBN_ENDDRAG notification to be sent (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandBackColor($hWnd, $iIndex)\nRetrieves the Band background color (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandBorders($hWnd, $iIndex)\nRetrieves the borders of a band. The result of this message can be used to calculate the usable area in a band (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandBordersEx($hWnd, $iIndex)\nRetrieves the borders of a band. The result of this message can be used to calculate the usable area in a band (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandChildHandle($hWnd, $iIndex)\nRetrieves the Handle to the child window contained in the band, if any (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandChildSize($hWnd, $iIndex)\nRetrieves the Child size settings (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandCount($hWnd)\nRetrieves the count of bands currently in the rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandForeColor($hWnd, $iIndex)\nRetrieves the Band foreground color (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandHeaderSize($hWnd, $iIndex)\nRetrieves the size of the band's header, in pixels (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandID($hWnd, $iIndex)\nGet the value that the control uses to identify this band for custom draw notification messages (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandIdealSize($hWnd, $iIndex)\nGet Ideal width of the band, in pixels. (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandLength($hWnd, $iIndex)\nGet Length of the band, in pixels (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandLParam($hWnd, $iIndex)\nGet Application-defined value (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandMargins($hWnd)\nGet Length of the band, in pixels (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandMarginsEx($hWnd)\nGet Length of the band, in pixels (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandRect($hWnd, $iIndex)\nRetrieves the bounding rectangle for a given band in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandRectEx($hWnd, $iIndex)\nRetrieves the bounding rectangle for a given band in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyle($hWnd, $iIndex)\nGet the band style Flags (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleBreak($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleChildEdge($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleFixedBMP($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleFixedSize($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleGripperAlways($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleHidden($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleHideTitle($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleNoGripper($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleTopAlign($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleUseChevron($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleVariableHeight($hWnd, $iIndex)\nDetermine if flag is set (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandText($hWnd, $iIndex)\nRetrieves the display text for the band (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBarHeight($hWnd)\nRetrieves the height of the rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBarInfo($hWnd)\nRetrieves information about the rebar control and the image list it uses (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBKColor($hWnd)\nRetrieves a rebar control's default background color (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetColorScheme($hWnd)\nRetrieves the color scheme information from the rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetRowCount($hWnd)\nRetrieves the number of rows of bands in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetRowHeight($hWnd, $iIndex)\nRetrieves the height of a specified row in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetTextColor($hWnd)\nRetrieves a rebar control's default text color (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetToolTips($hWnd)\nRetrieves the handle to any ToolTip control associated with the rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag for the control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_HitTest($hWnd [, $iX = -1 [, $iY = -1]])\nDetermines which item is at a specified position (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_IDToIndex($hWnd, $iID)\nConverts a band identifier to a band index in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_MaximizeBand($hWnd, $iIndex [, $fIdeal = True])\nResizes a band in a rebar control to either its ideal or largest size (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_MinimizeBand($hWnd, $iIndex)\nResizes a band in a rebar control to its smallest size (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_MoveBand($hWnd, $iIndexFrom, $iIndexTo)\nMoves a band from one index to another (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandBackColor($hWnd, $iIndex, $iColor)\nSet the Band background color (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandForeColor($hWnd, $iIndex, $iColor)\nSet the Band foreground color (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandHeaderSize($hWnd, $iIndex, $iNewSize)\nSet the size of the band's header, in pixels (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandID($hWnd, $iIndex, $iID)\nSet the value that the control uses to identify this band for custom draw notification messages (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandIdealSize($hWnd, $iIndex, $iNewSize)\nSet Ideal width of the band, in pixels. (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandLength($hWnd, $iIndex, $icx)\nSet Application-defined value (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandLParam($hWnd, $iIndex, $ilParam)\nSet Application-defined value (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyle($hWnd, $iIndex, $fStyle)\nSet the band style Flags (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleBreak($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band is on a new line (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleChildEdge($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band has an edge at the top and bottom of the child window (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleFixedBMP($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band background bitmap does not move when the band is resized (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleFixedSize($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band can't be sized. With this style, the sizing grip is not displayed on the band (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleGripperAlways($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band will always have a sizing grip, even if it is the only band in the rebar (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleHidden($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band will not be visible (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleHideTitle($hWnd, $iIndex [, $fEnabled = True])\nSet whether to keep band title hidden (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleNoGripper($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band will never have a sizing grip, even if there is more than one band in the rebar (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleTopAlign($hWnd, $iIndex [, $fEnabled = True])\nSet whether to keep band in top row (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleUseChevron($hWnd, $iIndex [, $fEnabled = True])\nSet whether to display drop-down button (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleVariableHeight($hWnd, $iIndex [, $fEnabled = True])\nSet whether the band can be resized by the rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandText($hWnd, $iIndex, $sText)\nSets the display text for the band of a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBarInfo($hWnd, $himl)\nSets the characteristics of a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBKColor($hWnd, $iColor)\nSets the default background color of a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetColorScheme($hWnd, $BtnHighlight, $BtnShadow)\nSets the color scheme of a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetTextColor($hWnd, $iColor)\nSets a rebar control's default text color (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetToolTips($hWnd, $hToolTip)\nAssociates a ToolTip control with the rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_SetUnicodeFormat($hWnd [, $fUnicode = True])\nSets the Unicode character format flag for the control (Requires: #include <GuiReBar.au3>)
_GUICtrlRebar_ShowBand($hWnd, $iIndex [, $fShow = True])\nShows or hides a given band in a rebar control (Requires: #include <GuiReBar.au3>)
_GUICtrlRichEdit_AppendText($hWnd, $sText)\nAppends text at the end of the client area (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_AutoDetectURL($hWnd, $fState)\nEnables or disables automatic detection of URLS (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPaste($hWnd)\nCan the contents of the clipboard be pasted into the control? (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPasteSpecial($hWnd)\nCan the contents of the clipboard be pasted into the control in both formats? (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanRedo($hWnd)\nCan an undone action be redone? (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanUndo($hWnd)\nCan an action be undone? (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ChangeFontSize($hWnd, $iIncrement)\nIncrement or decrement font size(s)\nof selected text (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Copy($hWnd)\nCopy text to clipboard (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Create($hWnd, $sText, $iLeft, $iTop [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = -1 [, $iExStyle = -1]]]])\nCreate an Edit control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Cut($hWnd)\nCut text to clipboard (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Deselect($hWnd)\nDeselects text, leaving none selected (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Destroy(ByRef $hWnd)\nDelete the Rich Edit control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_EmptyUndoBuffer($hWnd)\nResets the undo flag of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindText($hWnd, $sText [, $fForward = True [, $fMatchCase = False [, $fWholeWord = False [, $iBehavior = 0]]]])\nSearch for a text starting at insertion point or at anchor point of selection (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindTextInRange($hWnd, $sText [, $iStart = 0 [, $iEnd = -1 [, $fMatchCase = False [, $fwholeWord = False [, $iBehavior = 0]]]]])\nSearch for a text in a range of inter-character positions (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetBkColor($hWnd)\nGets the background color of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharAttributes($hWnd)\nReturns attributes of selected text (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharBkColor($hWnd)\nRetrieves the background color of the selected text or, if none selected, of the character to the right of the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharColor($hWnd)\nRetrieves the color of the selected text or, if none selected, of the character to the right of the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosFromXY($hWnd, $iX, $iY)\nGets inter-character position closest to a specified point in the client area (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfNextWord($hWnd, $iCpStart)\nGets inter-character position before the next word (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfPreviousWord($hWnd, $iCpStart)\nGets inter-character position before the Previous word (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharWordBreakInfo($hWnd, $iCp)\nGets inter-character position before the Previous word (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFirstCharPosOnLine($hWnd [, $iLine = -1])\nRetrieves the inter-character position preceding the first character of a line (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFont($hWnd)\nGets the font attributes of a selection or, if no selection, at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineCount($hWnd)\nRetrieves the number of lines in a multi-line edit control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineLength($hWnd, $iLine)\nRetrieves the length of a line (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineNumberFromCharPos($hWnd, $iCharPos)\nRetrieves the line number on which an inter-character position is found (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextRedo($hWnd, $fName = True)\nRetrieves the name or type ID of the next possible redo action (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextUndo($hWnd, $fName = True)\nRetrieves the name or type ID of the next possible Undo action (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNumberOfFirstVisibleLine($hWnd)\nGets number of the first line which is visible in the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAlignment($hWnd)\nGets the alignment of selected paragraph(s), or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAttributes($hWnd)\nGets the attributes of (first)\nselected paragraph or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaBorder($hWnd)\nGets the border settings of (first)\nselected paragraph or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaIndents($hWnd)\nGets the border indent settings of (first)\nselected paragraph or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaNumbering($hWnd)\nGets the numbering style of (first)\nselected paragraph or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaShading($hWnd)\nGets the shading settings of (first)\nselected paragraph or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaSpacing($hWnd)\nGets the spacing settings of (first)\nselected paragraph or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaTabStops($hWnd)\nGets the tabstops of (first)\nselected paragraph or (if no selection)\nof the current paragraph (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetPasswordChar($hWnd)\nGets the password character that a rich edit control displays when the user enters text (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetRECT($hWnd)\nRetrieves the formatting rectangle of a control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetScrollPos($hWnd)\nGets the Scrolling position of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSel($hWnd)\nGets the low and high inter-character positions of a selection (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelAA($hWnd)\nGets the anchor and active inter-character positions of a selection, in that order (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelText($hWnd)\nRetrieves the currently selected text (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSpaceUnit()\nGets the unit of measure of horizontal and vertical space used in parameters of various _GUICtrlRichEdit functions (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetText($hWnd [, $fCrToCrLf = False [, $iCodePage = 0 [, $sReplChar = ""]]])\nGet all of the text in the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInLine($hWnd, $iLine)\nGets a line of text (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInRange($hWnd, $iStart, $iEnd)\nGets the text from from one inter-character position to another (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextLength($hWnd [, $fExact = True [, $fChars = False]])\nGet the length of the whole text in the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetVersion()\nRetrieves the version of Rich Edit (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetXYFromCharPos($hWnd, $iCharPos)\nRetrieves the XY coordinates of an inter-character position (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetZoom($hWnd)\nGets the zoom level of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GotoCharPos($hWnd, $iCharPos)\nMoves the insertion point to an inter-character position (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_HideSelection($hWnd [, $fHide = True])\nHides (or shows)\na selection (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_InsertText($hWnd, $sText)\nInserts text at insertion point or anchor point of selection (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsModified($hWnd)\nRetrieves the state of a rich edit control's modification flag (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsTextSelected($hWnd)\nIs text selected? (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Paste($hWnd)\nPaste RTF or RTF with Objects from clipboard (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PasteSpecial($hWnd, $fAndObjects = True)\nPaste RTF or RTF and Objects from clipboard (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PauseRedraw($hWnd)\nPauses redrawing of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Redo($hWnd)\nRedoes last undone action (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ReplaceText($hWnd, $sText [, $fCanUndo = True])\nReplaces selected text (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ResumeRedraw($hWnd)\nResumes redrawing of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLineOrPage($hWnd, $sAction)\nScrolls the text down or up a line or a page (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLines($hWnd, $iQlines)\nScrolls the text down or up a number of lines (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollToCaret($hWnd)\nScrolls to show line on which caret (insertion point)\nis (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetBkColor($hWnd [, $iColor = Default])\nSets the background color of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharAttributes($hWnd, $sStatesAndEffects [, $fWord = False])\nTurns an attribute on or off for selected text or, if none selected, for text inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharBkColor($hWnd [, $iColor])\nSets the background color of selected text or, if none selected, sets the background color of text inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharColor($hWnd [, $iColor])\nSets the color of selected text or, if none selected, sets the background color of text inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetEventMask($hWnd, $iEventMask)\nSpecifies which notification messages are sent to the parent window (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetFont($hWnd [, $iPoints = Default [, $sName = Default [, $iCharset = Default [, $iLcid = Default]]]])\nSets the font attributes of selected text or, if none selected, sets those of text inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetLimitOnText($hWnd, $iNewLimit)\nChange number of characters that can be typed, pasted or streamed in as Rich Text Format (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetModified($hWnd, $fState = True)\nSets or clears the modification flag (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAlignment($hWnd, $sAlignment)\nSets alignment of paragraph(s)\nin the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAttributes($hWnd, $sStatesAndAtts)\nSets attributes of paragraph(s)\nin the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaBorder($hWnd [, $sLocation [, $vLineStyle [, $sColor [, $iSpace]]]])\nSets the border of paragraph(s)\nin the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaIndents($hWnd [, $vLeft = Default [, $iRight = Default [, $iFirstLine = Default]]])\nSets indents of paragraph(s)\nin the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaNumbering($hWnd, $sStyle [, $iTextToNbrSpace = Default [, $fForceRoman=False]])\nSets numbering of paragraph(s)\nin the current selection or, if no selection, of paragraph(s)\ninserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaShading($hWnd [, $iWeight = Default [, $sStyle = Default [, $sForeColor = Default [, $sBackColor = Default]]]])\nSets the shading of paragraph(s)\nin the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaSpacing($hWnd, [$vInter=Default [, $iBefore=Default [, $iAfter=Default]]])\nSets paragraph spacing of paragraphs having selected text or, if none selected, sets it for text inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaTabStops($hWnd, $sTabStops)\nSets tab stops of paragraphs having selected text or, if none selected, sets it for text inserted at the insertion point (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetPasswordChar($hWnd [, $cDisplayChar = "0"])\nSets the characters to be displayed instead of those typed, or causes typed characters to show (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetReadOnly($hWnd [, $fState = True])\nSets or removes the read-only state (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetRECT($hWnd [,$iLeft = Default [, $iTop = Default [, $iRight = Default [, $iBottom = Default [, $bRedraw = True]]]]])\nSets or clears the modification flag (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetScrollPos($hWnd, $iX, $iY)\nScrolls the display such that ($ix,$iY)\nis in the upper left corner of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSel($hWnd, $iAnchor, $iActive [, $fHideSel = False])\nSets the low and high character position of a selection (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSpaceUnit($sUnit)\nSets the unit of measure of horizontal and vertical space used in parameters of various _GUICtrlRichEdit functions (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetTabStops($hWnd, $vTabStops [, $fRedraw = True])\nSets tab stops for the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetText($hWnd, $sText)\nSets the text of a control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetUndoLimit($hWnd, $iLimit)\nSets the maximum number of actions that can stored in the undo queue (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetZoom($hWnd, $iPercent)\nSets zoom level of the control (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromFile($hWnd, $sFilespec)\nSets text in a control from a file (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromVar($hWnd, $sVar)\nSets text in a control from a variable (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToFile($hWnd, $sFilespec [, $fIncludeCOM=True [, $iOpts=0 [, $iCodePage = 0]]])\nWrites contens of a control to a file (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToVar($hWnd [, $fRtf = True [, $fIncludeCOM=True [, $iOpts=0 [, $iCodePage = 0]]]])\nWrites contents of a control to a variable (Requires: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Undo($hWnd)\nUndoes the last edit control operation in the control's undo queue (Requires: #include <GuiRichEdit.au3>)
_GUICtrlSlider_ClearSel($hWnd)\nClears the current selection range (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_ClearTics($hWnd)\nRemoves the current tick marks from a slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_Create($hWnd, $iX, $iY [, $iWidth = 100 [, $iHeight = 20 [, $iStyle = 0x0001 [, $iExStyle = 0x00000000]]]])\nCreate a Slider control (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetBuddy($hWnd, $fLocation)\nRetrieves the handle to a slider control buddy window at a given location (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRect($hWnd)\nRetrieves the size and position of the bounding rectangle for a sliders's channel (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRectEx($hWnd)\nRetrieves the size and position of the bounding rectangle for a sliders's channel (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetLineSize($hWnd)\nRetrieves the number of logical positions the slider moves (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetLogicalTics($hWnd)\nRetrieves an array that contains the logical positions of the tick marks for a slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetNumTics($hWnd)\nRetrieves the number of tick marks from a slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetPageSize($hWnd)\nRetrieves the number of logical positions the slider moves (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetPos($hWnd)\nRetrieves the logical position the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRange($hWnd)\nRetrieves the maximum and minimum position for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMax($hWnd)\nRetrieves the maximum position for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMin($hWnd)\nRetrieves the minimum position for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSel($hWnd)\nRetrieves the ending and starting position of the current selection range (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSelEnd($hWnd)\nRetrieves the ending position of the current selection range (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSelStart($hWnd)\nRetrieves the starting position of the current selection range (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbLength($hWnd)\nRetrieves the length of the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRect($hWnd)\nRetrieves the size and position of the bounding rectangle for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRectEx($hWnd)\nRetrieves the size and position of the bounding rectangle for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetTic($hWnd, $iTic)\nRetrieves the logical position of a tick mark (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetTicPos($hWnd, $iTic)\nRetrieves the current physical position of a tick mark (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetToolTips($hWnd)\nRetrieves the handle to the ToolTip control assigned to the slider, if any. (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag for the control (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetBuddy($hWnd, $fLocation, $hBuddy)\nAssigns a window as the buddy window for a slider control (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetLineSize($hWnd, $iLineSize)\nSets the number of logical positions the slider moves (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetPageSize($hWnd, $iPageSize)\nSets the number of logical positions the slider moves (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetPos($hWnd, $iPosition)\nSets the current logical position of the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRange($hWnd, $iMinimum, $iMaximum)\nSets the range of minimum and maximum logical positions for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMax($hWnd, $iMaximum)\nSets the maximum logical position for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMin($hWnd, $iMinimum)\nSets the minimum logical position for the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSel($hWnd, $iMinimum, $iMaximum)\nSets the starting and ending positions for the available selection range (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSelEnd($hWnd, $iMaximum)\nSets the ending logical position of the current selection range (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSelStart($hWnd, $iMinimum)\nSets the starting logical position of the current selection range (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetThumbLength($hWnd, $iLength)\nSets the length of the slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTic($hWnd, $iPosition)\nSets a tick mark in a slider at the specified logical position (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTicFreq($hWnd, $iFreg)\nSets the interval frequency for tick marks in a slider (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTipSide($hWnd, $fLocation)\nPositions a ToolTip control (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetToolTips($hWnd, $hWndTT)\nAssigns a ToolTip control to a slider control (Requires: #include <GuiSlider.au3>)
_GUICtrlSlider_SetUnicodeFormat($hWnd, $fUnicode)\nSets the Unicode character format flag for the control (Requires: #include <GuiSlider.au3>)
_GUICtrlStatusBar_Create($hWnd [, $vPartEdge = -1 [, $vPartText = "" [, $iStyles = -1 [, $iExStyles = 0x00000000]]]])\nCreate a statusbar (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_EmbedControl($hWnd, $iPart, $hControl [, $iFit = 4])\nEmbeds a child control in the control (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBorders($hWnd)\nRetrieves the current widths of the horizontal and vertical borders (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersHorz($hWnd)\nRetrieves the current width of the horizontal border (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersRect($hWnd)\nRetrieves the current width of the rectangle border (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersVert($hWnd)\nRetrieves the current width of the vertical border (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetCount($hWnd)\nRetrieves the number of parts (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetHeight($hWnd)\nRetrieves the height of a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetIcon($hWnd [, $iIndex = 0])\nRetrieves the icon for a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetParts($hWnd)\nRetrieves the number of parts and the part edges (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRect($hWnd, $iPart)\nRetrieves the bounding rectangle of a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRectEx($hWnd, $iPart)\nRetrieves the bounding rectangle of a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetText($hWnd, $iPart)\nRetrieves the text from the specified part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextFlags($hWnd, $iPart)\nRetrieves the text length flags for a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLength($hWnd, $iPart)\nRetrieves the length of a part text (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLengthEx($hwnd, $iPart)\nRetrieves the uFlag of a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTipText($hWnd, $iPart)\nRetrieves the ToolTip text for a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetWidth($hWnd, $iPart)\nRetrieves the width of a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_IsSimple($hWnd)\nChecks a status bar control to determine if it is in simple mode (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Resize($hWnd)\nCauses the status bar to resize itself (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetBkColor($hWnd, $iColor)\nSets the background color (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetIcon($hWnd, $iPart [, $hIcon = -1 [, $sIconFile = ""]])\nSets the icon for a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetMinHeight($hWnd, $iMinHeight)\nSets the minimum height of a status window's drawing area (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetParts($hWnd [, $iaParts = -1 [, $iaPartWidth = 25]])\nSets the number of parts and the part edges (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetSimple($hWnd, $fSimple = True)\nSpecifies whether a status window displays simple text or displays all window parts (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetText($hWnd, $sText = "", $iPart = 0, $iUFlag = 0)\nSets the text in the specified part of a status window (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetTipText($hWnd, $iPart, $sText)\nSets the ToolTip text for a part (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetUnicodeFormat($hWnd [, $fUnicode = True])\nSets the Unicode character format flag (Requires: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_ShowHide($hWnd, $iState)\nShow/Hide the StatusBar control (Requires: #include <GuiStatusBar.au3>)
_GUICtrlTab_ActivateTab($hWnd, $iIndex)\nActivates a tab by its index (Requires: #include <GuiTab.au3>)
_GUICtrlTab_ClickTab($hWnd, $iIndex [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 1]]]])\nClicks a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_Create($hWnd, $iX, $iY [, $iWidth=150 [, $iHeight=150 [, $iStyle=0x00000040 [, $iExStyle=0x00000000]]]])\nCreate a TabControl control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_DeleteAllItems($hWnd)\nDeletes all tabs (Requires: #include <GuiTab.au3>)
_GUICtrlTab_DeleteItem($hWnd, $iIndex)\nDeletes a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_DeselectAll($hWnd [, $fExclude = True])\nResets tabs, clearing any that were set to the pressed state (Requires: #include <GuiTab.au3>)
_GUICtrlTab_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_FindTab($hWnd, $sText [, $fInStr = False [, $iStart = 0]])\nSearches for a tab with the specific text (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetCurFocus($hWnd)\nReturns the index of the item that has the focus in a tab control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetCurSel($hWnd)\nDetermines the currently selected tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRect($hWnd)\nRetrieves the display rectangle of the client area (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRectEx($hWnd)\nRetrieves the display rectangle of the client area (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetExtendedStyle($hWnd)\nRetrieves the extended styles that are currently in use (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetImageList($hWnd)\nRetrieves the tab control image list (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItem($hWnd, $iIndex)\nRetrieves information about a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItemCount($hWnd)\nRetrieves the number of tabs (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItemImage($hWnd, $iIndex)\nRetrieves the image index for a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItemParam($hWnd, $iIndex)\nRetrieves the param data for a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItemRect($hWnd, $iIndex)\nRetrieves the bounding rectangle for a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItemRectEx($hWnd, $iIndex)\nRetrieves the bounding rectangle for a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItemState($hWnd, $iIndex)\nRetrieves the state of a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetItemText($hWnd, $iIndex)\nRetrieves the text of a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetRowCount($hWnd)\nRetrieves the current number of rows of tabs (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetToolTips($hWnd)\nRetrieves the handle to the ToolTip control associated with the control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag for the control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_HighlightItem($hWnd, $iIndex [, $fHighlight = True])\nSets the highlight state of a tab item (Requires: #include <GuiTab.au3>)
_GUICtrlTab_HitTest($hWnd, $iX, $iY)\nDetermines where a point lies control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_InsertItem($hWnd, $iIndex, $sText [, $iImage = -1 [, $iParam = 0]])\nInserts a new tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_RemoveImage($hWnd, $iIndex)\nRemoves an image from the control's image list (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetCurFocus($hWnd, $iIndex)\nSets the focus to a specified tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetCurSel($hWnd, $iIndex)\nSelects a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetExtendedStyle($hWnd, $iStyle)\nSets the extended styles that are currently in use (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetImageList($hWnd, $hImage)\nSets the image list associated with a tab control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetItem($hWnd, $iIndex [, $sText = -1 [, $iState = -1 [, $iImage = -1 [, $iParam = -1]]]])\nSets information about a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetItemImage($hWnd, $iIndex, $iImage)\nSets the image of a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetItemParam($hWnd, $iIndex, $iParam)\nSets the param data of a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetItemSize($hWnd, $iWidth, $iHeight)\nSets the width and height of tabs in a fixed width or owner drawn control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetItemState($hWnd, $iIndex, $iState)\nSets the state of a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetItemText($hWnd, $iIndex, $sText)\nSets the text of a tab (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetMinTabWidth($hWnd, $iMinWidth)\nSets the minimum width of items in a tab control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetPadding($hWnd, $iHorz, $iVert)\nSets the amount of space around each tab's icon and label (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetToolTips($hWnd, $hToolTip)\nSets the handle to the ToolTip control associated with the control (Requires: #include <GuiTab.au3>)
_GUICtrlTab_SetUnicodeFormat($hWnd, $fUnicode)\nSets the Unicode character format flag for the control (Requires: #include <GuiTab.au3>)
_GUICtrlToolbar_AddBitmap($hWnd, $iButtons, $hInst, $iID)\nAdds images to the image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_AddButton($hWnd, $iID, $iImage [, $iString = 0 [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]])\nAdds a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_AddButtonSep($hWnd [, $iWidth = 6])\nAdds a separator (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_AddString($hWnd, $sString)\nAdds a new string to the toolbar's string pool (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ButtonCount($hWnd)\nRetrieves a count of the buttons (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_CheckButton($hWnd, $iCommandID [, $fCheck = True])\nChecks or unchecks a given button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ClickAccel($hWnd, $cAccel [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 1]]]])\nClicks a specific button using it's accelerator (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ClickButton($hWnd, $iCommandID [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 1]]]])\nClicks a specific button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ClickIndex($hWnd, $iIndex [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 1]]]])\nClicks a specific button using it's index (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_CommandToIndex($hWnd, $iCommandID)\nRetrieves the index for the button associated with the specified command identifier (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_Create($hWnd [, $iStyle = 0x00000800 [, $iExStyle = 0x00000000]])\nCreate a Toolbar control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_Customize($hWnd)\nDisplays the Customize Toolbar dialog box (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_DeleteButton($hWnd, $iCommandID)\nDeletes a button from the toolbar (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_EnableButton($hWnd, $iCommandID [, $fEnable = True])\nEnables or disables the specified button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_FindToolbar($hWnd, $sText)\nFinds a specific toolbar (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetAnchorHighlight($hWnd)\nRetrieves the anchor highlight setting (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetBitmapFlags($hWnd)\nRetrieves the flags that describe the type of bitmap to be used (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonBitmap($hWnd, $iCommandID)\nRetrieves the index of the bitmap associated with a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonInfo($hWnd, $iCommandID)\nRetrieves information for a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonInfoEx($hWnd, $iCommandID)\nRetrieves information for a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonParam($hWnd, $iCommandID)\nRetrieves the button param value (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonRect($hWnd, $iCommandID)\nRetrieves the bounding rectangle for a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonRectEx($hWnd, $iCommandID)\nRetrieves the bounding rectangle for a specified toolbar button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonSize($hWnd)\nRetrieves the current button width and height, in pixels (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonState($hWnd, $iCommandID)\nRetrieves information about the state of the specified button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonStyle($hWnd, $iCommandID)\nRetrieves the style flags of a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonText($hWnd, $iCommandID)\nRetrieves the display text of a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetColorScheme($hWnd)\nRetrieves the color scheme information (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetDisabledImageList($hWnd)\nRetrieves the disabled button image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetExtendedStyle($hWnd)\nRetrieves the extended styles (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetHotImageList($hWnd)\nRetrieves the hot button image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetHotItem($hWnd)\nRetrieves the index of the hot item (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetImageList($hWnd)\nRetrieves the default state image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetInsertMark($hWnd)\nRetrieves the current insertion mark (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetInsertMarkColor($hWnd)\nRetrieves the color used to draw the insertion mark (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetMaxSize($hWnd)\nRetrieves the total size of all of the visible buttons and separators (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetMetrics($hWnd)\nRetrieves the metrics of a toolbar control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetPadding($hWnd)\nRetrieves the horizontal and vertical padding (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetRows($hWnd)\nRetrieves the number of rows of buttons (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetString($hWnd, $iIndex)\nRetrieves a string from the string pool (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyle($hWnd)\nRetrieves the styles currently in use for a toolbar control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleAltDrag($hWnd)\nIndicates that the control allows buttons to be dragged (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleCustomErase($hWnd)\nIndicates that the control generates NM_CUSTOMDRAW notification messages (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleFlat($hWnd)\nIndicates that the control is flat (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleList($hWnd)\nIndicates that the control has button text to the right of the bitmap (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleRegisterDrop($hWnd)\nIndicates that the control generates TBN_GETOBJECT notification messages (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleToolTips($hWnd)\nIndicates that the control has tooltips (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleTransparent($hWnd)\nIndicates that the control is transparent (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleWrapable($hWnd)\nIndicates that the control is wrapable (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetTextRows($hWnd)\nRetrieves the maximum number of text rows that can be displayed on a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetToolTips($hWnd)\nRetrieves the handle to the ToolTip control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_HideButton($hWnd, $iCommandID [, $fHide = True])\nHides or shows the specified button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_HighlightButton($hWnd, $iCommandID [, $fHighlight = True])\nSets the highlight state of a given button control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_HitTest($hWnd, $iX, $iY)\nDetermines where a point lies within the control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IndexToCommand($hWnd, $iIndex)\nRetrieves the command identifier associated with the button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_InsertButton($hWnd, $iIndex, $iID, $iImage [, $sText = "" [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]])\nInserts a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_InsertMarkHitTest($hWnd, $iX, $iY)\nRetrieves the insertion mark information for a point (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonChecked($hWnd, $iCommandID)\nIndicates whether the specified button is checked (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonEnabled($hWnd, $iCommandID)\nIndicates whether the specified button is enabled (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonHidden($hWnd, $iCommandID)\nIndicates whether the specified button is hidden (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonHighlighted($hWnd, $iCommandID)\nIndicates whether the specified button is hilighted (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonIndeterminate($hWnd, $iCommandID)\nIndicates whether the specified button is indeterminate (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonPressed($hWnd, $iCommandID)\nIndicates that the button is being clicked (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_LoadBitmap($hWnd, $sFileName)\nAdds a bitmap to the image list from a file (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_LoadImages($hWnd, $iBitMapID)\nLoads system defined button images into a toolbar control's image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_MapAccelerator($hWnd, $cAccel)\nDetermines the ID of the button that corresponds to the specified accelerator (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_MoveButton($hWnd, $iOldPos, $iNewPos)\nMoves a button from one index to another (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_PressButton($hWnd, $iCommandID [, $fPress = True])\nPresses or releases the specified button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetAnchorHighlight($hWnd, $fAnchor)\nSets the anchor highlight setting (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetBitmapSize($hWnd, $iWidth, $iHeight)\nSets the size of the bitmapped images to be added to a toolbar (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonBitMap($hWnd, $iCommandID, $iIndex)\nSets the index of the bitmap associated with a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonInfo($hWnd, $iCommandID [, $iImage = -3 [, $iState = -1 [, $iStyle = -1 [, $iWidth = -1 [, $iParam = -1]]]]])\nSets extended information for a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonInfoEx($hWnd, $iCommandID, $tButton)\nSets extended information for a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonParam($hWnd, $iCommandID, $iParam)\nSets the button param value (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonSize($hWnd, $iHeight, $iWidth)\nSets the size of the buttons to be added to a toolbar (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonState($hWnd, $iCommandID, $iState)\nSets information about the state of the specified button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonStyle($hWnd, $iCommandID, $iStyle)\nSets the style flags of a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonText($hWnd, $iCommandID, $sText)\nSets the display text of a button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonWidth($hWnd, $iMin, $iMax)\nSets the minimum and maximum button widths in the toolbar control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetCmdID($hWnd, $iIndex, $iCommandID)\nSets the command identifier of a toolbar button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetColorScheme($hWnd, $iHighlight, $iShadow)\nSets the color scheme information (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetDisabledImageList($hWnd, $hImageList)\nSets the disabled image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetDrawTextFlags($hWnd, $iMask, $iDTFlags)\nSets the text drawing flags for the toolbar (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetExtendedStyle($hWnd, $iStyle)\nSets the extended styles control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetHotImageList($hWnd, $hImageList)\nSets the hot button image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetHotItem($hWnd, $iIndex)\nSets the hot item (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetImageList($hWnd, $hImageList)\nSets the default button image list (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetIndent($hWnd, $iIndent)\nSets the indentation for the first button control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetIndeterminate($hWnd, $iCommandID [, $fState = True])\nSets or clears the indeterminate state of the specified button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetInsertMark($hWnd, $iButton [, $iFlags = 0])\nSets the current insertion mark for the toolbar (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetInsertMarkColor($hWnd, $iColor)\nSets the color used to draw the insertion mark (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetMaxTextRows($hWnd, $iMaxRows)\nSets the maximum number of text rows displayed button (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetMetrics($hWnd, $iXPad, $iYPad, $iXSpacing, $iYSpacing)\nRetrieves the metrics of a toolbar control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetPadding($hWnd, $iCX, $iCY)\nSets the padding control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetParent($hWnd, $hParent)\nSets the window to which the control sends notification messages (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetRows($hWnd, $iRows [, $fLarger = True])\nSets the number of rows of buttons (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyle($hWnd, $iStyle)\nSets the style control (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleAltDrag($hWnd [, $fState = True])\nSets whether that the control allows buttons to be dragged (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleCustomErase($hWnd [, $fState = True])\nSets whether the control generates NM_CUSTOMDRAW notification messages (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleFlat($hWnd, $fState)\nSets whether the control is flat (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleList($hWnd, $fState)\nSets whether the control has button text to the right of the bitmap (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleRegisterDrop($hWnd, $fState)\nSets whether the control generates TBN_GETOBJECT notification messages (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleToolTips($hWnd, $fState)\nSets whether the control has tooltips (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleTransparent($hWnd, $fState)\nSets whether the control is transparent (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleWrapable($hWnd, $fState)\nSets whether the control is wrapable (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetToolTips($hWnd, $hToolTip)\nAssociates a ToolTip control with a toolbar (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetUnicodeFormat($hWnd, $fUnicode = False)\nSets the Unicode character format flag (Requires: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetWindowTheme($hWnd, $sTheme)\nSets the visual style (Requires: #include <GuiToolbar.au3>)
_GUICtrlTreeView_Add($hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]])\nAdds a new item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChild($hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]])\nAdds a new item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChildFirst($hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]])\nAdds a new item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddFirst($hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]])\nAdds a new item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_BeginUpdate($hWnd)\nPrevents updating of the control until the EndUpdate function is called (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_ClickItem($hWnd, $hItem [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 0]]]])\nClick on a item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Create($hWnd, $iX, $iY [, $iWidth=150 [, $iHeight=150 [, $iStyle=0x00000037 [, $iExStyle=0x00000000]]]])\nCreate a TreeView control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateDragImage($hWnd, $hItem)\nCreates a dragging bitmap for the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateSolidBitMap($hWnd, $iColor, $iWidth, $iHeight)\nCreates a solid color bitmap (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Delete($hWnd [, $hItem = 0])\nRemoves an item and all its children (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteAll($hWnd)\nRemoves all items from a tree-view control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteChildren($hWnd, $hItem)\nDeletes all children of a item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Destroy(ByRef $hWnd)\nDelete the control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRect($hWnd, $hItem [, $fTextOnly = False])\nReturns the bounding rectangle for a tree item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRectEx($hWnd, $hItem [, $fTextOnly = False])\nReturns the bounding rectangle for a tree item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EditText($hWnd, $hItem)\nBegins in-place editing of the specified item's text (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EndEdit($hWnd, $fCancel = False)\nEnds the editing of the item's text (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EndUpdate($hWnd)\nEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EnsureVisible($hWnd, $hItem)\nEnsures that a item is visible, expanding the parent item or scrolling the control if necessary (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Expand($hWnd [, $hItem = 0 [, $fExpand = True]])\nExpands or collapses the list of child items associated with the specified parent item, if any (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_ExpandedOnce($hWnd, $hItem)\nIndicates if the item's list of child items has been expanded at least once (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItem($hWnd, $sText [, $fInStr = False [, $hStart = 0]])\nRetrieves a item based on it's text (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItemEx($hWnd, $sPath [, $hStart = 0])\nRetrieves a item based on a tree path (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBkColor($hWnd)\nRetrieve the text back color (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBold($hWnd, $hItem)\nIndicates if the item is drawn in a bold style (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChecked($hWnd, $hItem)\nIndicates if a item has its checkbox checked (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildCount($hWnd, $hItem)\nRetrieves the number of children of an parent item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildren($hWnd, $hItem)\nIndicates whether the item children flag is set (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCount($hWnd)\nRetrieves a count of the items (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCut($hWnd, $hItem)\nIndicates if the item is drawn as if selected as part of a cut and paste operation (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetDropTarget($hWnd, $hItem)\nIndicates whether the item is drawn as a drag and drop target (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetEditControl($hWnd)\nRetrieves the handle to the edit control being used to edit a item's text (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetExpanded($hWnd, $hItem)\nIndicates whether the item is expanded (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstChild($hWnd, $hItem)\nRetrieves the first child item of the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstItem($hWnd)\nRetrieves the topmost or very first item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstVisible($hWnd)\nRetrieves the first visible item in the control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFocused($hWnd, $hItem)\nIndicates whether the item has focus (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetHeight($hWnd)\nRetrieves the current height of the each item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageIndex($hWnd, $hItem)\nRetrieves the normal state image index (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageListIconHandle($hWnd, $iIndex)\nRetrieve ImageList handle (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetIndent($hWnd)\nRetrieves the amount, in pixels, that child items are indented relative to their parent items (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetInsertMarkColor($hWnd)\nRetrieves the color used to draw the insertion mark (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetISearchString($hWnd)\nRetrieves the incremental search string (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemByIndex($hWnd, $hItem, $iIndex)\nRetrieve a item by its position in the list of child items (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemHandle($hWnd [, $hItem = 0])\nRetrieve the item handle (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemParam($hWnd [, $hItem = 0])\nRetrieves the application specific value of the item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLastChild($hWnd, $hItem)\nRetrieves the last child item of the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLineColor($hWnd)\nRetrieve the line color (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNext($hWnd, $hItem)\nRetrieves the next item after the calling item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextChild($hWnd, $hItem)\nReturns the next item at the same level as the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextSibling($hWnd, $hItem)\nReturns the next item at the same level as the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextVisible($hWnd, $hItem)\nRetrieves the next visible item that follows the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNormalImageList($hWnd)\nRetrieves the normal image list (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentHandle($hWnd [, $hItem = 0])\nRetrieve the parent handle of item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentParam($hWnd, $hItem = 0)\nRetrieve the parent control ID/Param of item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrev($hWnd, $hItem)\nRetrieves the previous item before the calling item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevChild($hWnd, $hItem)\nRetrieves the previous child item of a specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevSibling($hWnd, $hItem)\nReturns the previous item before the calling item at the same level (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevVisible($hWnd, $hItem)\nRetrieves the first visible item that precedes the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetScrollTime($hWnd)\nRetrieves the maximum scroll time (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelected($hWnd, $hItem)\nIndicates whether the item appears in the selected state (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelectedImageIndex($hWnd, $hItem)\nRetrieves the index in the image list of the image displayed for the item when it is selected (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelection($hWnd)\nRetrieves the currently selected item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSiblingCount($hWnd, $hItem)\nRetrieves the number of siblings at the level of an item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetState($hWnd [, $hItem = 0])\nRetrieve the state of the item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageIndex($hWnd, $hItem)\nRetrieves the index of the state image to display for the item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageList($hWnd)\nRetrieves the handle to the state image list (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetText($hWnd [, $hItem = 0])\nRetrieve the item text (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTextColor($hWnd)\nRetrieve the text color (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetToolTips($hWnd)\nRetrieves the handle to the child ToolTip control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTree($hWnd, $hItem)\nRetrieve all items text (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetUnicodeFormat($hWnd)\nRetrieves the Unicode character format flag (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisible($hWnd, $hItem)\nIndicates whether the item is currently visible in the control image (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisibleCount($hWnd)\nReturns the number of items that can be fully visible in the control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTest($hWnd, $iX, $iY)\nReturns information about the location of a point relative to the control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestEx($hWnd, $iX, $iY)\nReturns information about the location of a point relative to the control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestItem($hWnd, $iX, $iY)\nReturns the item at the specified coordinates (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Index($hWnd, $hItem)\nRetrieves the position of the item in the list (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_InsertItem($hWnd, $sItem_Text [, $hItem_Parent = 0 [, $hItem_After = 0 [, $iImage = -1 [, $iSelImage = -1]]]])\nInsert an item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsFirstItem($hWnd, $hItem)\nIndicates whether the tree item is very first (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsParent($hWnd, $hParent, $hItem)\nIndicates whether one item is the parent of another item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Level($hWnd, $hItem)\nIndicates the level of indentation of a item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItem($hWnd, $hItem [, $iFlag=0])\nSelects the specified item, scrolls the item into view, or redraws the item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItemByIndex($hWnd, $hItem, $iIndex)\nSelects the item based on it's index in the parent list (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBkColor($hWnd, $vRGBColor)\nSets the back color (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBold($hWnd, $hItem [, $fFlag = True])\nSets whether the item is drawn using a bold sytle (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChecked($hWnd, $hItem [, $fCheck = True])\nSets whether a item has it's checkbox checked or not (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCheckedByIndex($hWnd, $hItem, $iIndex [, $fCheck = True])\nSets whether an item has it's checkbox checked or not by it's index (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChildren($hWnd, $hItem [, $fFlag = True])\nSets whether the item children flag (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCut($hWnd, $hItem [, $fFlag = True])\nSets whether the item is drawn as if selected as part of a cut and paste operation (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetDropTarget($hWnd, $hItem [, $fFlag = True])\nSets whether the item is drawn as a drag and drop target (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetFocused($hWnd, $hItem [, $fFlag = True])\nSets whether the item appears to have focus (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetHeight($hWnd, $iHeight)\nSets the height of the each item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIcon($hWnd [, $hItem = 0 [, $sIconFile ="" [, $iIconID = 0 [, $iImageMode = 6]]]])\nSet an item icon (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetImageIndex($hWnd, $hItem, $iIndex)\nSets the index into image list for which image is displayed when a item is in its normal state (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIndent($hWnd, $iIndent)\nSets the width of indentation for a tree-view control and redraws the control to reflect the new width (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMark($hWnd, $hItem [, $fAfter = True])\nSets the insertion mark (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMarkColor($hWnd, $iColor)\nSets the color used to draw the insertion mark (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemHeight($hWnd, $hItem, $iIntegral)\nSets the height of an individual item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemParam($hWnd, $hItem, $iParam)\nSets the value specific to the item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetLineColor($hWnd, $vRGBColor)\nSets the line color (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetNormalImageList($hWnd, $hImageList)\nSets the normal image list for the control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetScrollTime($hWnd, $iTime)\nSets the maximum scroll time (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelected($hWnd, $hItem [, $fFlag = True])\nSets whether the item appears in the selected state (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelectedImageIndex($hWnd, $hItem, $iIndex)\nSets the selected image index (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetState($hWnd, $hItem [, $iState = 0 [, $iSetState = 0]])\nSet the state of the specified item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageIndex($hWnd, $hItem, $iIndex)\nSets the index into image list for the state image (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageList($hWnd, $hImageList)\nSets the state image list for the control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetText($hWnd [, $hItem = 0 [, $sText = ""]])\nSet the text of an item (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetTextColor($hWnd, $vRGBColor)\nSets the text color (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetToolTips($hWnd, $hToolTip)\nSets the handle to the child ToolTip control (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetUnicodeFormat($hWnd [, $iFormat = True])\nSets the Unicode character format flag (Requires: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Sort($hWnd)\nSorts the items (Requires: #include <GuiTreeView.au3>)
_GUIImageList_Add($hWnd, $hImage [, $hMask=0])\nAdds an image or images to an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_AddBitmap($hWnd, $sImage [, $sMask=""])\nAdds a bitmap to an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_AddIcon($hWnd, $sFile [, $iIndex=0 [, $fLarge = False]])\nAdds an icon to an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_AddMasked($hWnd, $hImage [, $iMask=0])\nAdds an image or images to an image list, generating a mask from the specified bitmap (Requires: #include <GuiImageList.au3>)
_GUIImageList_BeginDrag($hWnd, $iTrack, $iXHotSpot, $iYHotSpot)\nBegins dragging an image (Requires: #include <GuiImageList.au3>)
_GUIImageList_Copy($hWnd, $iSource, $iDestination)\nSource image is copied to the destination image's index (Requires: #include <GuiImageList.au3>)
_GUIImageList_Create([$iCX=16 [, $iCY=16 [, $iColor=4 [, $iOptions=0 [, $iInitial=4 [, $iGrow=4]]]]]])\nCreate an ImageList control (Requires: #include <GuiImageList.au3>)
_GUIImageList_Destroy($hWnd)\nDestroys an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_DestroyIcon($hIcon)\nDestroys an icon and frees any memory the icon occupied (Requires: #include <GuiImageList.au3>)
_GUIImageList_DragEnter($hWnd, $iX, $iY)\nDisplays the drag image at the specified position within the window (Requires: #include <GuiImageList.au3>)
_GUIImageList_DragLeave($hWnd)\nUnlocks the specified window and hides the drag image, allowing the window to be updated (Requires: #include <GuiImageList.au3>)
_GUIImageList_DragMove($iX, $iY)\nMoves the image that is being dragged during a drag-and-drop operation (Requires: #include <GuiImageList.au3>)
_GUIImageList_Draw($hWnd, $iIndex, $hDC, $iX, $iY [, $iStyle=0])\nDraws an image list item in the specified device context (Requires: #include <GuiImageList.au3>)
_GUIImageList_DrawEx($hWnd, $iIndex, $hDC, $iX, $iY [, $iDX = 0 [, $iDY = 0 [, $iRGBBk = 0xFFFFFFFF [, $iRGBFg = 0xFFFFFFFF [, $iStyle=0]]]]])\nDraws an image list item in the specified device context (Requires: #include <GuiImageList.au3>)
_GUIImageList_Duplicate($hWnd)\nCreates a duplicate of an existing image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_EndDrag()\nEnds a drag operation (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetBkColor($hWnd)\nRetrieves the current background color for an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetIcon($hWnd, $iIndex [, $iStyle = 0])\nCreates an icon from an image and mask in an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetIconHeight($hWnd)\nRetrieves the height of the images in an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetIconSize($hWnd)\nRetrieves the dimensions of images in an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetIconSizeEx($hWnd)\nRetrieves the dimensions of images in an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetIconWidth($hWnd)\nRetrieves the width of the images in an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetImageCount($hWnd)\nRetrieves the number of images in an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_GetImageInfoEx($hWnd, $iIndex)\nRetrieves information about an image (Requires: #include <GuiImageList.au3>)
_GUIImageList_Remove($hWnd [, $iIndex = -1])\nRemove Image(s)\nfrom the ImageList (Requires: #include <GuiImageList.au3>)
_GUIImageList_ReplaceIcon($hWnd, $iIndex, $hIcon)\nReplaces an image with an icon or cursor (Requires: #include <GuiImageList.au3>)
_GUIImageList_SetBkColor($hWnd, $iClrBk)\nSets the background color for an image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_SetIconSize($hWnd, $iCX, $iCY)\nSets the dimensions of images in an image list and removes all images from the list (Requires: #include <GuiImageList.au3>)
_GUIImageList_SetImageCount($hWnd, $iNewCount)\nResizes an existing image list (Requires: #include <GuiImageList.au3>)
_GUIImageList_Swap($hWnd, $iSource, $iDestination)\nSource image is copied to the destination image's index (Requires: #include <GuiImageList.au3>)
_GUIScrollBars_EnableScrollBar($hWnd [, $wSBflags = $SB_BOTH [, $wArrows = $ESB_ENABLE_BOTH]])\nEnable/Disable scrollbar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarInfoEx($hWnd, $idObject)\nRetrieves information about the specified scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRect($hWnd, $idObject)\nRetrieves coordinates of the scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRGState($hWnd, $idObject)\nRetrieves the state of a scroll bar component (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYLineButton($hWnd, $idObject)\nRetrieves the Height or width of the thumb (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbBottom($hWnd, $idObject)\nRetrieves the Position of the bottom or right of the thumb (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbTop($hWnd, $idObject)\nRetrieves the Position of the top or left of the thumb (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfo($hWnd, $fnBar, ByRef $tSCROLLINFO)\nRetrieves the parameters of a scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoEx($hWnd, $fnBar)\nRetrieves the parameters of a scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMax($hWnd, $fnBar)\nRetrieves the maximum scrolling position (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMin($hWnd, $fnBar)\nRetrieves the minimum scrolling position (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPage($hWnd, $fnBar)\nRetrieves the page size (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPos($hWnd, $fnBar)\nRetrieves the position of the scroll box (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoTrackPos($hWnd, $fnBar)\nRetrieves the immediate position of a scroll box that the user is dragging (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollPos($hWnd, $nBar)\nRetrieves the current position of the scroll box (thumb)\nin the specified scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollRange($hWnd, $nBar)\nRetrieves the current minimum and maximum scroll box (thumb)\npositions for the specified scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_Init($hWnd [, $iHMax = -1 [, $ivMax = -1]])\nInitialize the scrollbars for the window (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_ScrollWindow($hWnd, $iXAmount, $iYAmount)\nScrolls the contents of the specified window's client area (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfo($hWnd, $fnBar, $tSCROLLINFO [, $fRedraw = True])\nSets the parameters of a scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMax($hWnd, $fnBar, $nMax)\nSets the maximum scrolling position (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMin($hWnd, $fnBar, $nMin)\nSets the minimum scrolling position (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPage($hWnd, $fnBar, $nPage)\nSets the page size (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPos($hWnd, $fnBar, $nPos)\nSets the position of the scroll box (thumb)\nin the specified scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollRange($hWnd, $nBar, $nMinPos, $nMaxPos)\nSets the minimum and maximum scroll box positions for the specified scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIScrollBars_ShowScrollBar($hWnd, $nBar [, $fShow = True])\nShows or hides the specified scroll bar (Requires: #include <GuiScrollBars.au3>)
_GUIToolTip_Activate($hWnd [, $fActivate = True])\nActivates or deactivates the control (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_AddTool($hTool, $hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = 8 [, $iParam = 0]]]]]]])\nRegisters a tool with the control (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_AdjustRect($hWnd, ByRef $tRect [, $fLarger = True])\nCalculates the text display rectangle from the window rectangle (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_BitsToTTF($iFlags)\nEncode user bit flags to $TTF_ flags (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_Create($hWnd [, $iStyle = 0x00000003])\nCreates a ToolTip control (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_DelTool($hWnd, $hTool [, $iID = 0])\nRemoves a tool (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_Destroy(ByRef $hWnd)\nDelete the ToolTip control (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_EnumTools($hWnd, $iIndex)\nRetrieves information about the current tool (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleHeight($hWnd, $hTool, $iID [, $iFlags = 48])\nReturns the height of the control (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleSize($hWnd, $hTool, $iID [, $iFlags = 0x000000A0])\nReturns the width and height of the control (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleWidth($hWnd, $hTool, $iID [, $iFlags = 48])\nReturns the width of a ToolTip control (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetCurrentTool($hWnd)\nRetrieves information for the current tool (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetDelayTime($hWnd, $iDuration)\nRetrieves the initial, pop-up or reshow durations (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetMargin($hWnd)\nRetrieves the top, left, bottom, and right margins (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetMarginEx($hWnd)\nRetrieves the top, left, bottom, and right margins (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetMaxTipWidth($hWnd)\nRetrieves the maximum width for a ToolTip window (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetText($hWnd, $hTool, $iID)\nRetrieves the text (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipBkColor($hWnd)\nRetrieves the background color (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipTextColor($hWnd)\nRetrieves the text color (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleBitMap($hWnd)\nRetrieves the title bitmap icon (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleText($hWnd)\nRetrieve the title (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolCount($hWnd)\nRetrieves the tool count (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolInfo($hWnd, $hTool, $iID)\nRetrieves the information about a specific tool (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_HitTest($hWnd, $hTool, $iX, $iY)\nRetrieves the information that a ToolTip control maintains about a tool (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_NewToolRect($hWnd, $hTool, $iID, $iLeft, $iTop, $iRight, $iBottom)\nSets a new bounding rectangle for a tool (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_Pop($hWnd)\nRemoves a displayed ToolTip from view (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_PopUp($hWnd)\nCauses the ToolTip to display at the coordinates of the last mouse message (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetDelayTime($hWnd, $iDuration, $iTime)\nSets the initial, pop-up, and reshow durations (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetMargin($hWnd, $iLeft, $iTop, $iRight, $iBottom)\nSets the top, left, bottom, and right margins (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetMaxTipWidth($hWnd, $iWidth)\nSets the maximum width for a ToolTip window (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipBkColor($hWnd, $iColor)\nSets the background color (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipTextColor($hWnd, $iColor)\nSets the text color (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetTitle($hWnd, $sTitle [, $iIcon = 0])\nAdds a standard icon and title string (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetToolInfo($hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = 8 [, $iParam = 0]]]]]]])\nSets the information for a tool (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_SetWindowTheme($hWnd, $sStyle)\nSets the visual style (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_ToolExists($hWnd)\nDetermines whether a current tool exists (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_ToolToArray($hWnd, ByRef $tToolInfo, $iError)\nTransfers a ToolInfo structure to an array (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_TrackActivate($hWnd [, $fActivate = True [, $hTool = 0 [, $iID = 0]]])\nActivates or deactivates a tracking ToolTip (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_TrackPosition($hWnd, $iX, $iY)\nSets the position of a tracking ToolTip (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_TTFToBits($iFlags)\nDecode $TTF_flags to user bit flags (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_Update($hWnd)\nForces the current tool to be redrawn (Requires: #include <GuiToolTip.au3>)
_GUIToolTip_UpdateTipText($hWnd, $hTool, $iID, $sText)\nSets the ToolTip text for a tool (Requires: #include <GuiToolTip.au3>)
_HexToString($strHex)\nConvert a hex string to a string. (Requires: #include <String.au3>)
_IE_Example([$s_module = "basic"])\nDisplay a new browser window pre-loaded with documents to be used in IE.au3 examples or your own testing (Requires: #include <IE.au3> )
_IE_Introduction([$s_module = "basic"])\nDisplay introductory information about IE.au3 in a new browser window (Requires: #include <IE.au3> )
_IE_VersionInfo()\nReturns an array of information about the IE.au3 version (Requires: #include <IE.au3> )
_IEAction(ByRef $o_object, $s_action)\nPerform any of a set of simple actions on the Browser. (Requires: #include <IE.au3> )
_IEAttach($s_string [, $s_mode = "Title" [, $i_instance = 1]])\nAttach to the specified instance of Internet Explorer where the search string sub-string matches (based on the selected mode). (Requires: #include <IE.au3> )
_IEBodyReadHTML(ByRef $o_object)\nReturns the HTML inside the &lt;body&gt; tag of the document. (Requires: #include <IE.au3> )
_IEBodyReadText(ByRef $o_object)\nReturns the Text inside the &lt;body&gt; tag of the document. (Requires: #include <IE.au3> )
_IEBodyWriteHTML(ByRef $o_object, $s_html)\nReplaces the HTML inside the &lt;body&gt; tag of the document. (Requires: #include <IE.au3> )
_IECreate([$s_Url = "about:blank" [, $f_tryAttach = 0 [, $f_visible = 1 [, $f_wait = 1 [, $f_takeFocus = 1]]]]])\nCreate an Internet Explorer Browser Window. (Requires: #include <IE.au3> )
_IECreateEmbedded()\nCreate a Webbrowser object suitable for embedding in an AutoIt GUI with GuiCtrlCreateObj(). (Requires: #include <IE.au3> )
_IEDocGetObj(ByRef $o_object)\nGiven any DOM object, returns a reference to the associated document object. (Requires: #include <IE.au3> )
_IEDocInsertHTML(ByRef $o_object, $s_string [, $s_where = "beforeend"])\nInserts HTML Text in or around an element. (Requires: #include <IE.au3> )
_IEDocInsertText(ByRef $o_object, $s_string [, $s_where = "beforeend"])\nInserts Text in or around an element. (Requires: #include <IE.au3> )
_IEDocReadHTML(ByRef $o_object)\nReturns the full HTML source of a document. (Requires: #include <IE.au3> )
_IEDocWriteHTML(ByRef $o_object, $s_html)\nReplaces the HTML for the entire document. (Requires: #include <IE.au3> )
_IEErrorHandlerDeRegister()\nDisable a registered user COM error handler (Requires: #include <IE.au3> )
_IEErrorHandlerRegister([$s_functionName = "__IEInternalErrorHandler"])\nRegister and enable a user COM error handler (Requires: #include <IE.au3> )
_IEErrorNotify([$f_notify = -1])\nSpecifies whether IE.au3 automatically notifies of Warnings and Errors (to the console)\n(Requires: #include <IE.au3> )
_IEFormElementCheckBoxSelect(ByRef $o_object, $s_string [, $s_name = "" [, $f_select = 1 [, $s_mode = "byValue" [, $f_fireEvent = 1]]]])\nSet the value of a specified form element. (Requires: #include <IE.au3> )
_IEFormElementGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object variable representing all Form Elements within a given Form. (Requires: #include <IE.au3> )
_IEFormElementGetObjByName(ByRef $o_object, $s_name [, $i_index = 0])\nReturns an object reference to a Form Element by name. (Requires: #include <IE.au3> )
_IEFormElementGetValue(ByRef $o_object)\nReturns the value of a given Form Element. (Requires: #include <IE.au3> )
_IEFormElementOptionSelect(ByRef $o_object, $s_string [, $f_select = 1 [, $s_mode = "byValue" [, $f_fireEvent = 1]]])\nSet the value of a specified form element. (Requires: #include <IE.au3> )
_IEFormElementRadioSelect(ByRef $o_object, $s_string , $s_name [, $f_select = 1 [, $s_mode = "byValue" [, $f_fireEvent = 1]]])\nSet the value of a specified form element. (Requires: #include <IE.au3> )
_IEFormElementSetValue(ByRef $o_object, $s_newvalue [, $f_fireEvent = 1])\nSet the value of a specified Form Element. (Requires: #include <IE.au3> )
_IEFormGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object variable representing the Forms in the document or a single form by index. (Requires: #include <IE.au3> )
_IEFormGetObjByName(ByRef $o_object, $s_name [, $i_index = 0])\nReturns an object reference to a Form by name. (Requires: #include <IE.au3> )
_IEFormImageClick(ByRef $o_object, $s_linkText [, $s_mode = "src" [, $i_index = 0 [, $f_wait = 1]]])\nSimulate a mouse click on an &lt;input type=image&gt;.  Match by sub-string match of alt text, name or src. (Requires: #include <IE.au3> )
_IEFormReset(ByRef $o_object)\nReset a specified Form setting the values back to their loaded defaults. (Requires: #include <IE.au3> )
_IEFormSubmit(ByRef $o_object [, $f_wait = 1])\nSubmit a specified Form. (Requires: #include <IE.au3> )
_IEFrameGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object containing the frames in a FrameSet or the iFrames on a normal page or a single Frame or iFrame by index. (Requires: #include <IE.au3> )
_IEFrameGetObjByName(ByRef $o_object, $s_name)\nReturns an object reference to a Frame or iFrame by name. (Requires: #include <IE.au3> )
_IEGetObjById(ByRef $o_object, $s_Id)\nReturns an object variable by id or name. (Requires: #include <IE.au3> )
_IEGetObjByName(ByRef $o_object, $s_Id [, $i_index = 0])\nReturns an object variable by name or id. (Requires: #include <IE.au3> )
_IEHeadInsertEventScript(ByRef $o_object, $s_htmlFor, $s_event, $s_script)\nInserts a Javascript into the Head of the document. (Requires: #include <IE.au3> )
_IEImgClick(ByRef $o_object, $s_linkText [, $s_mode = "src" [, $i_index = 0 [, $f_wait = 1]]])\nSimulate a mouse click on an image.  Match by sub-string match of alt text, name, or src. (Requires: #include <IE.au3> )
_IEImgGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object variable representing the IMG tags in the document or a single image by index. (Requires: #include <IE.au3> )
_IEIsFrameSet(ByRef $o_object)\nChecks to see if the specified Window contains a FrameSet. (Requires: #include <IE.au3> )
_IELinkClickByIndex(ByRef $o_object, $i_index [, $f_wait = 1])\nSimulate a mouse click on a link by 0-based index (in source order). (Requires: #include <IE.au3> )
_IELinkClickByText(ByRef $o_object, $s_linkText [, $i_index = 0 [, $f_wait = 1]])\nSimulate a mouse click on a link with text sub-string matching the string provided. (Requires: #include <IE.au3> )
_IELinkGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object containing all links in the document or a single link by index. (Requires: #include <IE.au3> )
_IELoadWait(ByRef $o_object [, $i_delay = 0 [, $i_timeout = -1]])\nWait for a browser page load to complete before returning. (Requires: #include <IE.au3> )
_IELoadWaitTimeout([$i_timeout = -1])\nRetrieve or set the current value in milliseconds _IELoadWait will try before timing out. (Requires: #include <IE.au3> )
_IENavigate(ByRef $o_object, $s_url [, $f_wait = 1])\nDirects an existing browser window to navigate to the specified URL. (Requires: #include <IE.au3> )
_IEPropertyGet(ByRef $o_object, $s_property)\nReturns a select property of the Browser or DOM element. (Requires: #include <IE.au3> )
_IEPropertySet(ByRef $o_object, $s_property, $newvalue)\nSet a select property of the Browser or DOM element. (Requires: #include <IE.au3> )
_IEQuit(ByRef $o_object)\nClose the browser and remove the object reference to it. (Requires: #include <IE.au3> )
_IETableGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object variable representing all the tables in a document or a single table by index. (Requires: #include <IE.au3> )
_IETableWriteToArray(ByRef $o_object [, $f_transpose])\nReads the contents of a Table into an array. (Requires: #include <IE.au3> )
_IETagNameAllGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object all elements in the document or document hierarchy in source order or a single element by index. (Requires: #include <IE.au3> )
_IETagNameGetCollection(ByRef $o_object, $s_TagName [, $i_index = -1])\nReturns a collection object of all elements in the object with the specified TagName or a single element by index. (Requires: #include <IE.au3> )
_Iif($fTest, $vTrueVal, $vFalseVal)\nPerform a boolean test within an expression. (Requires: #include <Misc.au3>)
_INetExplorerCapable($s_IEString)\nConverts a string to IE(Internet Explorer)\ncapable line (Requires: #include <Inet.au3>)
_INetGetSource($s_URL [, $bString = 'True'])\nGets the source from an URL without writing a temp file. (Requires: #include <Inet.au3>)
_INetMail($s_MailTo, $s_MailSubject, $s_MailBody)\nOpens default user's mail client with given address, subject, and body. (Requires: #include <Inet.au3>)
_INetSmtpMail($s_SmtpServer, $s_FromName, $s_FromAddress, $s_ToAddress [,$s_Subject [,$as_Body [,$s_helo [,$s_first [,$b_trace]]]]])\nSends an email without using an external email program. (Requires: #include <Inet.au3>)
_IsPressed($sHexKey [, $vDLL = 'user32.dll'])\nCheck if key has been pressed (Requires: #include <Misc.au3>)
_MathCheckDiv($i_NumA, $i_NumB)\nChecks if NumA is divisable by NumB (Requires: #include <Math.au3>)
_Max($nNum1, $nNum2)\nEvaluates which of the two numbers is higher. (Requires: #include <Math.au3>)
_MemGlobalAlloc($iBytes [, $iFlags = 0])\nAllocates the specified number of bytes from the heap (Requires: #include <Memory.au3>)
_MemGlobalFree($hMem)\nFrees the specified global memory object and invalidates its handle (Requires: #include <Memory.au3>)
_MemGlobalLock($hMem)\nLocks a global memory object and returns a pointer to the first byte of the object's memory block (Requires: #include <Memory.au3>)
_MemGlobalSize($hMem)\nRetrieves the current size of the specified global memory object (Requires: #include <Memory.au3>)
_MemGlobalUnlock($hMem)\nDecrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE (Requires: #include <Memory.au3>)
_MemMoveMemory($pSource, $pDest, $iLength)\nMoves memory either forward or backward, aligned or unaligned (Requires: #include <Memory.au3>)
_MemVirtualAlloc($pAddress, $iSize, $iAllocation, $iProtect)\nReserves or commits a region of pages in the virtual address space of the calling process (Requires: #include <Memory.au3>)
_MemVirtualAllocEx($hProcess, $pAddress, $iSize, $iAllocation, $iProtect)\nReserves a region of memory within the virtual address space of a specified process (Requires: #include <Memory.au3>)
_MemVirtualFree($pAddress, $iSize, $iFreeType)\nReleases a region of pages within the virtual address space of a process (Requires: #include <Memory.au3>)
_MemVirtualFreeEx($hProcess, $pAddress, $iSize, $iFreeType)\nReleases a region of pages within the virtual address space of a process (Requires: #include <Memory.au3>)
_Min($nNum1, $nNum2)\nEvaluates which of the two numbers is lower. (Requires: #include <Math.au3>)
_MouseTrap([$iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0]]]])\nConfine the Mouse Cursor to specified coords. (Requires: #include <Misc.au3>)
_NamedPipes_CallNamedPipe($sPipeName, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize, ByRef $iRead [, $iTimeOut = 0])\nPerforms a read/write operation on a named pipe (Requires: #include <NamedPipes.au3>)
_NamedPipes_ConnectNamedPipe($hNamedPipe [, $pOverlapped = 0])\nEnables a named pipe server process to wait for a client process to connect (Requires: #include <NamedPipes.au3>)
_NamedPipes_CreateNamedPipe($sName [, $iAccess = 2 [, $iFlags = 2 [, $iACL = 0 [, $iType = 1 [, $iRead = 1 [, $iWait = 0 [, $iMaxInst = 25 [, $iOutBufSize = 4096 [, $iInpBufSize = 4096 [, $iDefTimeout = 5000 [, $pSecurity = 0]]]]]]]]]]])\nCreates an instance of a named pipe (Requires: #include <NamedPipes.au3>)
_NamedPipes_CreatePipe(ByRef $hReadPipe, ByRef $hWritePipe [, $tSecurity = 0 [, $iSize = 0]])\nCreates an anonymous pipe (Requires: #include <NamedPipes.au3>)
_NamedPipes_DisconnectNamedPipe($hNamedPipe)\nDisconnects the server end of a named pipe instance from a client process (Requires: #include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeHandleState($hNamedPipe)\nRetrieves information about a specified named pipe (Requires: #include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeInfo($hNamedPipe)\nRetrieves information about the specified named pipe (Requires: #include <NamedPipes.au3>)
_NamedPipes_PeekNamedPipe($hNamedPipe)\nCopies data from a pipe into a buffer without removing it from the pipe (Requires: #include <NamedPipes.au3>)
_NamedPipes_SetNamedPipeHandleState($hNamedPipe, $iRead, $iWait [, $iBytes = 0 [, $iTimeOut = 0]])\nSets the read mode and the blocking mode of the specified named pipe (Requires: #include <NamedPipes.au3>)
_NamedPipes_TransactNamedPipe($hNamedPipe, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize [, $pOverlapped = 0])\nReads and writes to a named pipe in one network operation (Requires: #include <NamedPipes.au3>)
_NamedPipes_WaitNamedPipe($sPipeName [, $iTimeOut = 0])\nWaits for an instance of a named pipe to become available (Requires: #include <NamedPipes.au3>)
_Net_Share_ConnectionEnum($sServer, $sQualifier)\nLists all connections made to a shared resource (Requires: #include <NetShare.au3>)
_Net_Share_FileClose($sServer, $iFileID)\nForces a resource to close (Requires: #include <NetShare.au3>)
_Net_Share_FileEnum([$sServer = "" [, $sBaseName = "" [, $sUserName = ""]]])\nReturns information about open files on a server (Requires: #include <NetShare.au3>)
_Net_Share_FileGetInfo($sServer, $iFileID)\nRetrieves information about a particular opening of a server resource (Requires: #include <NetShare.au3>)
_Net_Share_PermStr($iPerm)\nReturns the string representation of a resource's permissions (Requires: #include <NetShare.au3>)
_Net_Share_ResourceStr($iResource)\nReturns the string representation of a resource (Requires: #include <NetShare.au3>)
_Net_Share_SessionDel([$sServer = "" [, $sClientName = "" [, $sUserName = ""]]])\nEnds a network session between a server and a workstation (Requires: #include <NetShare.au3>)
_Net_Share_SessionEnum([$sServer = "" [, $sClientName = "" [, $sUserName = ""]]])\nProvides information about sessions established on a server (Requires: #include <NetShare.au3>)
_Net_Share_SessionGetInfo($sServer, $sClientName, $sUserName)\nRetrieves information about a session established between a server and workstation (Requires: #include <NetShare.au3>)
_Net_Share_ShareAdd($sServer, $sShare, $iType, $sPath [, $sComment = "" [, $iMaxUses = -1]])\nShares a server resource (Requires: #include <NetShare.au3>)
_Net_Share_ShareCheck($sServer, $sShare)\nChecks whether or not a server is sharing a device (Requires: #include <NetShare.au3>)
_Net_Share_ShareDel($sServer, $sShare)\nDeletes a share name from a server's list of shared resources (Requires: #include <NetShare.au3>)
_Net_Share_ShareEnum([$sServer = ""])\nRetrieves information about each shared resource on a server (Requires: #include <NetShare.au3>)
_Net_Share_ShareGetInfo($sServer, $sShare)\nRetrieves information about a particular shared resource on a server (Requires: #include <NetShare.au3>)
_Net_Share_ShareSetInfo($sServer, $sShare, $sComment, $iMaxUses)\nShares a server resource (Requires: #include <NetShare.au3>)
_Net_Share_StatisticsGetSvr([$sServer = ""])\nRetrieves operating statistics for a server (Requires: #include <NetShare.au3>)
_Net_Share_StatisticsGetWrk([$sWorkStation = ""])\nRetrieves operating statistics for a workstation (Requires: #include <NetShare.au3>)
_Now()\nReturns the current Date and Time in PC's format. (Requires: #include <Date.au3>)
_NowCalc()\nReturns the current Date and Time in format YYYY/MM/DD HH:MM:SS for use in date calculations. (Requires: #include <Date.au3>)
_NowCalcDate()\nReturns the current Date in format YYYY/MM/DD. (Requires: #include <Date.au3>)
_NowDate()\nReturns the current Date in the Pc's format. (Requires: #include <Date.au3>)
_NowTime([$sType = 3])\nReturns the current Time in the requested format. (Requires: #include <Date.au3>)
_PathFull($sRelativePath [, $sBasePath = @WorkingDir])\nCreates a path based on the relative path you provide. The newly created absolute path is returned (Requires: #include <File.au3>)
_PathGetRelative($sFrom, $sTo)\nReturns the relative path to a directory (Requires: #include <File.au3>)
_PathMake($szDrive, $szDir, $szFName, $szExt)\nCreates a path from drive, directory, file name and file extension parts. Not all parts must be passed. (Requires: #include <File.au3>)
_PathSplit($szPath, ByRef $szDrive, ByRef $szDir, ByRef $szFName, ByRef $szExt)\nSplits a path into the drive, directory, file name and file extension parts. An empty string is set if a part is missing. (Requires: #include <File.au3>)
_ProcessGetName($iPID)\nReturns a string containing the process name that belongs to a given PID. (Requires: #include <Process.au3>)
_ProcessGetPriority($i_PID)\nGet the  priority of an open process (Requires: #include <Process.au3>)
_Radian($nDegrees)\nConverts degrees to radians. (Requires: #include <Math.au3>)
_ReplaceStringInFile($szFileName, $szSearchString, $szReplaceString [, $fCaseness = 0 [, $fOccurance = 1]])\nReplaces a string with another string in the given text file (binary won't work!)\n(Requires: #include <File.au3>)
_RunDos($sCommand)\nExecutes a DOS command in a hidden command window. (Requires: #include <Process.au3>)
_ScreenCapture_Capture([$sFileName = "" [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $fCursor = True]]]]]])\nCaptures a region of the screen (Requires: #include <ScreenCapture.au3>)
_ScreenCapture_CaptureWnd($sFileName, $hWnd [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $fCursor = True]]]]])\nCaptures a screen shot of a specified window or controlID (Requires: #include <ScreenCapture.au3>)
_ScreenCapture_SaveImage($sFileName, $hBitmap [, $fFreeBmp = True])\nSaves an image to file (Requires: #include <ScreenCapture.au3>)
_ScreenCapture_SetBMPFormat($iFormat)\nSets the bit format that will be used for BMP screen captures (Requires: #include <ScreenCapture.au3>)
_ScreenCapture_SetJPGQuality($iQuality)\nSets the quality level that will be used for JPEG screen captures (Requires: #include <ScreenCapture.au3>)
_ScreenCapture_SetTIFColorDepth($iDepth)\nSets the color depth used for TIFF screen captures (Requires: #include <ScreenCapture.au3>)
_ScreenCapture_SetTIFCompression($iCompress)\nSets the compression used for TIFF screen captures (Requires: #include <ScreenCapture.au3>)
_Security__AdjustTokenPrivileges($hToken, $fDisableAll, $pNewState, $iBufferLen [, $pPrevState = 0 [, $pRequired = 0]])\nEnables or disables privileges in the specified access token (Requires: #include <Security.au3>)
_Security__CreateProcessWithToken($hToken, $iLogonFlags, $sCommandLine, $iCreationFlags, $sCurDir, $tSTARTUPINFO, $tPROCESS_INFORMATION)\nCreates a new process and its primary thread running in the security context of the specified token (Requires: #include <Security.au3>)
_Security__DuplicateTokenEx($hExistingToken, $iDesiredAccess, $iImpersonationLevel, $iTokenType)\nCreates a new access token that duplicates an existing token (Requires: #include <Security.au3>)
_Security__GetAccountSid($sAccount [, $sSystem = ""])\nRetrieves the security identifier (SID)\nfor an account (Requires: #include <Security.au3>)
_Security__GetLengthSid($pSID)\nReturns the length, in bytes, of a valid SID (Requires: #include <Security.au3>)
_Security__GetTokenInformation($hToken, $iClass)\nRetrieves a specified type of information about an access token (Requires: #include <Security.au3>)
_Security__ImpersonateSelf([$iLevel = $SECURITYIMPERSONATION])\nObtains an access token that impersonates the calling process security context (Requires: #include <Security.au3>)
_Security__IsValidSid($pSID)\nValidates a SID (Requires: #include <Security.au3>)
_Security__LookupAccountName($sAccount [, $sSystem = ""])\nRetrieves a security identifier (SID)\nfor the account and the name of the domain (Requires: #include <Security.au3>)
_Security__LookupAccountSid($vSID [, $sSystem = ""])\nRetrieves the name of the account for a SID (Requires: #include <Security.au3>)
_Security__LookupPrivilegeValue($sSystem, $sName)\nRetrieves the locally unique identifier (LUID)\nfor a privilege value in form of 64bit integer (Requires: #include <Security.au3>)
_Security__OpenProcessToken($hProcess, $iAccess)\nReturns the access token associated with a process (Requires: #include <Security.au3>)
_Security__OpenThreadToken($iAccess [, $hThread = 0 [, $fOpenAsSelf = False]])\nOpens the access token associated with a thread (Requires: #include <Security.au3>)
_Security__OpenThreadTokenEx($iAccess [, $hThread = 0 [, $fOpenAsSelf = False]])\nOpens the access token associated with a thread, impersonating the client's security context if required (Requires: #include <Security.au3>)
_Security__SetPrivilege($hToken, $sPrivilege, $fEnable)\nEnables or disables a local token privilege (Requires: #include <Security.au3>)
_Security__SetTokenInformation($hToken, $iTokenInformation, $vTokenInformation, $iTokenInformationLength)\nSets various types of information for a specified access token (Requires: #include <Security.au3>)
_Security__SidToStringSid($pSID)\nConverts a binary SID to a string (Requires: #include <Security.au3>)
_Security__SidTypeStr($iType)\nConverts a Sid type to string form (Requires: #include <Security.au3>)
_Security__StringSidToSid($sSID)\nConverts a String SID to a binary SID (Requires: #include <Security.au3>)
_SendMessage($hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lparam"]]]]]])\nWrapper for commonly used Dll Call (Requires: #include <SendMessage.au3>)
_SendMessageA($hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lparam"]]]]]])\nWrapper for commonly used Dll Call (Force Ansi Call)\n(Requires: #include <SendMessage.au3>)
_SetDate($iDay [, $iMonth = 0 [, $iYear = 0]])\nSets the current date of the system (Requires: #include <Date.au3>)
_SetTime($iHour, $iMinute [, $iSecond = 0])\nSets the current time of the system (Requires: #include <Date.au3>)
_Singleton($sOccurenceName [, $iFlag = 0])\nEnforce a design paradigm where only one instance of the script may be running. (Requires: #include <Misc.au3>)
_SoundClose($aSnd_id)\nCloses a sound previously opened with _SoundOpen. (Requires: #include <Sound.au3>)
_SoundLength($aSnd_id [, $iMode])\nReturns the length of the soundfile. (Requires: #include <Sound.au3>)
_SoundOpen($sFile)\nOpens a sound file for use with other _Sound functions. (Requires: #include <Sound.au3>)
_SoundPause($aSnd_id)\nPause a playing sound. (Requires: #include <Sound.au3>)
_SoundPlay($aSnd_id [, $iWait])\nPlay a sound file. (Requires: #include <Sound.au3>)
_SoundPos($aSnd_id [, $iMode])\nReturns the current position of the sound. (Requires: #include <Sound.au3>)
_SoundResume($aSnd_id)\nResume a paused sound. (Requires: #include <Sound.au3>)
_SoundSeek(ByRef $aSnd_id, $iHour, $iMin, $iSec)\nSeeks the sound to the specified position  (Requires: #include <Sound.au3>)
_SoundStatus($aSnd_id)\nReturns the status of the sound  (Requires: #include <Sound.au3>)
_SoundStop(ByRef $aSnd_id)\nStop a playing sound. (Requires: #include <Sound.au3>)
_SQLite_Changes([$hDB])\nReturns the number of database rows that were changed by the most recently completed statement with this connection (Requires: #include <SQLite.au3>)
_SQLite_Close([$hDB])\nClose an open database. (Requires: #include <SQLite.au3>)
_SQLite_Display2DResult($aResult [, $iCellWidth = 0 [, $bReturn = 0]])\nReturns or prints to Console a formated display of a 2Dimensional array (Requires: #include <SQLite.au3>)
_SQLite_Encode($vData)\nBinary encodes a string, number or binary data for use as BLOB in SQLite statements. (Requires: #include <SQLite.au3>)
_SQLite_ErrCode([$hDB])\nReturns last error code (numeric)\n(Requires: #include <SQLite.au3>)
_SQLite_ErrMsg([$hDB])\nReturns a string describing in english the error condition for the most recent sqlite3_* API call (Requires: #include <SQLite.au3>)
_SQLite_Escape($sString)\nEscapes a string or number for use as TEXT in SQLite statements (Requires: #include <SQLite.au3>)
_SQLite_Exec($hDB, $sSQL [, $sCallBack])\nExecutes a SQLite query, does not handle results. (Requires: #include <SQLite.au3>)
_SQLite_FastEncode($vData)\nFast encodes binary data (exclusively)\nfor use in SQLite statements (Requires: #include <SQLite.au3>)
_SQLite_FastEscape($sString)\nFast escapes a string or number for use as TEXT in SQLite statements (Requires: #include <SQLite.au3>)
_SQLite_FetchData($hQuery, ByRef $aRow [, $fBinary = False [, $fDoNotFinalize = False]])\nFetches 1 row of data from a _SQLite_Query()\nbased query (Requires: #include <SQLite.au3>)
_SQLite_FetchNames($hQuery, ByRef $aNames)\nRead out the Column names of a _SQLite_Query()\nbased query (Requires: #include <SQLite.au3>)
_SQLite_GetTable($hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1])\nPasses Out a 1Dimensional Array Containing Tablenames and Data of Executed Query. (Requires: #include <SQLite.au3>)
_SQLite_GetTable2d($hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1 [, $fSwichDimensions = False]])\nPasses out a 2Dimensional array containing column names and data of executed query (Requires: #include <SQLite.au3>)
_SQLite_LastInsertRowID([$hDB])\nReturns the ROWID of the most recent insert in the database by this connection (Requires: #include <SQLite.au3>)
_SQLite_LibVersion()\nReturns the version number of the library (Requires: #include <SQLite.au3>)
_SQLite_Open([$sDatabase_Filename = ":memory:" [,$iAccessMode [,$iEncoding]]])\nOpens/creates a SQLite database. (Requires: #include <SQLite.au3>)
_SQLite_Query($hDB, $sSQL, ByRef $hQuery)\nPrepares a SQLite Query (Requires: #include <SQLite.au3>)
_SQLite_QueryFinalize($hQuery)\nFinalizes an _SQLite_Query()\nbased query. The query is interrupted. (Requires: #include <SQLite.au3>)
_SQLite_QueryReset($hQuery)\nReset a _SQLite_Query()\nbased query (Requires: #include <SQLite.au3>)
_SQLite_QuerySingleRow($hDB, $sSQL, ByRef $aRow)\nRead out the first row of the result from the specified query. (Requires: #include <SQLite.au3>)
_SQLite_SafeMode($fSafeModeState)\nDisable or Enable Safe mode (Requires: #include <SQLite.au3>)
_SQLite_SetTimeout([$hDB = -1 [, $iTimeout = 1000]])\nSets timeout for busy handler (Requires: #include <SQLite.au3>)
_SQLite_Shutdown()\nUnloads SQLite.dll (Requires: #include <SQLite.au3>)
_SQLite_SQLiteExe($sDatabaseFile, $sInput, ByRef $sOutput [, $sSQLiteExeFilename = "SQLite3.exe" [, $fDebug = False]])\nExecutes commands in SQLite3.exe (Requires: #include <SQLite.au3>)
_SQLite_Startup([$sDll_Filename = "sqlite3.dll" [, $bUTF8ErrorMsg = False [, $bForceLocal = 0 [, $sPrintCallback = __SQLite_ConsoleWrite()]]]])\nLoads SQLite3.dll (Requires: #include <SQLite.au3>)
_SQLite_TotalChanges([$hDB])\nReturns number of all changes (including via triggers and foreign keys)\nfrom start of connection (Requires: #include <SQLite.au3>)
_StringBetween($s_String, $s_Start, $s_End [, $v_Case = -1])\nReturns the string between the start search string and the end search string. (Requires: #include <String.au3>)
_StringEncrypt($i_Encrypt, $s_EncryptText, $s_EncryptPassword [, $i_EncryptLevel = 1])\nAn RC4 based string encryption function. (Requires: #include <String.au3>)
_StringExplode($sString, $sDelimiter [, $iLimit])\nSplits up a string into substrings depending on the given delimiters as PHP Explode v5. (Requires: #include <String.au3>)
_StringInsert($s_String, $s_InsertString, $i_Position)\nInserts a string within another string. (Requires: #include <String.au3>)
_StringProper($s_String)\nChanges a string to proper case, same a =Proper function in Excel (Requires: #include <String.au3>)
_StringRepeat($sString, $iRepeatCount)\nRepeats a string a specified number of times. (Requires: #include <String.au3>)
_StringReverse($s_String)\nReverses the contents of the specified string. (Requires: #include <String.au3>)
_StringToHex($strChar)\nConvert a string to a hex string. (Requires: #include <String.au3>)
_TCPIpToName($sIp [,$iOption = 0 [, $hDll_Ws2_32 = "Ws2_32.dll"]])\nResolves IP address to Hostname(s)\n(Requires: #include <Inet.au3>)
_TempFile([$s_DirectoryName = @TempDir [, $s_FilePrefix = "~" [, $s_FileExtension = ".tmp" [, $i_RandomLength = 7]]]])\nGenerate a name for a temporary file. The file is guaranteed not to exist yet. (Requires: #include <File.au3>)
_TicksToTime($iTicks, ByRef $iHours, ByRef $iMins, ByRef $iSecs)\nConverts the specified tick amount to hours, minutes and seconds. (Requires: #include <Date.au3>)
_Timer_Diff($iTimeStamp)\nReturns the difference in time from a previous call to _Timer_Init (Requires: #include <Timers.au3>)
_Timer_GetIdleTime()\nReturns the number of ticks since last user activity (i.e. KYBD/Mouse)\n(Requires: #include <Timers.au3>)
_Timer_GetTimerID($iwParam)\nReturns the Timer ID from $iwParam (Requires: #include <Timers.au3>)
_Timer_Init()\nReturns a timestamp (in milliseconds). (Requires: #include <Timers.au3>)
_Timer_KillAllTimers($hWnd)\nDestroys all the timers (Requires: #include <Timers.au3>)
_Timer_KillTimer($hWnd, $iTimerID)\nDestroys the specified timer (Requires: #include <Timers.au3>)
_Timer_SetTimer($hWnd [, $iElapse = 250 [, $sTimerFunc = "" [, $iTimerID = -1]]])\nCreates a timer with the specified time-out value (Requires: #include <Timers.au3>)
_TimeToTicks([$iHours = @HOUR [, $iMins = @MIN [, $iSecs = @SEC]]])\nConverts the specified hours, minutes, and seconds to ticks. (Requires: #include <Date.au3>)
_VersionCompare($sVersion1, $sVersion2)\nCompares two file versions for equality (Requires: #include <Misc.au3>)
_viClose($h_session)\nCloses a VISA connection to an Instrument/Device (Requires: #include <Visa.au3>)
_viExecCommand($h_session, $s_command [, $i_timeout_ms = -1])\nSend a Command/Query to an Instrument/Device through the VISA interface (GPIB / TCP)\n(Requires: #include <Visa.au3>)
_viFindGpib(ByRef $a_descriptor_list, ByRef $a_idn_list [, $f_show_search_results = 0])\nSend a Command/Query to an Instrument/Device through the VISA interface (GPIB / TCP)\n(Requires: #include <Visa.au3>)
_viGpibBusReset()\nGPIB BUS "reset": Use this function when the GPIB BUS gets stuck for some reason. You might be lucky and resolve the problem by calling this function (Requires: #include <Visa.au3>)
_viGTL($h_session)\nGo To Local mode: Instruments that accept this command will exit the "Remote Control mode" and go to "Local mode". If the instrument is already in "Local mode" this is simply ignored. Normally, if an instrument does not support this command it will simply stay in the "Remote Control mode" (Requires: #include <Visa.au3>)
_viInteractiveControl([$s_command_save_filename = ""])\nInteractive VISA control to test your SCPI commands. (Requires: #include <Visa.au3>)
_viOpen($s_visa_address [, $s_visa_secondary_address = 0])\nOpens a VISA connection to an Instrument/Device (Requires: #include <Visa.au3>)
_viSetAttribute($h_session, $i_attribute, $i_value)\nSet any VISA attribute This function, which is called by _viSetTimeout, can ALSO be used to set the other VISA specific attributes. Read the VISA documentation for more information and a list of VISA attributes and their corresponding values. (Requires: #include <Visa.au3>)
_viSetTimeout($h_session, $i_timeout_ms)\nSets the VISA timeout in MILISECONDS (Requires: #include <Visa.au3>)
_WeekNumberISO([$iYear = @YEAR [, $iMonth = @MON [, $iDay = @MDAY]]])\nCalculate the weeknumber of a given date. (Requires: #include <Date.au3>)
_WinAPI_AttachConsole([$iProcessID = -1])\nAttaches the calling process to the console of the specified process (Requires: #include <WinAPI.au3>)
_WinAPI_AttachThreadInput($iAttach, $iAttachTo, $fAttach)\nAttaches the input processing mechanism of one thread to that of another thread (Requires: #include <WinAPI.au3>)
_WinAPI_Beep($iFreq = 500, $iDuration = 1000)\nGenerates simple tones on the speaker (Requires: #include <WinAPI.au3>)
_WinAPI_BitBlt($hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $iROP)\nPerforms a bit-block transfer of color data (Requires: #include <WinAPI.au3>)
_WinAPI_CallNextHookEx($hhk, $iCode, $wParam, $lParam)\nPasses the hook information to the next hook procedure in the current hook chain (Requires: #include <WinAPI.au3>)
_WinAPI_CallWindowProc($lpPrevWndFunc, $hWnd, $Msg, $wParam, $lParam)\nPasses the hook information to the next hook procedure in the current hook chain (Requires: #include <WinAPI.au3>)
_WinAPI_ClientToScreen($hWnd, ByRef $tPoint)\nConverts the client coordinates of a specified point to screen coordinates (Requires: #include <WinAPI.au3>)
_WinAPI_CloseHandle($hObject)\nCloses an open object handle (Requires: #include <WinAPI.au3>)
_WinAPI_CombineRgn($hRgnDest, $hRgnSrc1, $hRgnSrc2, $iCombineMode)\nCombines two regions and stores the result in a third region (Requires: #include <WinAPI.au3>)
_WinAPI_CommDlgExtendedError()\nReturns a common dialog box error string. This string indicates the most recent error to occur during the execution of one of the common dialog box functions. (Requires: #include <WinAPI.au3>)
_WinAPI_CopyIcon($hIcon)\nCopies the specified icon from another module (Requires: #include <WinAPI.au3>)
_WinAPI_CreateBitmap($iWidth, $iHeight [, $iPlanes = 1 [, $iBitsPerPel = 1 [, $pBits = 0]]])\nCreates a bitmap with the specified width, height, and color format (Requires: #include <WinAPI.au3>)
_WinAPI_CreateCompatibleBitmap($hDC, $iWidth, $iHeight)\nCreates a bitmap compatible with the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_CreateCompatibleDC($hDC)\nCreates a memory device context compatible with the specified device (Requires: #include <WinAPI.au3>)
_WinAPI_CreateEvent([$pAttributes = 0 [, $fManualReset = True [, $fInitialState = True [, $sName = ""]]]])\nCreates or opens a named or unnamed event object (Requires: #include <WinAPI.au3>)
_WinAPI_CreateFile($sFileName, $iCreation [, $iAccess = 4 [, $iShare = 0 [, $iAttributes = 0 [, $pSecurity = 0]]]])\nCreates or opens a file or other device (Requires: #include <WinAPI.au3>)
_WinAPI_CreateFont($nHeight, $nWidth [, $nEscape = 0 [, $nOrientn = 0 [, $fnWeight = $FW_NORMAL [, $bItalic = False [, $bUnderline = False [, $bStrikeout = False [, $nCharset = $DEFAULT_CHARSET [, $nOutputPrec = $OUT_DEFAULT_PRECIS [, $nClipPrec = $CLIP_DEFAULT_PRECIS [, $nQuality = $DEFAULT_QUALITY [, $nPitch = 0 [, $szFace = 'Arial']]]]]]]]]]]])\nCreates a logical font with the specified characteristics (Requires: #include <WinAPI.au3>)
_WinAPI_CreateFontIndirect($tLogFont)\nCreates a logical font that has specific characteristics (Requires: #include <WinAPI.au3>)
_WinAPI_CreatePen($iPenStyle, $iWidth, $nColor)\nCreates a logical pen that has the specified style, width, and color. (Requires: #include <WinAPI.au3>)
_WinAPI_CreateProcess($sAppName, $sCommand, $pSecurity, $pThread, $fInherit, $iFlags, $pEnviron, $sDir, $pStartupInfo, $pProcess)\nCreates a new process and its primary thread (Requires: #include <WinAPI.au3>)
_WinAPI_CreateRectRgn($iLeftRect, $iTopRect, $iRightRect, $iBottomRect)\nCreates a rectangular region (Requires: #include <WinAPI.au3>)
_WinAPI_CreateRoundRectRgn($iLeftRect, $iTopRect, $iRightRect, $iBottomRect, $iWidthEllipse, $iHeightEllipse)\nCreates a rectangular region with rounded corners (Requires: #include <WinAPI.au3>)
_WinAPI_CreateSolidBitmap($hWnd, $iColor, $iWidth, $iHeight [, $bRGB = 1])\nCreates a solid color bitmap (Requires: #include <WinAPI.au3>)
_WinAPI_CreateSolidBrush($nColor)\nCreates a logical brush that has the specified solid color (Requires: #include <WinAPI.au3>)
_WinAPI_CreateWindowEx($iExStyle, $sClass, $sName, $iStyle, $iX, $iY, $iWidth, $iHeight, $hParent [, $hMenu = 0 [, $hInstance = 0 [, $pParam = 0]]])\nCreates an overlapped, pop-up, or child window (Requires: #include <WinAPI.au3>)
_WinAPI_DefWindowProc($hWnd, $iMsg, $iwParam, $ilParam)\nCall the default window procedure to provide default processing (Requires: #include <WinAPI.au3>)
_WinAPI_DeleteDC($hDC)\nDeletes the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_DeleteObject($hObject)\nDeletes a logical pen, brush, font, bitmap, region, or palette (Requires: #include <WinAPI.au3>)
_WinAPI_DestroyIcon($hIcon)\nDestroys an icon and frees any memory the icon occupied (Requires: #include <WinAPI.au3>)
_WinAPI_DestroyWindow($hWnd)\nDestroys the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_DrawEdge($hDC, $ptrRect, $nEdgeType, $grfFlags)\nDraws one or more edges of rectangle (Requires: #include <WinAPI.au3>)
_WinAPI_DrawFrameControl($hDC, $ptrRect, $nType, $nState)\nDraws a frame control of the specified type and style (Requires: #include <WinAPI.au3>)
_WinAPI_DrawIcon($hDC, $iX, $iY, $hIcon)\nDraws an icon or cursor into the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_DrawIconEx($hDC, $iX, $iY, $hIcon [, $iWidth = 0 [, $iHeight = 0 [, $iStep = 0 [, $hBrush = 0 [, $iFlags = 3]]]]])\nDraws an icon or cursor into the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_DrawLine($hDC, $iX1, $iY1, $iX2, $iY2)\nDraws a line (Requires: #include <WinAPI.au3>)
_WinAPI_DrawText($hDC, $sText, ByRef $tRect, $iFlags)\nDraws formatted text in the specified rectangle (Requires: #include <WinAPI.au3>)
_WinAPI_DuplicateHandle($hSourceProcessHandle, $hSourceHandle, $hTargetProcessHandle, $iDesiredAccess, $fInheritHandle, $iOptions)\nDuplicates an object handle (Requires: #include <WinAPI.au3>)
_WinAPI_EnableWindow($hWnd [, $fEnable = True])\nEnables or disables mouse and keyboard input to the specified window or control (Requires: #include <WinAPI.au3>)
_WinAPI_EnumDisplayDevices($sDevice, $iDevNum)\nObtains information about the display devices in a system (Requires: #include <WinAPI.au3>)
_WinAPI_EnumWindows([$fVisible = True [, $hwnd = Default]])\nEnumerates all windows (Requires: #include <WinAPI.au3>)
_WinAPI_EnumWindowsPopup()\nEnumerates popup windows (Requires: #include <WinAPI.au3>)
_WinAPI_EnumWindowsTop()\nEnumerates all top level windows (Requires: #include <WinAPI.au3>)
_WinAPI_ExpandEnvironmentStrings($sString)\nExpands environment variable strings and replaces them with their defined values (Requires: #include <WinAPI.au3>)
_WinAPI_ExtractIconEx($sFile, $iIndex, $pLarge, $pSmall, $iIcons)\nCreates an array of handles to large or small icons extracted from a file (Requires: #include <WinAPI.au3>)
_WinAPI_FatalAppExit($sMessage)\nDisplays a message box and terminates the application (Requires: #include <WinAPI.au3>)
_WinAPI_FillRect($hDC, $ptrRect, $hBrush)\nFills a rectangle by using the specified brush (Requires: #include <WinAPI.au3>)
_WinAPI_FindExecutable($sFileName [, $sDirectory = ""])\nRetrieves the name of the executable file associated with the specified file name (Requires: #include <WinAPI.au3>)
_WinAPI_FindWindow($sClassName, $sWindowName)\nRetrieves the handle to the top-level window whose class name and window name match (Requires: #include <WinAPI.au3>)
_WinAPI_FlashWindow($hWnd [, $fInvert = True])\nFlashes the specified window one time (Requires: #include <WinAPI.au3>)
_WinAPI_FlashWindowEx($hWnd [, $iFlags = 3 [, $iCount = 3 [, $iTimeout = 0]]])\nFlashes the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_FloatToInt($nFloat)\nReturns a 4 byte float as an integer value (Requires: #include <WinAPI.au3>)
_WinAPI_FlushFileBuffers($hFile)\nFlushes the buffers of a specified file and causes all buffered data to be written (Requires: #include <WinAPI.au3>)
_WinAPI_FormatMessage($iFlags, $pSource, $iMessageID, $iLanguageID, ByRef $pBuffer, $iSize, $vArguments)\nFormats a message string (Requires: #include <WinAPI.au3>)
_WinAPI_FrameRect($hDC, $ptrRect, $hBrush)\nDraws a border around the specified rectangle by using the specified brush (Requires: #include <WinAPI.au3>)
_WinAPI_FreeLibrary($hModule)\nDecrements the reference count of the loaded dynamic-link library (DLL)\nmodule (Requires: #include <WinAPI.au3>)
_WinAPI_GetAncestor($hWnd [, $iFlags = 1])\nRetrieves the handle to the ancestor of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetAsyncKeyState($iKey)\nDetermines whether a key is up or down at the time the function is called (Requires: #include <WinAPI.au3>)
_WinAPI_GetBkMode($hDC)\nReturns the current background mix mode for a specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_GetClassName($hWnd)\nRetrieves the name of the class to which the specified window belongs (Requires: #include <WinAPI.au3>)
_WinAPI_GetClientHeight($hWnd)\nRetrieves the height of a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_GetClientRect($hWnd)\nRetrieves the coordinates of a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_GetClientWidth($hWnd)\nRetrieves the width of a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentProcess()\nReturns the process handle of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentProcessID()\nReturns the process identifier of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentThread()\nRetrieves a pseudo handle for the calling thread. (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentThreadId()\nReturns the thread identifier of the calling thread (Requires: #include <WinAPI.au3>)
_WinAPI_GetCursorInfo()\nRetrieves information about the global cursor (Requires: #include <WinAPI.au3>)
_WinAPI_GetDC($hWnd)\nRetrieves a handle of a display device context for the client area a window (Requires: #include <WinAPI.au3>)
_WinAPI_GetDesktopWindow()\nReturns the handle of the Windows desktop window (Requires: #include <WinAPI.au3>)
_WinAPI_GetDeviceCaps($hDC, $iIndex)\nRetrieves device specific information about a specified device (Requires: #include <WinAPI.au3>)
_WinAPI_GetDIBits($hDC, $hBmp, $iStartScan, $iScanLines, $pBits, $pBI, $iUsage)\nRetrieves the bits of the specified bitmap and copies them into a buffer as a DIB (Requires: #include <WinAPI.au3>)
_WinAPI_GetDlgCtrlID($hWnd)\nReturns the identifier of the specified control (Requires: #include <WinAPI.au3>)
_WinAPI_GetDlgItem($hWnd, $iItemID)\nRetrieves the handle of a control in the specified dialog box (Requires: #include <WinAPI.au3>)
_WinAPI_GetFileSizeEx($hFile)\nRetrieves the size of the specified file (Requires: #include <WinAPI.au3>)
_WinAPI_GetFocus()\nRetrieves the handle of the window that has the keyboard focus (Requires: #include <WinAPI.au3>)
_WinAPI_GetForegroundWindow()\nReturns the handle of the foreground window (Requires: #include <WinAPI.au3>)
_WinAPI_GetGuiResources([$iflag = 1 [, $hProcess = -1]])\nRetrieves the count of handles to graphical user interface (GUI)\nobjects in use by the specified process (Requires: #include <WinAPI.au3>)
_WinAPI_GetIconInfo($hIcon)\nRetrieves information about the specified icon or cursor (Requires: #include <WinAPI.au3>)
_WinAPI_GetLastError()\nReturns the calling thread's lasterror code value (Requires: #include <WinAPI.au3>)
_WinAPI_GetLastErrorMessage()\nReturns the calling threads last error message (Requires: #include <WinAPI.au3>)
_WinAPI_GetLayeredWindowAttributes($hWnd, ByRef $i_transcolor, ByRef $Transparency [, $asColorRef = False])\nGets Layered Window Attributes (Requires: #include <WinAPI.au3>)
_WinAPI_GetModuleHandle($sModuleName)\nReturns a module handle for the specified module (Requires: #include <WinAPI.au3>)
_WinAPI_GetMousePos([$fToClient = False [, $hWnd = 0]])\nReturns the current mouse position (Requires: #include <WinAPI.au3>)
_WinAPI_GetMousePosX([$fToClient = False [, $hWnd = 0]])\nReturns the current mouse X position (Requires: #include <WinAPI.au3>)
_WinAPI_GetMousePosY([$fToClient = False [, $hWnd = 0]])\nReturns the current mouse Y position (Requires: #include <WinAPI.au3>)
_WinAPI_GetObject($hObject, $iSize, $pObject)\nRetrieves information for the specified graphics object (Requires: #include <WinAPI.au3>)
_WinAPI_GetOpenFileName([$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hwndOwner = 0]]]]]]]]])\nCreates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to open (Requires: #include <WinAPI.au3>)
_WinAPI_GetOverlappedResult($hFile, $pOverlapped, ByRef $iBytes [, $fWait = False])\nRetrieves the results of an overlapped operation (Requires: #include <WinAPI.au3>)
_WinAPI_GetParent($hWnd)\nRetrieves the handle of the specified child window's parent window (Requires: #include <WinAPI.au3>)
_WinAPI_GetProcAddress($hModule, $vName)\nRetrieves the address of an exported function or variable from the specified module (Requires: #include <WinAPI.au3>)
_WinAPI_GetProcessAffinityMask($hProcess)\nObtains the affinity masks for the process and the system (Requires: #include <WinAPI.au3>)
_WinAPI_GetSaveFileName([$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hwndOwner = 0]]]]]]]]])\nCreates a Save dialog box that lets the user specify the drive, directory, and name of a file to save (Requires: #include <WinAPI.au3>)
_WinAPI_GetStdHandle($iStdHandle)\nRetrieves a handle for the standard input, standard output, or standard error device (Requires: #include <WinAPI.au3>)
_WinAPI_GetStockObject($iObject)\nRetrieves a handle to one of the predefined stock pens, brushes, fonts, or palettes (Requires: #include <WinAPI.au3>)
_WinAPI_GetSysColor($iIndex)\nRetrieves the current color of the specified display element (Requires: #include <WinAPI.au3>)
_WinAPI_GetSysColorBrush($iIndex)\nretrieves a handle identifying a logical brush that corresponds to the specified color index (Requires: #include <WinAPI.au3>)
_WinAPI_GetSystemMetrics($iIndex)\nRetrieves the specified system metric or system configuration setting (Requires: #include <WinAPI.au3>)
_WinAPI_GetTextExtentPoint32($hDC, $sText)\nComputes the width and height of the specified string of text (Requires: #include <WinAPI.au3>)
_WinAPI_GetTextMetrics($hDC)\nRetrieves basic information for the currently selected font. (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindow($hWnd, $iCmd)\nRetrieves the handle of a window that has a specified relationship to the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowDC($hWnd)\nRetrieves the device context (DC)\nfor the entire window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowHeight($hWnd)\nReturns the height of the window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowLong($hWnd, $iIndex)\nRetrieves information about the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowPlacement($hWnd)\nRetrieves the placement of the window for Min, Max, and normal positions (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowRect($hWnd)\nRetrieves the dimensions of the bounding rectangle of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowRgn($hWnd, $hRgn)\nObtains a copy of the window region of a window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowText($hWnd)\nRetrieves the text of the specified window's title bar (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowThreadProcessId($hWnd, ByRef $iPID)\nRetrieves the identifier of the thread that created the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowWidth($hWnd)\nReturns the width of the window (Requires: #include <WinAPI.au3>)
_WinAPI_GetXYFromPoint(ByRef $tPoint, ByRef $iX, ByRef $iY)\nReturns the X/Y values from a $tagPOINT structure (Requires: #include <WinAPI.au3>)
_WinAPI_GlobalMemoryStatus()\nRetrieves information about current available memory (Requires: #include <WinAPI.au3>)
_WinAPI_GUIDFromString($sGUID)\nConverts a string GUID to binary form (Requires: #include <WinAPI.au3>)
_WinAPI_GUIDFromStringEx($sGUID, $pGUID)\nConverts a string GUID to binary form (Requires: #include <WinAPI.au3>)
_WinAPI_HiWord($iLong)\nReturns the high word of a longword value (Requires: #include <WinAPI.au3>)
_WinAPI_InProcess($hWnd, ByRef $hLastWnd)\nDetermines whether a window belongs to the current process (Requires: #include <WinAPI.au3>)
_WinAPI_IntToFloat($iInt)\nReturns a 4 byte integer as a float value (Requires: #include <WinAPI.au3>)
_WinAPI_InvalidateRect($hWnd [, $tRect = 0 [, $fErase = True]])\nAdds a rectangle to the specified window's update region (Requires: #include <WinAPI.au3>)
_WinAPI_IsClassName($hWnd, $sClassName)\nWrapper to check ClassName of the control. (Requires: #include <WinAPI.au3>)
_WinAPI_IsWindow($hWnd)\nDetermines whether the specified window handle identifies an existing window (Requires: #include <WinAPI.au3>)
_WinAPI_IsWindowVisible($hWnd)\nRetrieves the visibility state of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_LineTo($hDC, $iX, $iY)\nDraws a line from the current position up to, but not including, the specified point. (Requires: #include <WinAPI.au3>)
_WinAPI_LoadBitmap($hInstance, $sBitmap)\nLoads the specified bitmap resource from a module's executable file (Requires: #include <WinAPI.au3>)
_WinAPI_LoadImage($hInstance, $sImage, $iType, $iXDesired, $iYDesired, $iLoad)\nLoads an icon, cursor, or bitmap (Requires: #include <WinAPI.au3>)
_WinAPI_LoadLibrary($sFileName)\nMaps a specified executable module into the address space of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_LoadLibraryEx($sFileName [, $iFlags = 0])\nMaps a specified executable module into the address space of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_LoadShell32Icon($iIconID)\nExtracts an icon from the Shell32.dll file (Requires: #include <WinAPI.au3>)
_WinAPI_LoadString($hInstance, $iStringId)\nloads a string resource from the executable file associated with a specified module (Requires: #include <WinAPI.au3>)
_WinAPI_LocalFree($hMem)\nFrees the specified local memory object and invalidates its handle (Requires: #include <WinAPI.au3>)
_WinAPI_LoWord($iLong)\nReturns the low word of a longword (Requires: #include <WinAPI.au3>)
_WinAPI_MAKELANGID($lgidPrimary, $lgidSub)\nConstruct language id from a primary language id and a sublanguage id (Requires: #include <WinAPI.au3>)
_WinAPI_MAKELCID($lgid, $srtid)\nConstruct locale id from a language id and a sort id (Requires: #include <WinAPI.au3>)
_WinAPI_MakeLong($iLo, $iHi)\nReturns a longint value from two int values (Requires: #include <WinAPI.au3>)
_WinAPI_MakeQWord($LoDWORD, $HiDWORD)\nReturns a QWORD value from two int values (Requires: #include <WinAPI.au3>)
_WinAPI_MessageBeep([$iType = 1])\nPlays a waveform sound (Requires: #include <WinAPI.au3>)
_WinAPI_Mouse_Event($iFlags [, $iX = 0 [, $iY = 0 [, $iData = 0 [, $iExtraInfo = 0]]]])\nSynthesizes mouse motion and button clicks (Requires: #include <WinAPI.au3>)
_WinAPI_MoveTo($hDC, $iX, $iY)\nUpdates the current position to the specified point (Requires: #include <WinAPI.au3>)
_WinAPI_MoveWindow($hWnd, $iX, $iY, $iWidth, $iHeight [, $fRepaint = True])\nChanges the position and dimensions of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_MsgBox($iFlags, $sTitle, $sText)\nDisplays a message box with wider margin than original (Requires: #include <WinAPI.au3>)
_WinAPI_MulDiv($iNumber, $iNumerator, $iDenominator)\nMultiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value (Requires: #include <WinAPI.au3>)
_WinAPI_MultiByteToWideChar($sText [, $iCodePage = 0 [, $iFlags = 0 [, $bRetString = False]]])\nMaps a character string to a wide-character (Unicode)\nstring (Requires: #include <WinAPI.au3>)
_WinAPI_MultiByteToWideCharEx($sText, $pText [, $iCodePage = 0 [, $iFlags = 0]])\nMaps a character string to a wide-character (Unicode)\nstring (Requires: #include <WinAPI.au3>)
_WinAPI_OpenProcess($iAccess, $fInherit, $iProcessID [, $fDebugPriv = False])\nReturns a handle of an existing process object (Requires: #include <WinAPI.au3>)
_WinAPI_PathFindOnPath($szFile, $aExtraPaths="", $szPathDelimiter=@LF)\nSearchs for a file in the default system paths (Requires: #include <WinAPI.au3>)
_WinAPI_PointFromRect(ByRef $tRect [, $fCenter = True])\nReturns the top/left coordinates of a $tagRECT as a $tagPOINT structure (Requires: #include <WinAPI.au3>)
_WinAPI_PostMessage($hWnd, $iMsg, $iwParam, $ilParam)\nPlaces a message in the message queue and then returns (Requires: #include <WinAPI.au3>)
_WinAPI_PrimaryLangId($lgid)\nExtract primary language id from a language id (Requires: #include <WinAPI.au3>)
_WinAPI_PtInRect(ByRef $tRect, ByRef $tPoint)\nDetermines whether the specified point lies within the specified rectangle (Requires: #include <WinAPI.au3>)
_WinAPI_ReadFile($hFile, $pBuffer, $iToRead, ByRef $iRead [, $pOverlapped = 0])\nReads data from a file (Requires: #include <WinAPI.au3>)
_WinAPI_ReadProcessMemory($hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iRead)\nReads memory in a specified process (Requires: #include <WinAPI.au3>)
_WinAPI_RectIsEmpty(ByRef $tRect)\nDetermins whether a rectangle is empty (Requires: #include <WinAPI.au3>)
_WinAPI_RedrawWindow($hWnd [, $tRect = 0 [, $hRegion = 0 [, $iFlags = 5]]])\nUpdates the specified rectangle or region in a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_RegisterWindowMessage($sMessage)\nDefines a new window message that is guaranteed to be unique throughout the system (Requires: #include <WinAPI.au3>)
_WinAPI_ReleaseCapture()\nReleases the mouse capture from a window in the current thread and restores normal mouse input processing (Requires: #include <WinAPI.au3>)
_WinAPI_ReleaseDC($hWnd, $hDC)\nReleases a device context (Requires: #include <WinAPI.au3>)
_WinAPI_ScreenToClient($hWnd, ByRef $tPoint)\nConverts screen coordinates of a specified point on the screen to client coordinates (Requires: #include <WinAPI.au3>)
_WinAPI_SelectObject($hDC, $hGDIObj)\nSelects an object into the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_SetBkColor($hDC, $iColor)\nSets the current background color to the specified color value (Requires: #include <WinAPI.au3>)
_WinAPI_SetBkMode($hDC, $iBkMode)\nSets the background mix mode of the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_SetCapture($hWnd)\nSets the mouse capture to the specified window belonging to the current thread (Requires: #include <WinAPI.au3>)
_WinAPI_SetCursor($hCursor)\nEstablishes the cursor shape (Requires: #include <WinAPI.au3>)
_WinAPI_SetDefaultPrinter($sPrinter)\nSets the default printer for the current user on the local computer (Requires: #include <WinAPI.au3>)
_WinAPI_SetDIBits($hDC, $hBmp, $iStartScan, $iScanLines, $pBits, $pBMI [, $iColorUse = 0])\nSets the pixels in a compatible bitmap using the color data found in a DIB (Requires: #include <WinAPI.au3>)
_WinAPI_SetEndOfFile($hFile)\nSets the physical file size for the specified file to the current position of the file pointer. (Requires: #include <WinAPI.au3>)
_WinAPI_SetEvent($hEvent)\nSets the specified event object to the signaled state (Requires: #include <WinAPI.au3>)
_WinAPI_SetFilePointer($hFile, $iPos [, $iMethod = 0])\nMoves the file pointer of the specified file (Requires: #include <WinAPI.au3>)
_WinAPI_SetFocus($hWnd)\nSets the keyboard focus to the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_SetFont($hWnd, $hFont [, $fRedraw = True])\nSets a window font (Requires: #include <WinAPI.au3>)
_WinAPI_SetHandleInformation($hObject, $iMask, $iFlags)\nSets certain properties of an object handle (Requires: #include <WinAPI.au3>)
_WinAPI_SetLastError($iErrCode)\nSets the last-error code for the calling thread (Requires: #include <WinAPI.au3>)
_WinAPI_SetLayeredWindowAttributes($hWnd, $i_transcolor [, $Transparency = 255 [, $dwFlags = 0x03 [, $isColorRef = False]]])\nSets Layered Window Attributes (Requires: #include <WinAPI.au3>)
_WinAPI_SetParent($hWndChild, $hWndParent)\nChanges the parent window of the specified child window (Requires: #include <WinAPI.au3>)
_WinAPI_SetProcessAffinityMask($hProcess, $iMask)\nSets a processor affinity mask for the threads of a specified process (Requires: #include <WinAPI.au3>)
_WinAPI_SetSysColors($vElements, $vColors)\nObtains information about the display devices in a system (Requires: #include <WinAPI.au3>)
_WinAPI_SetTextColor($hDC, $iColor)\nSets the current text color to the specified color value (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowLong($hWnd, $iIndex, $iValue)\nSets information about the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowPlacement($hWnd, $pWindowPlacement)\nSets the placement of the window for Min, Max, and normal positions (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowPos($hWnd, $hAfter, $iX, $iY, $iCX, $iCY, $iFlags)\nChanges the size, position, and Z order of a child, pop-up, or top-level window (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowRgn($hWnd, $hRgn [, $bRedraw])\nSets the window region of a window (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowsHookEx($idHook, $lpfn, $hmod [, $dwThreadId = 0])\nInstalls an application-defined hook procedure into a hook chain (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowText($hWnd, $sText)\nChanges the text of the specified window's title bar (Requires: #include <WinAPI.au3>)
_WinAPI_ShowCursor($fShow)\nDisplays or hides the cursor (Requires: #include <WinAPI.au3>)
_WinAPI_ShowError($sText [, $fExit = True])\nDisplays an error message box with an optional exit (Requires: #include <WinAPI.au3>)
_WinAPI_ShowMsg($sText)\nDisplays an "Information" message box (Requires: #include <WinAPI.au3>)
_WinAPI_ShowWindow($hWnd [, $iCmdShow = 5])\nSets the specified window's show state (Requires: #include <WinAPI.au3>)
_WinAPI_StringFromGUID($pGUID)\nConverts a binary GUID to string form (Requires: #include <WinAPI.au3>)
_WinAPI_StringLenA($vString)\nCalculates the size of ANSI string (Requires: #include <WinAPI.au3>)
_WinAPI_StringLenW($vString)\nCalculates the size of wide string (Requires: #include <WinAPI.au3>)
_WinAPI_SubLangId($lgid)\nExtract sublanguage id from a language id (Requires: #include <WinAPI.au3>)
_WinAPI_SystemParametersInfo($iAction [, $iParam = 0 [, $vParam = 0 [, $iWinIni = 0]]])\nRetrieves or sets the value of one of the system-wide parameters (Requires: #include <WinAPI.au3>)
_WinAPI_TwipsPerPixelX()\nReturns the width of a pixel, in twips. (Requires: #include <WinAPI.au3>)
_WinAPI_TwipsPerPixelY()\nReturns the height of a pixel, in twips. (Requires: #include <WinAPI.au3>)
_WinAPI_UnhookWindowsHookEx($hhk)\nRemoves a hook procedure installed in a hook chain by the _WinAPI_SetWindowsHookEx function (Requires: #include <WinAPI.au3>)
_WinAPI_UpdateLayeredWindow($hWnd, $hDCDest, $pPTDest, $pSize, $hDCSrce, $pPTSrce, $iRGB, $pBlend, $iFlags)\nUpdates the position, size, shape, content, and translucency of a layered window (Requires: #include <WinAPI.au3>)
_WinAPI_UpdateWindow($hWnd)\nUpdates the client area of a window by sending a WM_PAINT message to the window (Requires: #include <WinAPI.au3>)
_WinAPI_WaitForInputIdle($hProcess [, $iTimeout = -1])\nWaits until a process is waiting for user input with no input pending, or a time out (Requires: #include <WinAPI.au3>)
_WinAPI_WaitForMultipleObjects($iCount, $pHandles [, $fWaitAll = False [, $iTimeout = -1]])\nWaits until one or all of the specified objects are in the signaled state (Requires: #include <WinAPI.au3>)
_WinAPI_WaitForSingleObject($hHandle [, $iTimeout = -1])\nWaits until the specified object is in the signaled state (Requires: #include <WinAPI.au3>)
_WinAPI_WideCharToMultiByte($pUnicode [, $iCodePage = 0 [, $bRetString = True]])\nConverts a Unicode string to a multibyte string (Requires: #include <WinAPI.au3>)
_WinAPI_WindowFromPoint(ByRef $tPoint)\nRetrieves the handle of the window that contains the specified point (Requires: #include <WinAPI.au3>)
_WinAPI_WriteConsole($hConsole, $sText)\nWrites a character string to a console screen buffer (Requires: #include <WinAPI.au3>)
_WinAPI_WriteFile($hFile, $pBuffer, $iToWrite, ByRef $iWritten [, $pOverlapped = 0])\nWrites data to a file at the position specified by the file pointer (Requires: #include <WinAPI.au3>)
_WinAPI_WriteProcessMemory($hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iWritten [, $sBuffer = "ptr"])\nWrites memory in a specified process (Requires: #include <WinAPI.au3>)
_WinNet_AddConnection($sLocalName, $sRemoteName [, $sPassword = 0])\nConnects a local device to a network resource (Requires: #include <WinNet.au3>)
_WinNet_AddConnection2($sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]])\nConnects a local device to a network resource (Requires: #include <WinNet.au3>)
_WinNet_AddConnection3($hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]])\nConnects a local device to a network resource (Requires: #include <WinNet.au3>)
_WinNet_CancelConnection($sName [, $fForce = True])\nCancels an existing network connection (Requires: #include <WinNet.au3>)
_WinNet_CancelConnection2($sName [, $fUpdate = True [, $fForce = True]])\nCancels an existing network connection (Requires: #include <WinNet.au3>)
_WinNet_CloseEnum($hEnum)\nEnds a network resource enumeration started by a call to WNetOpenEnum (Requires: #include <WinNet.au3>)
_WinNet_ConnectionDialog($hWnd)\nStarts a general browsing dialog box for connecting to network resources (Requires: #include <WinNet.au3>)
_WinNet_ConnectionDialog1($hWnd [, $sRemoteName = "" [, $iFlags = 2]])\nStarts a general browsing dialog box for connecting to network resources (Requires: #include <WinNet.au3>)
_WinNet_DisconnectDialog($hWnd)\nStarts a general browsing dialog box for disconnecting from network resources (Requires: #include <WinNet.au3>)
_WinNet_DisconnectDialog1($hWnd, $sLocalName [, $sRemoteName = "" [, $iFlags = 1]])\nStarts a general browsing dialog box for disconnecting from network resources (Requires: #include <WinNet.au3>)
_WinNet_EnumResource($hEnum, ByRef $iCount, $pBuffer, ByRef $iBufSize)\nContinues an enumeration of network resources (Requires: #include <WinNet.au3>)
_WinNet_GetConnection($sLocalName)\nRetrieves the name of the network resource associated with a local device (Requires: #include <WinNet.au3>)
_WinNet_GetConnectionPerformance($sLocalName, $sRemoteName)\nReturns information about the performance of a network connection resource (Requires: #include <WinNet.au3>)
_WinNet_GetLastError(ByRef $iError, ByRef $sError, ByRef $sName)\nRetrieves the most recent extended error (Requires: #include <WinNet.au3>)
_WinNet_GetNetworkInformation($sName)\nReturns extended information about a specific network provider (Requires: #include <WinNet.au3>)
_WinNet_GetProviderName($iType)\nObtains the provider name for a specific type of network (Requires: #include <WinNet.au3>)
_WinNet_GetResourceInformation($sRemoteName [, $sProvider = "" [, $iType = 0]])\nIdentifies the network provider that owns the resource (Requires: #include <WinNet.au3>)
_WinNet_GetResourceParent($sRemoteName, $sProvider [, $iType = 0])\nReturns the parent of a network resource in the network browse hierarchy (Requires: #include <WinNet.au3>)
_WinNet_GetUniversalName($sLocalPath)\nConverts drived based path to universal form (Requires: #include <WinNet.au3>)
_WinNet_GetUser($sName)\nRetrieves the default user name, or the user name used to establish a connection (Requires: #include <WinNet.au3>)
_WinNet_OpenEnum($iScope, $iType, $iUsage, $pResource, ByRef $hEnum)\nStarts an enumeration of network resources or existing connections (Requires: #include <WinNet.au3>)
_WinNet_RestoreConnection([$sDevice = "" [, $hWnd = 0 [, $fUseUI = True]]])\nRestores the connection to a network resource (Requires: #include <WinNet.au3>)
_WinNet_UseConnection($hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]])\nConnects a local device to a network resource (Requires: #include <WinNet.au3>)
_Word_VersionInfo()\nReturns an array of information about the Word.au3 version (Requires: #include <Word.au3> )
_WordAttach($s_string [, $s_mode = "FilePath"])\nAttach to the first existing instance of Microsoft Word where the search string matches based on the selected mode. (Requires: #include <Word.au3> )
_WordCreate([$s_FilePath = "" [, $b_tryAttach = 0 [, $b_visible = 1 [, $b_takeFocus = 1]]]])\nCreate a Microsoft Office Word Object (Requires: #include <Word.au3> )
_WordDocAdd(ByRef $o_object [, $i_DocumentType = 0 [, $s_Template = "" [, $b_NewTemplate = 0]]])\nReturns an object variable representing a new empty document (Requires: #include <Word.au3> )
_WordDocAddLink(ByRef $o_object [, $o_Anchor = "" [, $s_Address = "" [, $s_SubAddress = "" [, $s_ScreenTip = "" [, $s_TextToDisplay = "" [, $s_Target = ""]]]]]])\nAdd a hyperlink to the document (Requires: #include <Word.au3> )
_WordDocAddPicture(ByRef $o_object, $s_FilePath [, $b_LinkToFile = 0 [, $b_SaveWithDocument = 0 [, $o_Range = ""]]])\nAdd a picture to the document (Requires: #include <Word.au3> )
_WordDocClose(ByRef $o_object [, $i_SaveChanges = -2 [, $i_OriginalFormat = 2 [, $b_RouteDocument = 0]]])\nCloses a previously opened word document (Requires: #include <Word.au3> )
_WordDocFindReplace(ByRef $o_object [, $s_FindText = "" [, $s_ReplaceWith = "" [, $i_Replace = 2 [, $v_SearchRange = 0 [, $b_MatchCase = 0 [, $b_MatchWholeWord = 0 [, $b_MatchWildcards = 0 [, $b_MatchSoundsLike = 0 [, $b_MatchAllWordForms = 0 [, $b_Forward = 1 [, $i_Wrap = 1 [, $b_Format = 0]]]]]]]]]]]])\nRuns the specified find and replace operation. (Requires: #include <Word.au3> )
_WordDocGetCollection(ByRef $o_object [, $v_index = -1])\nReturns a collection object containing all documents (Requires: #include <Word.au3> )
_WordDocLinkGetCollection(ByRef $o_object [, $i_index = -1])\nReturns a collection object containing all links in the document (Requires: #include <Word.au3> )
_WordDocOpen(ByRef $o_object , $s_FilePath [, $b_ConfirmConversions = 0 [, $i_Format = 0 [, $b_ReadOnly = 0 [, $b_Revert = 0 [, $b_AddToRecentFiles = 0 [, $s_PasswordDocument = "" [, $s_WritePasswordDocument = ""]]]]]]])\nOpens an existing Microsoft Word Document (Requires: #include <Word.au3> )
_WordDocPrint(ByRef $o_object [, $b_Background = 0 [, $i_Copies = 1 [, $i_Orientation = -1 [, $b_Collate = 1 [, $s_Printer = "" [, $i_Range = 0 [, $i_From = "" [, $i_To = "" [, $s_Pages = "" [, $i_PageType = 0 [, $i_Item = 0]]]]]]]]]]])\nPrints all or part of the specified document. (Requires: #include <Word.au3> )
_WordDocPropertyGet(ByRef $o_object, $v_property)\nReturns a select property of the Word Document. (Requires: #include <Word.au3>)
_WordDocPropertySet(ByRef $o_object, $v_property, $v_newvalue)\nSet a select property of the Word Document (Requires: #include <Word.au3> )
_WordDocSave($o_object)\nSaves a previously opened document (Requires: #include <Word.au3> )
_WordDocSaveAs(ByRef $o_object [, $s_FilePath = "" [, $i_Format = 0 [, $b_ReadOnlyRecommended = 0 [, $b_AddToRecentFiles = 0 [, $b_LockComments = 0 [, $s_Password = "" [, $s_WritePassword = ""]]]]]]])\nSaves the specified document with a new name or format. (Requires: #include <Word.au3> )
_WordErrorHandlerDeRegister()\nDisable a registered user COM error handler (Requires: #include <Word.au3> )
_WordErrorHandlerRegister([$s_functionName = "__WordInternalErrorHandler"])\nRegister and enable a user COM error handler (Requires: #include <Word.au3> )
_WordErrorNotify([$f_notify = -1])\nSpecifies whether Word.au3 automatically notifies of Warnings and Errors (to the console)\n(Requires: #include <Word.au3> )
_WordMacroRun($o_object, $s_MacroName [, $v_Arg1 [, $v_Arg<i>n</i> [, $v_Arg30]]])\nRuns a Visual Basic macro (Requires: #include <Word.au3>)
_WordPropertyGet(ByRef $o_object, $s_property)\nReturns a select property of the Word Application. (Requires: #include <Word.au3> )
_WordPropertySet(ByRef $o_object, $s_property, $v_newvalue)\nSet a select property of the Word Application. (Requires: #include <Word.au3> )
_WordQuit(ByRef $o_object [, $i_SaveChanges = -2 [, $i_OriginalFormat = 1 [, $b_RouteDocument = 0]]])\nClose the window and remove the object reference to it (Requires: #include <Word.au3> )
_WinAPI_AbortPath($hDC)\nCloses and discards any paths in the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AboutDlg($sTitle, $sName, $sText [, $hIcon [, $hParent]])\nDisplays a Windows About dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ActivateKeyboardLayout($hLocale [, $iFlag])\nSets the input locale identifier for the calling thread or the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddClipboardFormatListener($hWnd)\nPlaces the given window in the system-maintained clipboard format listener list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddFontMemResourceEx($pData, $iSize)\nAdds the font resource from a memory image to the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddFontResourceEx($sFont [, $iFlag [, $fNotify]])\nAdds the font resource from the specified file to the system font table (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddIconOverlay($hIcon, $hOverlay)\nCreates an icon by merging the source icon and overlay mask (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddIconTransparency($hIcon [, $iPercent [, $fDelete]])\nAdds a transparency to the specified 32 bits-per-pixel icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddMRUString($hMRU, $sStr)\nAdds a string to the top of the most recently used (MRU)\nlist (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AdjustTokenPrivileges($hToken, $aPrivileges, $iAttributes, ByRef $aAdjust)\nEnables or disables privileges in the specified access token (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AdjustWindowRectEx(ByRef $tRECT, $iStyle [, $iExStyle [, $fMenu])\nCalculates the required size of the window rectangle, based on the desired size of the client rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AlphaBlend($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iAlpha [, $fAlpha])\nDisplays bitmaps that have transparent or semitransparent pixels (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AngleArc($hDC, $iX, $iY, $iRadius, $nStartAngle, $nSweepAngle)\nDraws a line segment and an arc (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AnimateWindow($hWnd, $iFlags [, $iDuration])\nEnables you to produce special effects when showing or hiding windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Arc($hDC, $tRECT, $iXStartArc, $iYStartArc, $iXEndArc, $iYEndArc)\nDraws an elliptical arc (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ArcTo($hDC, $tRECT, $iXRadial1, $iYRadial1, $iXRadial2, $iYRadial2)\nDraws an elliptical arc (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ArrayToStruct(Const ByRef $aData [, $iStart [, $iEnd]])\nConverts an array of strings to the structure (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AssignProcessToJobObject($hJob, $hProcess)\nAssigns a process to an existing job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AssocGetPerceivedType($sExt)\nRetrieves a file's perceived type based on its extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AssocQueryString($sAssoc, $iType [, $iFlags [, $sExtra]])\nSearches for and retrieves a file or protocol association-related string from the registry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginBufferedPaint($hDC, $tTarget, ByRef $hNewDC [, $iFormat [, $iFlags [, $tExclude [, $iAlpha]]]])\nBegins a buffered paint operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginDeferWindowPos([$iAmount])\nAllocates memory for a multiple-window-position structure (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginPaint($hWnd, ByRef $tPAINTSTRUCT)\nPrepares the specified window for painting (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginPath($hDC)\nOpens a path bracket in the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginUpdateResource($sFile [, $fDelete])\nRetrieves a handle that can be used to add, delete, or replace resources in a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BringWindowToTop($hWnd)\nBrings the specified window to the top of the Z order (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BroadcastSystemMessage($iMsg [, $wParam [, $lParam [, $iFlags [, $iRecipients]]]])\nSends a message to the specified recipients (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BrowseForFolderDlg([$sRoot [, $sText [, $iFlags [, $pBrowseProc [, $lParam [, $hParent])\nDisplays a dialog box that enables the user to select a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintClear($hBP [, $tRECT])\nClears a specified rectangle in the buffer to ARGB = {0,0,0,0} (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintInit()\nInitialize buffered painting for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintSetAlpha($hBP [, $iAlpha [, $tRECT]])\nSets the alpha to a specified value in a given rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintUnInit()\nCloses down buffered painting for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CalculatePopupWindowPosition($iX, $iY, $iWidth, $iHeight [, $iFlags [, $tExclude]])\nCalculates an appropriate pop-up window position (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CallWindowProcW($pPrevWndProc, $hWnd, $iMsg, $wParam, $lParam)\nPasses message information to the specified window procedure (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CascadeWindows($aWnds [, $tRECT [, $hParent [, $iFlags [, $iStart [, $iEnd]]]]])\nCascades the specified child windows of the specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ChangeWindowMessageFilterEx($hWnd, $iMsg, $iAction)\nModifies the User Interface Privilege Isolation (UIPI)\nmessage filter for a specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CharToOem($sStr)\nConverts a string into the OEM-defined character set (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ChildWindowFromPointEx($hWnd, $tPOINT [, $iFlags])\nDetermines which, if any, of the child windows belonging to the specified parent window contains the specified point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ClipCursor($tRECT)\nConfines the cursor to a rectangular area on the screen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseDesktop($hDesktop)\nCloses an open handle to a desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseEnhMetaFile($hDC)\nCloses an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseFigure($hDC)\nCloses an open figure in a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseThemeData($hTheme)\nCloses the theme data handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseWindow($hWnd)\nMinimizes (but does not destroy)\nthe specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseWindowStation($hStation)\nCloses an open window station handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoInitialize([$iFlags])\nInitializes the COM library for use by the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ColorAdjustLuma($iRGB, $iPercent [, $fScale])\nChanges the luminance of a RGB value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ColorHLSToRGB($iHue, $iLuminance, $iSaturation)\nConverts colors from hue-luminance-saturation (HLS)\nto RGB format (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ColorRGBToHLS($iRGB, ByRef $iHue, ByRef $iLuminance, ByRef $iSaturation)\nConverts colors from RGB to hue-luminance-saturation (HLS)\nformat (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CombineTransform($tXFORM1, $tXFORM2)\nConcatenates two world-space to page-space transformations (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CommandLineToArgv($sCmd)\nParses a command-line string and returns an array of the command-line arguments (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CommDlgExtendedErrorEx()\nReturns a common dialog box error code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CompressBitmapBits($hBitmap, ByRef $tBuffer [, $iCompression [, $iQuality]])\nCreates a compressed data block from the specified bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ComputeCrc32($pMemory, $iLenght)\nCalculates the CRC32 checksum of a block of memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyBitmap($hBitmap)\nCreates a duplicate of a specified bitmap with a device-independent bitmap (DIB)\nsection (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyCursor($hCursor)\nCreates a duplicate of a specified cursor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyEnhMetaFile($hEmf [, $sFile])\nCopies the contents of an enhanced-format metafile to a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyFileEx($sExistingFile, $sNewFile [, $iFlags [, $pProgressProc [, $pData])\nCopies an existing file to a new file, notifying the application of its progress through a callback function (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyImage($hImage [, $iType [, $xDesired [, $yDesired [, $iFlags]]]])\nCreates a new image (icon, cursor, or bitmap)\nand copies the attributes of the specified image to the new one (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyRect($tRECT)\nCopies the coordinates of one rectangle to another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyStruct($tStruct [, $sStruct])\nCreates a duplicate of a specified structure (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoTaskMemAlloc($iSize)\nAllocates a block of task memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoTaskMemFree($hMemory)\nFrees a block of task memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoTaskMemRealloc($hMemory, $iSize)\nChanges the size of a previously allocated block of task memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoUninitialize()\nCloses the COM library on the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Create32BitHBITMAP($hIcon [, $fDib [, $fDelete]])\nCreates a 32 bits-per-pixel bitmap from the specified icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Create32BitHICON($hIcon [, $fDelete])\nConverts an icon to a 32 bits-per-pixel format and copies to the new icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateANDBitmap($hBitmap)\nCreates AND bitmask device-independent bitmap (DIB)\nfrom the specified bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateBitmapIndirect($tBITMAP)\nCreates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateBrushIndirect($iStyle, $iRGB, $iHatch)\nCreates a logical brush that has the specified style, color, and pattern (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateBuffer($iLenght [, $pBuffer [, $fAbort]])\nAllocates a block of memory from the internal library heap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateCaret($hWnd, $hBitmap [, $iWidth [, $iHeight]])\nCreates a new shape for the system caret and assigns ownership of the caret to the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateSolidBitmapEx($hDC, $iWidth, $iHeight, $iRGB)\nCreates a bitmap compatible with the device and fills it the specified color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDesktop($sName [, $iAccess [, $iFlags [, $iHeap [, $tSecurity]]]])\nCreates a new desktop, associates it with the current window station of the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDIB($iWidth, $iHeight [, $iBitsPerPel [, $tColorTable [, $iColorCount]]])\nCreates an uncompressed device-independent bitmap (DIB)\nwith the specified width, height, and color depth (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDIBColorTable(Const ByRef $aColorTable [, $iStart [, $iEnd]])\nCreates RGB color table from the specified array of colors (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDIBitmap($hDC, $tBITMAPINFO, $iUsage [, $pBits])\nCreates a compatible bitmap (DDB)\nfrom a DIB and, optionally, sets the bitmap bits (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDIBSection($hDC, $tBITMAPINFO, $iUsage, ByRef $pBits [, $hSection [, $iOffset]])\nCreates a DIB that applications can write to directly (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDirectoryEx($sNewDir, $sTemplateDir [, $tSecurity])\nCreates a new directory with the attributes of a specified template directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateEllipticRgn($tRECT)\nCreates an elliptical region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateEmptyIcon($iWidth, $iHeight [, $iBitsPerPel])\nCreates a fully transparent icon with the specified width, height, and color depth (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateEnhMetaFile([$hDC [, $tRECT [, $fPixels [, $sFile [, $sDescription]]]]])\nCreates a device context for an enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateFileEx($sFile, $iCreation [, $iAccess [, $iShare [, $iFlagsAndAttributes [, $tSecurity [, $hTemplate]]]]])\nCreates or opens a file or I/O device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateFileMapping($hFile [, $iSize [, $sName [, $iProtect [, $tSecurity]]]])\nCreates or opens a named or unnamed file mapping object for a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateGUID()\nCreates a globally unique identifier (GUID)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateIcon($hInstance, $iWidth, $iHeight, $iPlanes, $iBitsPixel, $pANDBits, $pXORBits)\nCreates an icon that has the specified size, colors, and bit patterns (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateIconFromResourceEx($pData, $iSize [, $fIcon [, $xDesired [, $yDesired [, $iFlags]]]])\nCreates an icon or cursor from resource bits describing the icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateIconIndirect($hBitmap, $hMask [, $XHotspot [, $YHotspot [, $fIcon]]])\nCreates an icon or cursor that has the specified size, colors, and bit patterns (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateJobObject([$sName [, $tSecurity])\nCreates or opens a job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateMargins($iLeftWidth, $iRightWidth, $iTopHeight, $iBottomHeight)\nCreates $tagMARGINS structure with specified left, right, top, and bottom retaining borders (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateMRUList($hKey, $sSubKey [, $iMax]])\nCreates a new most recently used (MRU)\nlist (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateMutex($sMutex [, $fInitial [, $tSecurity]])\nCreates or opens a named or unnamed mutex object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateNullRgn()\nCreates an empty region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateNumberFormatInfo($iNumDigits, $iLeadingZero, $iGrouping, $sDecimalSep, $sThousandSep, $iNegativeOrder)\nCreates a $tagNUMBERFMT structure with the specified number formatting information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateObjectID($sPath)\nCreates or retrieves the object identifier for the specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreatePoint($iX, $iY)\nCreates $tagPOINT structure with the x- and y-coordinates of the specified point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreatePolygonRgn(Const ByRef $aPoint [, $iStart [, $iEnd [, $iMode]]])\nCreates a polygonal region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateRect($iLeft, $iTop, $iRight, $iBottom)\nCreates $tagRECT structure with the coordinates of the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateRectEx($iX, $iY, $iWidth, $iHeight)\nCreates $tagRECT structure with the coordinates of the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateRectRgnIndirect($tRECT)\nCreates a rectangular region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateSemaphore($sSemaphore, $iInitial, $iMaximum [, $tSecurity])\nCreates or opens a named or unnamed semaphore object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateSize($iWidth, $iHeight)\nCreates $tagSIZE structure with the width and height of the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateStreamOnHGlobal([$hGlobal [, $fDeleteOnRelease]])\nCreates a stream object that uses a memory handle to store the stream contents (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateString($sString [, $pString [, $iLenght [, $fUnicode [, $fAbort]]]])\nCopies a specified string to the newly allocated memory block and returns its pointer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateTransform([$nM11 [, $nM12 [, $nM21 [, $nM22 [, $nDX [, $nDY]]]]]])\nCeates $tagXFORM structure specifies a world-space to page-space transformation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateWindowStation([$sName [, $iAccess [, $iFlags [, $tSecurity]]]])\nCreates a window station object, associates it with the calling process, and assigns it to the current session (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeferWindowPos($hInfo, $hWnd, $hAfter, $iX, $iY, $iWidth, $iHeight, $iFlags)\nUpdates the specified multiple-window-position structure for the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DefineDosDevice($sDevice, $iFlags [, $sPath])\nDefines, redefines, or deletes MS-DOS device names (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DefSubclassProc($hWnd, $iMsg, $wParam, $lParam)\nCalls the next handler in a window's subclass chain (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DefWindowProcW($hWnd, $iMsg, $wParam, $lParam)\nCalls the default window procedure to provide default processing for any window messages (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteEnhMetaFile($hEmf)\nDeletes an enhanced-format metafile or an enhanced-format metafile handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteFile($sFile)\nDeletes an existing file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteObjectID($sPath)\nRemoves the object identifier from a specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteVolumeMountPoint($sPath)\nDeletes a drive letter or mounted folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeregisterShellHookWindow($hWnd)\nUnregisters a specified Shell window that is registered to receive Shell hook messages (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DestroyCaret()\nDestroys the caret's current shape, frees the caret from the window, and removes the caret from the screen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DestroyCursor($hCursor)\nDestroys a cursor and frees any memory the cursor occupied (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeviceIoControl($hDevice, $iControlCode [, $pInBuffer [, $iInBufferSize [, $pOutBuffer [, $iOutBufferSize]]]])\nSends a control code directly to a specified device driver (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DisplayStruct($tStruct [, $sStruct [, $sTitle [, $iItem [, $iSubItem [, $iFlags [, $fTop [, $hParent]]]]]]])\nDisplays data from the specified structure or memory address as a list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DllGetVersion($sPath)\nRetrieves a DLL-specific version information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DllInstall($sPath)\nRegisters OLE controls such as DLL or ActiveX Controls (OCX)\nfiles (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DllUninstall($sPath)\nUnregisters OLE controls such as DLL or ActiveX Controls (OCX)\nfiles (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DPtoLP( $hDC, ByRef $tPOINT [, $iCount = 1])\nConverts device coordinates into logical coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragAcceptFiles($hWnd [, $fAccept])\nRegisters whether a window accepts dropped files (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragFinish($hDrop)\nReleases memory that the system allocated for use in transferring file names to the application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragQueryFileEx($hDrop [, $iFlag])\nRetrieves the names of dropped files that result from a successful drag-and-drop operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragQueryPoint($hDrop)\nRetrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawAnimatedRects($hWnd, $tRectFrom, $tRectTo)\nAnimates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawBitmap($hDC, $iX, $iY, $hBitmap [, $iRop])\nDraws a bitmap into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawShadowText($hDC, $sText, $rgbText, $rgbShadow [, $iXOffset [, $iYOffset [, $tRECT [, $iFlags]]]])\nDraws formatted text in the specified rectangle with a drop shadow (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeBackground($hTheme, $iPartId, $iStateId, $hDC, $tRECT [, $tCLIP])\nDraws the border and fill defined by the visual style for the specified control part (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeEdge($hTheme, $iPartId, $iStateId, $hDC, $tRECT, $iEdge, $iFlags [, $tAREA])\nDraws one or more edges defined by the visual style of a rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeIcon($hTheme, $iPartId, $iStateId, $hDC, $tRECT, $hIL, $iIndex)\nDraws an image from an image list with the icon effect defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeParentBackground($hWnd, $hDC [, $tRECT])\nDraws the part of a parent control that is covered by a partially-transparent or alpha-blended child control (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeText($hTheme, $iPartId, $iStateId, $hDC, $sText, $tRECT, $iFlags)\nDraws text using the color and font defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeTextEx($hTheme, $iPartId, $iStateId, $hDC, $sText, $tRECT, $iFlags, $tDTTOPTS)\nDraws text using the color and font defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DuplicateHandle($hProcess, $hSource, $hTarget [, $iAccess [, $iOptions [, $fInherit]]])\nDuplicates an object handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmEnableBlurBehindWindow($hWnd [, $fEnable [, $fTransition [, $hRgn]]])\nEnables the blur effect on a specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmEnableComposition($fEnable)\nEnables or disables Desktop Window Manager (DWM)\ncomposition (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmGetColorizationColor()\nRetrieves the current color used for Desktop Window Manager (DWM)\nglass composition (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmGetWindowAttribute($hWnd, $iAttribute)\nRetrieves the current value of a specified attribute applied to the window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmExtendFrameIntoClientArea($hWnd [, $tMARGINS])\nExtends the window frame behind the client area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmInvalidateIconicBitmaps($hWnd)\nIndicates that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmIsCompositionEnabled()\nDetermines whether Desktop Window Manager (DWM)\ncomposition is enabled (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmUnregisterThumbnail($hThumbnail)\nReturns the source size of the Desktop Window Manager (DWM)\nthumbnail (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmRegisterThumbnail($hDestination, $hSource)\nCreates a Desktop Window Manager (DWM)\nthumbnail relationship between the destination and source windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmSetIconicLivePreviewBitmap($hWnd, $hBitmap [, $fFrame [, $tClient]])\nSets a static, iconic bitmap to display a live preview (also known as a Peek preview)\nof a window or tab (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmSetIconicThumbnail($hWnd, $hBitmap [, $fFrame])\nSets a static, iconic bitmap on a window or tab to use as a thumbnail representation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmSetWindowAttribute($hWnd, $iAttribute, $iData)\nSets the value of the specified attributes for non-client rendering to apply to the window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmUnregisterThumbnail($hThumbnail)\nRemoves a Desktop Window Manager (DWM)\nthumbnail relationship (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmUpdateThumbnailProperties($hThumbnail [, $fVisible [, $fClientAreaOnly [, $iOpacity [, $tRectDest [, $tRectSrc]]]]])\nSpecifies Desktop Window Manager (DWM)\nthumbnail properties (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DWordToFloat($iValue)\nConverts a value of type DWORD to a value of type FLOAT (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DWordToInt($iValue)\nConverts a value of type DWORD to a value of type INT (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EjectMedia($sDrive)\nEjects media from a device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Ellipse($hDC, $tRECT)\nDraws an ellipse (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EmptyWorkingSet([$PID])\nRemoves as many pages as possible from the working set of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndBufferedPaint($hBP [, $fUpdate])\nCompletes a buffered paint operation and frees the associated buffered paint handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndDeferWindowPos($hInfo)\nSimultaneously updates the position and size of one or more windows in a single screen-refreshing cycle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndPaint($hWnd, ByRef $tPAINTSTRUCT)\nMarks the end of painting in the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndPath($hDC)\nCloses a path bracket and selects the path defined by the bracket into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndUpdateResource($hUpdate [, $fDiscard])\nCommits or discards a changes of the resources within module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumChildProcess([$PID])\nEnumerates a child processes that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumChildWindows($hWnd [, $fVisible])\nEnumerates a child windows that belong to the specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDesktops($hStation)\nEnumerates all desktops associated with the specified window station of the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDesktopWindows($hDesktop [, $fVisible])\nEnumerates all top-level windows associated with the specified desktop (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDeviceDrivers()\nRetrieves the load address for each device driver in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDisplaySettings($sDevice, $iMode)\nRetrieves information about one of the graphics modes for a display device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDllProc($sPath [, $sMask [, $iFlags]])\nEnumerates an exported functions of the specified dynamic-link library (DLL)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumMRUList($hMRU, $iItem)\nEnumerates the contents of the most recently used (MRU)\nlist (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumPageFiles()\nRetrieves information for each installed pagefile in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumProcessHandles([$PID [, $iType ]])\nEnumerates a handles that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumProcessModules( [$PID [, $iFlag]])\nRetrieves a handle and name for each module in the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumProcessThreads([$PID])\nEnumerates a threads that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumProcessWindows([$PID [, $fVisible]])\nEnumerates a windows that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumResourceLanguages($sModule, $sType, $sName)\nEnumerates a language-specific resources, of the specified type and name, associated with a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumResourceNames($sModule, $sType)\nEnumerates the resources of a specified type within a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumResourceTypes($sModule)\nEnumerates the resource types within a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumSystemLocales($iFlag)\nEnumerates the locales that are either installed on or supported by an operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumUILanguages([$iFlag])\nEnumerates the user interface languages that are available on the operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumWindowStations()\nEnumerates all window stations in the current session (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EqualMemory($pSource1, $pSource2, $iLenght)\nCompares two blocks of memory to determine whether the specified number of bytes are identical (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EqualRect($tRECT1, $tRECT2)\nDetermines whether the two specified rectangles are equal (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EqualRgn($hRgn1, $hRgn2)\nChecks the two specified regions to determine whether they are identical (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExcludeClipRect($hDC, $tRECT)\nCreates a new clipping region that consists of the existing clipping region minus the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtCreatePen($iPenStyle, $iWidth, $iBrushStyle, $iRGB [, $iHatch [, $aUserStyle [, $iStart [, $iEnd]]]])\nCreates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtCreateRegion($tRGNDATA [, $tXFORM])\nCreates a region from the specified region and transformation data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtFloodFill($hDC, $iX, $iY, $iRGB [, $iType])\nFills an area of the display surface with the current brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtractIcon($sIcon, $iIndex [, $fSmall])\nExtracts an icon from the specified executable file, DLL, or icon file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtSelectClipRgn($hDC, $hRgn [, $iMode])\nCombines the specified region with the current clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FatalExit($iCode)\nTransfers execution control to the debugger (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FileExists($sFile)\nTests whether the specified path is existing file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FileInUse($sFile)\nTests whether the specified file in use by another application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillMemory($pDestination, $iLenght [, $iValue])\nFills a block of memory with the given value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillPath($hDC)\nCloses any open figures in the current path and fills the path's interior by using the current brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillRect($hDC, $tRECT, $hBrush)\nFills a rectangle by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillRgn($hDC, $hRgn, $hBrush)\nFills a region by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindClose($hSearch)\nCloses a file search handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindFirstFile($sPath, $pData)\nSearches a directory for a file or subdirectory with a name that matches a specific name (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindNextFile($hSearch, $pData)\nContinues a file or directory search (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindResource($hInstance, $sType, $sName)\nDetermines the location of a resource with the specified type and name in the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindResourceEx($hInstance, $sType, $sName, $iLanguage)\nDetermines the location of the resource with the specified type, name, and language in the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindTextDlg($hOwner [, $sFindWhat [, $iFlags [, $pFindProc [, $lParam]]]])\nCreates a system-defined modeless Find dialog box to search for text in a document (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FlattenPath($hDC)\nTransforms any curves in the path that is selected into the current DC, turning each curve into a sequence of lines (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FloatToDWord($iValue)\nConverts a value of type FLOAT to a value of type DWORD (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FlushFRBuffer()\nDestroys the internal buffer that used the _WinAPI_FindTextDlg()\nand _WinAPI_ReplaceTextDlg()\nfunctions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FlushViewOfFile($pAddress [, $iBytes])\nWrites to the disk a byte range within a mapped view of a file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FormatDriveDlg($sDrive [, $iOption [, $hParent]])\nOpens the Shell's Format dialog (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FrameRect($hDC, $tRECT, $hBrush)\nDraws a border around the specified rectangle by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FrameRgn($hDC, $hRgn, $hBrush, $iWidth, $iHeight)\nDraws a border around the specified region by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FreeMemory($pMemory)\nFrees a memory block in the internal library heap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FreeMRUList($hMRU)\nFrees the handle associated with the most recently used (MRU)\nlist and writes cached data to the registry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FreeResource($hData)\nDecrements (decreases by one)\nthe reference count of a loaded resource (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GdiComment($hDC, $pBuffer, $iSize)\nCopies a comment from a buffer into a specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetActiveWindow()\nRetrieves the window handle to the active window attached to the calling process's message queue (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetAllUsersProfileDirectory()\nRetrieves the path to the root of the directory that contains program data shared by all users (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetApplicationRestartSettings([$PID])\nRetrieves the restart information registered for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetArcDirection($hDC)\nRetrieves the current arc direction for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetAsyncKeyState($vKey)\nDetermines whether a key is up or down at the time the function is called (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBinaryType($sPath)\nDetermines whether a file is an executable (.exe)\nfile, and if so, which subsystem runs the executable file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBitmapBits($hBitmap, $iSize, $pBits)\nCopies the bitmap bits of a specified device-dependent bitmap into a buffer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBitmapDimension($hBitmap)\nRetrieves a dimension of the specified bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBitmapDimensionEx($hBitmap)\nRetrieves the dimensions of a compatible bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBkColor($hDC)\nRetrieves the current background color for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBoundsRect($hDC [, $iFlags])\nObtains the current accumulated bounding rectangle for a specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintBits($hBP)\nRetrieves a pointer to the buffer bitmap if the buffer is a device-independent bitmap (DIB)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintDC($hBP)\nGets the paint device context (DC)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintTargetDC($hBP)\nRetrieves the target device context (DC)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintTargetRect($hBP)\nRetrieves the target rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBValue($iRGB)\nRetrieves an intensity value for the blue component of a 32-bit RGB value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCaretBlinkTime()\nReturns the time required to invert the caret's pixels (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCaretPos()\nRetrieves the caret's position (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCDType($sDrive)\nRetrieves a type of the media which is loaded into a specified CD-ROM device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClassInfoEx($sClass [, $hInstance])\nRetrieves information about a window class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClassLongEx($hWnd, $iIndex)\nRetrieves the specified value associated with the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipboardSequenceNumber()\nRetrieves the clipboard sequence number for the current window station (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipBox($hDC, ByRef $tRECT)\nRetrieves the dimensions of the bounding rectangle of the visible area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipCursor()\nRetrieves the screen coordinates of the rectangular area to which the cursor is confined (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipRgn($hDC)\nRetrieves a handle identifying the current application-defined clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCompressedFileSize($sFile)\nRetrieves the actual number of bytes of disk storage used to store a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCompression($sPath)\nRetrieves the current compression state of a file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetConnectedDlg($iDlg [, $iFlags [, $hParent]])\nLaunches the Get Connected wizard within the calling application to enable network connectivity (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentDirectory()\nRetrieves the current directory for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentHwProfile()\nRetrieves information about the current hardware profile for the local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentObject($hDC, $iType)\nRetrieves a handle to an object of the specified type that has been selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentPosition($hDC)\nRetrieves the current position for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentProcessExplicitAppUserModelID()\nRetrieves the application-defined, explicit Application User Model ID for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentThemeName()\nRetrieves the name of the current visual styles, color scheme name, and size name (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCursor()\nRetrieves a handle to the current cursor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDateFormat([$LCID [, $tSYSTEMTIME [, $iFlag [, $sFormat]]]])\nFormats a date as a date string for a locale specified by the locale identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDCEx($hWnd, $hRgn, $iFlags)\nRetrieves a handle to a device context (DC)\nfor the client area of a specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDefaultPrinter()\nRetrieves the printer name of the default printer for the current user on the local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDefaultUserProfileDirectory()\nRetrieves the path to the root of the default user's profile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDeviceDriverBaseName($hDriver)\nRetrieves the base name of the specified device driver (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDeviceDriverFileName($hDriver)\nRetrieves the path available for the specified device driver (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDeviceGammaRamp($hDC, ByRef $aRamp)\nGets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDIBColorTable($hBitmap)\nRetrieves RGB color table from the DIB section bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDiskFreeSpaceEx($sDrive)\nRetrieves information about the amount of space that is available on a disk volume (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDllDirectory()\nRetrieves the application-specific portion of the search path used to locate DLLs for the application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveBusType($sDrive)\nRetrieves a bus type for the specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveGeometryEx($iDrive)\nRetrieves extended information about the disk's geometry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveNumber($sDrive)\nRetrieves a device type, device number, and partition number for the specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveType([$sDrive])\nDetermines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDurationFormat($LCID, $iDuration [, $sFormat])\nFormats a duration of time as a time string for a locale specified by identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFile($sFile)\nCreates a handle that identifies the enhanced-format metafile stored in the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileBits($hEmf)\nRetrieves the contents of the specified enhanced-format metafile and copies them into a buffer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileDescription($hEmf)\nRetrieves an optional text description from an enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileHeader($hEmf)\nRetrieves a dimension of the specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileHeader($hEmf)\nRetrieves the record containing the header for the specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetErrorMessage($iCode [, $iLanguage])\nRetrieves a text error message for the specified system error code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetErrorMode()\nRetrieves the error mode for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetExitCodeProcess($hProcess)\nRetrieves the termination status of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetExtended()\nRetrieves the last extended function return value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileAttributes($sFile)\nRetrieves file system attributes for a specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileInformationByHandle($hFile)\nRetrieves file information for the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileSize($hFile)\nRetrieves the size of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileSizeOnDisk($sFile)\nRetrieves the file allocation size on disk (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileTitle($sFile)\nRetrieves the name of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileType($hFile)\nRetrieves the file type of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileVersionInfo($sFile)\nRetrieves version information for the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFinalPathNameByHandle($hFile)\nRetrieves the final path of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFinalPathNameByHandleEx($hFile [, $iFlags])\nRetrieves the final path of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFontResourceInfo($sFont [, $fForce])\nRetrieves the fontname from the specified font resource file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetForegroundWindow()\nReturns a handle to the foreground window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFRBuffer()\nRetrieves the current size of the internal buffer that used the _WinAPI_FindTextDlg()\nand _WinAPI_ReplaceTextDlg()\nfunctions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFullPathName($sFile)\nRetrieves the full path and file name of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetGraphicsMode($hDC)\nRetrieves the current graphics mode for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetGUIThreadInfo($iThreadID)\nRetrieves information about the active window or a specified GUI thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetGValue($iRGB)\nRetrieves an intensity value for the green component of a 32-bit RGB value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetHandleInformation($hObject)\nRetrieves certain properties of an object handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetHGlobalFromStream($pStream)\nRetrieves the global memory handle to a stream (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetIconDimension($hIcon)\nRetrieves a dimension of the specified icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetIconInfoEx($hIcon)\nRetrieves information about the specified icon or cursor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetIdleTime()\nRetrieves the time that has elapsed since the last input (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardLayout($hWnd)\nRetrieves the active input locale identifier for the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardLayoutList()\nRetrieves the all input locale identifiers corresponding to the current set of input locales in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardState()\nCopies the status of the 256 virtual keys to the specified buffer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardType($iType)\nRetrieves information about the current keyboard (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyNameText($lParam)\nRetrieves a string that represents the name of a key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyState($vKey)\nRetrieves the status of the specified virtual key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLastActivePopup($hWnd)\nDetermines which pop-up window owned by the specified window was most recently active (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLayeredWindowAttributes($hWnd)\nRetrieves the opacity and transparency color key of a layered window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLocaleInfo($LCID, $iType)\nRetrieves information about a locale specified by identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLogicalDrives()\nRetrieves a bitmask representing the currently available disk drives (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetMapMode($hDC)\nRetrieves the current mapping mode (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetMemorySize($pMemory)\nRetrieves the size of a memory block allocated from the internal library heap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetMessageExtraInfo()\nRetrieves the extra message information for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetModuleFileNameEx( $hProcess [, $hModule])\nRetrieves the fully-qualified path for the file containing the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetModuleHandleEx($sModule [, $iFlags])\nRetrieves a module handle for the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetModuleInformation( $hProcess, $hModule)\nRetrieves information about the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetNumberFormat($LCID, $sNumber [, $tNUMBERFMT])\nFormats a number string as a number string customized for a locale specified by identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetObjectID($sPath)\nRetrieves the object identifier for the specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetObjectNameByHandle($hObject)\nRetrieves a name of the specified object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetObjectType($hObject)\nRetrieves the type of the specified object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetOutlineTextMetrics($hDC)\nRetrieves text metrics for TrueType fonts (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetParentProcess([$PID])\nRetrieves the PID of the parent process for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPerformanceInfo()\nRetrieves the performance information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPhysicallyInstalledSystemMemory()\nRetrieves the amount of RAM that is physically installed on the computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPixel($hDC, $iX, $iY)\nRetrieves the color value of the pixel at the specified coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPolyFillMode($hDC)\nRetrieves the current polygon fill mode (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPosFromRect($tRECT)\nInterprets the coordinates of the rectangle as offset and position coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPriorityClass([$PID])\nRetrieves the priority class for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcAddress($hModule, $sProc)\nRetrieves the address of a function from the specified dynamic-link library (DLL)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessCommandLine([$PID])\nRetrieves the command-line string for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessFileName([$PID])\nRetrieves the fully-qualified path of the executable file for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessHandleCount([$PID])\nRetrieves the number of open handles that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessID($hProcess)\nRetrieves the process identifier of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessIoCounters([$PID])\nRetrieves accounting information for all I/O operations performed by the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessMemoryInfo([$PID])\nRetrieves information about the memory usage of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessName([$PID])\nRetrieves the name for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessShutdownParameters()\nRetrieves the shutdown parameters for the currently calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessTimes([$PID])\nRetrieves timing information for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessUser([$PID])\nRetrieves the user and domain name for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessWindowStation()\nRetrieves a handle to the current window station for the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessWorkingDirectory([$PID])\nRetrieves the current working directory for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProfilesDirectory()\nRetrieves the path to the root directory where user profiles are stored (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPwrCapabilities()\nRetrieves information about the system power capabilities (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRegionData($hRgn, ByRef $tRGNDATA)\nFills the specified buffer with data describing a region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRegKeyNameByHandle($hKey)\nRetrieves a name of the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRgnBox($hRgn, ByRef $tRECT)\nRetrieves the bounding rectangle of the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetROP2($hDC)\nRetrieves the foreground mix mode of the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRValue($iRGB)\nRetrieves an intensity value for the red component of a 32-bit RGB value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetShellWindow()\nRetrieves a handle to the Shell's desktop window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetStartupInfo()\nRetrieves the contents of the STARTUPINFO structure that was specified when the calling process was created (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetString($pString [, $fUnicode])\nReturns a string located at the specified memory address (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemDefaultLCID()\nReturns the locale identifier (LCID)\nfor the system locale (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemDefaultUILanguage()\nRetrieves the language identifier for the system default UI language of the operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemDEPPolicy()\nGets the data execution prevention (DEP)\npolicy setting for the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemInfo()\nRetrieves information about the current system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemPowerStatus()\nRetrieves the power status of the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemTimes()\nRetrieves system timing information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemWow64Directory()\nRetrieves the path of the system directory used by WOW64 (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTempFileName($sPath [, $sPrefix])\nCreates a name for a temporary file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextAlign($hDC)\nRetrieves the text-alignment setting for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextCharacterExtra($hDC)\nRetrieves the current intercharacter spacing for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextColor($hDC)\nRetrieves the current text color for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextFace($hDC)\nRetrieves the typeface name of the font that is selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextMetrics($hDC)\nRetrieves basic information for the currently selected font (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeAppProperties()\nRetrieves the property flags that control how visual styles are applied in the current application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBackgroundContentRect($hTheme, $iPartId, $iStateId, $hDC, $tRECT)\nRetrieves the size of the content area for the background defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBackgroundExtent($hTheme, $iPartId, $iStateId, $hDC, $tRECT)\nCalculates the size and location of the background, defined by the visual style, given the content area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBackgroundRegion($hTheme, $iPartId, $iStateId, $hDC, $tRECT)\nComputes the region for a regular or partially transparent background that is bounded by a specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBitmap($hTheme, $iPartId, $iStateId, $iPropId [, $iFlag])\nRetrieves the bitmap associated with a particular theme, part, state, and property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBool($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of a BOOL property from the SysMetrics section of theme data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeColor($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of a color property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeDocumentationProperty($sFile, $sProperty)\nRetrieves the value for a theme property from the documentation section of the specified theme file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeEnumValue($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of an enumerated type property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeFilename($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of a filename property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeFont($hTheme, $iPartId, $iStateId, $iPropId [, $hDC])\nRetrieves the value of a font property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeInt($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of an INT property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeMargins($hTheme, $iPartId, $iStateId, $iPropId, $hDC, $tRECT)\nRetrieves the value of a margins property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeMetric($hTheme, $iPartId, $iStateId, $iPropId [, $hDC])\nRetrieves the value of a metric property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemePartSize($hTheme, $iPartId, $iStateId, $hDC, $tRECT, $iType)\nCalculates the original size of the part defined by a visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemePosition($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of a position property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemePropertyOrigin($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the location of the theme property definition for a property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeRect($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of a RECT property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeString($hTheme, $iPartId, $iStateId, $iPropId)\nRetrieves the value of a string property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysBool($hTheme, $iBoolId)\nRetrieves the Boolean value of a system metric (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysColor($hTheme, $iColorId)\nRetrieves the value of a system color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysColorBrush($hTheme, $iColorId)\nRetrieves a system color brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysFont($hTheme, $iFontId)\nRetrieves the font information of a system font (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysInt($hTheme, $iIntId)\nRetrieves the value of a system INT (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysSize($hTheme, $iSizeId)\nRetrieves the value of a system size metric from theme data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysString($hTheme, $iStringId)\nRetrieves the value of a system string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeTextExtent($hTheme, $iPartId, $iStateId, $hDC, $sText, $tRECT, $iFlags)\nCalculates the size and location of the specified text when rendered in the visual style font (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeTextMetrics($hTheme, $iPartId, $iStateId [, $hDC])\nRetrieves information about the font specified by a visual style for a particular part (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeTransitionDuration($hTheme, $iPartId, $iStateIdFrom, $iStateIdTo, $iPropId)\nGets the duration for the specified transition (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThreadDesktop($iThreadID)\nRetrieves a handle to the desktop assigned to the specified thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThreadErrorMode()\nRetrieves the error mode for the calling thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTickCount()\nRetrieves the number of milliseconds that have elapsed since the system was started (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTickCount64()\nRetrieves the number of milliseconds that have elapsed since the system was started (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTimeFormat([$LCID [, $tSYSTEMTIME [, $iFlag [, $sFormat]]]])\nFormats time as a time string for a locale specified by identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTopWindow($hWnd)\nRetrieves a handle to the child window at the top of the Z order (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUDFColorMode()\nRetrieves the current color mode for WinAPIEx UDF library (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUDFVersion()\nRetrieves the current version of WinAPIEx UDF library (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUpdateRect($hWnd [, $fErase])\nRetrieves the coordinates of the rectangle that completely encloses the update region of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUpdateRgn($hWnd, $hRgn [, $fErase])\nRetrieves the update region of a window by copying it into the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUserDefaultLCID()\nReturns the locale identifier (LCID)\nfor the user default locale (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUserDefaultUILanguage()\nReturns the language identifier for the user UI language for the current user (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUserObjectInformation($hObject, $iIndex)\nRetrieves information about the specified window station or desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetVersion()\nRetrieves version of the current operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetVersionEx()\nRetrieves information about the current operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetVolumeNameForVolumeMountPoint($sPath)\nRetrieves a volume GUID path for the volume that is associated with the specified volume mount point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowDisplayAffinity($hWnd)\nRetrieves the current display affinity setting, from any process, for a given window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowExt($hDC)\nRetrieves the x-extent and y-extent of the window for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowFileName($hWnd)\nRetrieves the fully-qualified path of the module associated with the specified window handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowInfo($hWnd)\nRetrieves information about the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowLongEx($hWnd, $iIndex)\nRetrieves information about the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowOrg($hDC)\nRetrieves the x-coordinates and y-coordinates of the window origin for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowSubclass($hWnd, $pSubclassProc, $ID)\nRetrieves the reference data for the specified window subclass callback (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowTheme($hWnd)\nRetrieves a theme handle to a window that has visual styles applied (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWorkArea()\nRetrieves the size of the working area on the primary display monitor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWorldTransform($hDC)\nRetrieves the current world-space to page-space transformation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GradientFill($hDC, Const ByRef $aVertex [, $iStart [, $iEnd [, $fRotate]]])\nFills rectangle or triangle gradient (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Hex64($iValue [, $iLenght])\nConverts an integer value into a string of its hexadecimal representation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_HiByte($iValue)\nReturns the high BYTE of a 16-bit (2 bytes)\nvalue (Requires: #Include <WinAPIEx.au3>)
_WinAPI_HideCaret($hWnd)\nRemoves the caret from the screen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_HiDWord($iValue)\nReturns the high DWORD of a 64-bit (8 bytes)\nvalue (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InflateRect(ByRef $tRECT, $DX, $DY)\nIncreases or decreases the width and height of the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IntersectClipRect($hDC, $tRECT)\nCreates a new clipping region from the intersection of the current clipping region and the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IntersectRect($tRECT1, $tRECT2)\nCreates the intersection of two rectangles (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IntToDWord($iValue)\nConverts a value of type INT to a value of type DWORD (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvalidateRect($hWnd [, $tRECT [, $fErase]])\nAdds a rectangle to the specified window's update region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvalidateRgn($hWnd [, $hRgn [, $fErase]])\nAdds a region to the specified window's update region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvertANDBitmap($hBitmap [, $fDelete])\nInverts the specified AND bitmask bitmap by performing a logical NOT operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvertColor($iColor)\nInverts (negative)\nthe specified color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvertRect($hDC, $tRECT)\nInverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvertRgn($hDC, $hRgn)\nInverts the colors in the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IOCTL($iDeviceType, $iFunction, $iMethod, $iAccess)\nCreate a unique system I/O control code (IOCTL)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsAlphaBitmap($hBitmap)\nDetermines whether the specified bitmap has an alpha channel (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadCodePtr($pAddress)\nDetermines whether the calling process has read access to the memory at the specified address (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadReadPtr($pAddress, $iLenght)\nVerifies that the calling process has read access to the specified range of memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadStringPtr($pAddress, $iLenght)\nVerifies that the calling process has read access to the specified range of memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadWritePtr($pAddress, $iLenght)\nVerifies that the calling process has write access to the specified range of memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsChild($hWnd, $hWndParent)\nTests whether a window is a child window of a specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsDoorOpen($sDrive)\nChecks if a CD (DVD)\ntray is open (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsHungAppWindow($hWnd)\nDetermines whether the specified application is not responding (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsIconic($hWnd)\nDetermines whether the specified window is minimized (iconic)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsInternetConnected()\nDetermines whether the current user is connected to the Internet (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsLoadKBLayout($iLanguage)\nDetermines whether the specified input locale loaded into the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsMemory($pMemory)\nDetermines whether the specified pointer points to the memory block in the internal library heap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsNetworkAlive()\nDetermines whether or not a local system is connected to a network, and identifies the type of network connection (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsProcessInJob( $hProcess [, $hJob])\nDetermines whether the process is running in the specified job (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsProcessorFeaturePresent($iFeature)\nDetermines whether the specified processor feature is supported by the current computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsRectEmpty($tRECT)\nDetermines whether the specified rectangle is empty (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsThemeActive()\nTests if a visual style for the current application is active (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsThemeBackgroundPartiallyTransparent($hTheme, $iPartId, $iStateId)\nRetrieves whether the background specified by the visual style has transparent pieces or alpha-blended pieces (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsThemePartDefined($hTheme, $iPartId)\nRetrieves whether a visual style has defined parameters for the specified part (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsValidLocale($LCID [, $iFlag])\nDetermines if the specified locale is installed or supported on the operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWindowEnabled($hWnd)\nDetermines whether the specified window is enabled for mouse and keyboard input (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWindowUnicode($hWnd)\nDetermines whether the specified window is a native Unicode window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWow64Process([$PID])\nDetermines whether the specified process is running under WOW64 (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWritable($sDrive)\nDetermines whether a disk is writable (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsZoomed($hWnd)\nDetermines whether a window is maximized (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Keybd_Event($vKey, $iFlags [, $iScanCode [, $iExtraInfo]])\nSynthesizes a keystroke (Requires: #Include <WinAPIEx.au3>)
_WinAPI_KillTimer($hWnd, $iTimerID)\nDestroys the specified timer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LineDDA($X1, $Y1, $X2, $Y2, $pLineProc [, $pData])\nDetermines which pixels should be highlighted for a line (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadCursor($hInstance, $sName)\nLoads the specified cursor resource from the executable (.EXE)\nfile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadCursorFromFile($sFile)\nCreates a cursor based on data contained in a file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadIconWithScaleDown($hInstance, $sName, $iWidth, $iHeight)\nLoads an icon and scales down a larger image instead of scaling up a smaller image (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadIndirectString($sStrIn)\nExtracts the string from the specified resource when given an indirect string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadKeyboardLayout($iLanguage [, $iFlag])\nLoads a new input locale identifier into the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadMedia($sDrive)\nLoads media into a device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadResource($hInstance, $hResource)\nLoads the specified resource into global memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoByte($iValue)\nReturns the low BYTE of a 16-bit (2 bytes)\nvalue (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockDevice($sDrive, $fLock)\nEnables or disables the mechanism that ejects media, for those devices possessing that locking capability (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockFile($hFile, $iOffset, $iLenght)\nLocks the specified file for exclusive access by the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockResource($hData)\nLocks the specified resource in memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockWindowUpdate($hWnd)\nDisables or enables drawing in the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockWorkStation()\nLocks the workstation's display (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoDWord($iValue)\nReturns the low DWORD of a 64-bit (8 bytes)\nvalue (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LongMid($iValue, $iStart, $iCount)\nExtracts a number of bits from a DWORD (32-bit)\nvalue (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LookupIconIdFromDirectoryEx($pData [, $fIcon [, $xDesired [, $yDesired [, $iFlags]]]])\nSearches through icon or cursor data for the icon or cursor that best fits the current display device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LPtoDP( $hDC, ByRef $tPOINT [, $iCount = 1])\nConverts a logical coordinates into device coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LZNTCompress($tInput, ByRef $tOutput [, $fMaximum])\nCompresses an input data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LZNTDecompress($tInput, ByRef $tOutput, $iBufferSize)\nDecompresses an input data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MakeWord($iLo, $iHi)\nReturns a WORD (16-bit)\nvalue from two BYTE (8-bit)\nvalues (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MapViewOfFile($hMapping [, $iOffset [, $iBytes [, $iAccess]]])\nMaps a view of a file mapping into the address space of a calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MapVirtualKey($iCode, $iType)\nTranslates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MaskBlt($hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $hMask, $iXMask, $iYMask, $iRop)\nCombines the color data for the source and destination bitmaps using the specified mask and raster operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MessageBoxCheck($iType, $sTitle, $sText, $sRegVal [, $iDefault [, $hParent]])\nDisplays a message box that gives the user the option of suppressing further occurrences (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MessageBoxIndirect($tMSGBOXPARAMS)\nCreates, displays, and operates a message box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ModifyWorldTransform($hDC, $tXFORM, $iMode)\nChanges the world transformation for a device context using the specified mode (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MoveFileEx($sExistingFile, $sNewFile [, $iFlags [, $pProgressProc [, $pData])\nMoves a file or directory, notifying the application of its progress through a callback function (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MoveMemory($pDestination, $pSource, $iLenght)\nMoves a block of memory from one location to another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MoveToEx($hDC, $iX, $iY)\nUpdates the current position to the specified point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_NtStatusToDosError($iStatus)\nConverts the specified NTSTATUS code to its equivalent system error code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OemToChar($sStr)\nConverts a string from the OEM-defined character set into either an ANSI string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetPoints(ByRef $aPoint, $iXOffset, $iYOffset [, $iStart [, $iEnd]])\nMoves a points from the array by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetClipRgn($hDC, $iXOffset, $iYOffset)\nMoves the clipping region of a device context by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetRect(ByRef $tRECT, $DX, $DY)\nMoves the specified rectangle by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetRgn($hRgn, $iXOffset, $iYOffset)\nMoves a region by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetWindowOrg($hDC, $iXOffset, $iYOffset)\nModifies the window origin for a device context using the specified horizontal and vertical offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenDesktop($sName [, $iAccess [, $iFlags [, $fInherit]]])\nOpens the specified desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenFileById($hFile, $tGUID, $iAccess, $iShare [, $iFlags])\nOpens the file that matches the specified object identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenFileMapping($sName [, $iAccess [, $fInherit]])\nOpens a named file mapping object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenIcon($hWnd)\nRestores a minimized (iconic)\nwindow to its previous size and position and activates the window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenInputDesktop([$iAccess [, $iFlags [, $fInherit]]])\nOpens the desktop that receives user input (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenJobObject($sName [, $iAccess [, $fInherit])\nOpens an existing job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenMutex($sMutex [, $iAccess [, $fInherit]])\nOpens an existing named mutex object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenProcessToken($iAccess [, $hProcess])\nOpens the access token associated with a process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenSemaphore($sSemaphore [, $iAccess [, $fInherit]])\nOpens an existing named semaphore object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenThemeData($hWnd, $sClass)\nOpens the theme data for a window and its associated class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenWindowStation($sName [, $iAccess [, $fInherit]])\nOpens the specified window station (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PageSetupDlg(ByRef $tPAGESETUPDLG)\nCreates a Page Setup dialog box that enables the user to specify the attributes of a printed page (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PaintDesktop($hDC)\nFills the clipping region in the specified device context with the desktop pattern or wallpaper (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PaintRgn($hDC, $hRgn)\nPaints the specified region by using the brush currently selected into the device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PatBlt($hDC, $iX, $iY, $iWidth, $iHeight, $iRop)\nPaints the specified rectangle using the brush that is currently selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathAddBackslash($sPath)\nAdds a backslash to the end of a string to create the correct syntax for a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathAddExtension($sPath [, $sExt])\nAdds a file name extension to a path string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathAppend($sPath, $sMore)\nAppends one path to the end of another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathBuildRoot($iDrive)\nCreates a root path from a given drive number (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathCanonicalize($sPath)\nRemoves elements of a file path according to special strings inserted into that path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathCommonPrefix($sPath1, $sPath2)\nCompares two paths to determine if they share a common prefix (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathCompactPath($hWnd, $sPath [, $iWidth])\nTruncates a file path to fit within a given pixel width by replacing path components with ellipses (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathCompactPathEx($sPath, $iMax)\nTruncates a path to fit within a certain number of characters by replacing path components with ellipses (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathCreateFromUrl($sUrl)\nConverts a file URL to a Microsoft MS-DOS path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindExtension($sPath)\nSearches a path for an extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindFileName($sPath)\nSearches a path for a file name (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindNextComponent($sPath)\nParses a path and returns the portion of that path that follows the first backslash (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindOnPath($sFile [, $aDirs [, $iStart [, $iEnd]]])\nSearches for a file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathGetArgs($sPath)\nFinds the command-line arguments within a given path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathGetCharType($sChar)\nDetermines the type of character in relation to a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathGetDriveNumber($sPath)\nSearches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsContentType($sPath, $sType)\nDetermines if a file's registered content type matches the specified content type (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsDirectory($sPath)\nVerifies that a path is a valid directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsDirectoryEmpty($sPath)\nDetermines whether a specified path is an empty directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsExe($sPath)\nDetermines whether a file is an executable by examining the file extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsFileSpec($sPath)\nSearches a path for any path-delimiting characters (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsLFNFileSpec($sPath)\nDetermines whether a file name is in long format (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsRelative($sPath)\nSearches a path and determines if it is relative (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsRoot($sPath)\nParses a path to determine if it is a directory root (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsSameRoot($sPath1, $sPath2)\nCompares two paths to determine if they have a common root component (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsSystemFolder($sPath)\nDetermines if an existing folder contains the attributes that make it a system folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsUNC($sPath)\nDetermines if the string is a valid Universal Naming Convention (UNC)\nfor a server and share path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsUNCServer($sPath)\nDetermines if a string is a valid Universal Naming Convention (UNC)\nfor a server path only (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsUNCServerShare($sPath)\nDetermines if a string is a valid Universal Naming Convention (UNC)\nshare path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathMakeSystemFolder($sPath)\nGives an existing folder the proper attributes to become a system folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathMatchSpec($sPath, $sSpec)\nSearches a string using a Microsoft MS-DOS wild card match type (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathParseIconLocation($sPath)\nParses a file location string that contains a file location and icon index (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRelativePathTo($sPathFrom, $fDirFrom, $sPathTo, $fDirTo)\nCreates a relative path from one file or folder to another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveArgs($sPath)\nRemoves any arguments from a given path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveBackslash($sPath)\nRemoves the trailing backslash from a given path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveExtension($sPath)\nRemoves the file name extension from a path, if one is present (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveFileSpec($sPath)\nRemoves the trailing file name and backslash from a path, if they are present (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRenameExtension($sPath, $sExt)\nReplaces the extension of a file name with a new extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathSearchAndQualify($sPath [, $fExists])\nFormats a path to the fully qualified path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathSkipRoot($sPath)\nParses a path, ignoring the drive letter or Universal Naming Convention (UNC)\nserver/share path elements (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathStripPath($sPath)\nRemoves the path portion of a fully qualified path and file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathStripToRoot($sPath)\nRemoves all parts of the path except for the root information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathToRegion($hDC)\nCreates a region from the path that is selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUndecorate($sPath)\nRemoves the decoration from a path string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUnExpandEnvStrings($sPath)\nReplaces folder names in a fully-qualified path with their associated environment string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUnmakeSystemFolder($sPath)\nRemoves the attributes from a folder that make it a system folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUnquoteSpaces($sPath)\nRemoves quotes from the beginning and end of a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathYetAnotherMakeUniqueName($sPath)\nCreates a unique filename based on an existing filename (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PickIconDlg([$sIcon [, $iIndex [, $hParent]]])\nDisplays a dialog box that allows the user to choose an icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PlayEnhMetaFile( $hDC, $hEmf, $tRECT)\nDisplays the picture stored in the specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PlaySound($sSound [, $iFlags [, $hInstance]])\nPlays a sound specified by the given file name, resource, or system event (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PlgBlt($hDestDC, Const ByRef $aPoint, $hSrcDC, $iXSrc, $iYSrc, $iWidth, $iHeight [, $hMask [, $iXMask [, $iYMask]]])\nPerforms a bit-block transfer of color data from the specified rectangle in the source DC to the specified parallelogram in the DC context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PolyBezier($hDC, Const ByRef $aPoint [, $iStart [, $iEnd]])\nDraws one or more Bezier curves (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PolyBezierTo($hDC, Const ByRef $aPoint [, $iStart [, $iEnd]])\nDraws one or more Bezier curves (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PolyDraw($hDC, Const ByRef $aPoint [, $iStart [, $iEnd]])\nDraws a set of line segments and Bezier curves (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Polygon($hDC,  Const ByRef $aPoint [, $iStart [, $iEnd]])\nDraws a polygon consisting of two or more vertices connected by straight lines (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PrintDlg(ByRef $tPRINTDLG)\nDisplays a Print dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PrintDlgEx(ByRef $tPRINTDLGEX)\nDisplays a Print property sheet that enables the user to specify the properties of a particular print job (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PrintWindow($hWnd, $hDC [, $fClient])\nCopies a visual window into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PtInRectEx($iX, $iY, $iLeft, $iTop, $iRight, $iBottom)\nDetermines whether the specified point lies within the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PtInRegion($hRgn, $iX, $iY)\nDetermines whether the specified point is inside the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PtVisible($hDC, $iX, $iY)\nDetermines whether the specified point is within the clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryDosDevice($sDevice)\nRetrieves the current mapping for a particular MS-DOS device name (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryInformationJobObject($hJob, $iJobObjectInfoClass, ByRef $tJobObjectInfo)\nRetrieves limit and job state information from the job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryPerformanceCounter()\nRetrieves the current value of the high-resolution performance counter (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryPerformanceFrequency()\nRetrieves the frequency of the high-resolution performance counter (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RadialGradientFill($hDC, $iX, $iY, $iRadius, $iRGB1, $iRGB2 [, $iAngleStart [, $iAngleEnd [, $iStep]]])\nFills radial gradient (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Rectangle($hDC, $tRECT)\nDraws a rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RectInRegion($hRgn, $tRECT)\nDetermines whether any part of the specified rectangle is within the boundaries of a region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RectVisible($hDC, $tRECT)\nDetermines whether any part of the specified rectangle lies within the clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCloseKey($hKey [, $fFlush])\nCloses a handle to the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegConnectRegistry($sComputer, $hKey)\nEstablishes a connection to a predefined registry key on another computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCopyTree($hSrcKey, $sSrcSubKey, $hDestKey)\nRecursively copies the subkeys and values of the source subkey to the destination key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCopyTreeEx($hSrcKey, $sSrcSubKey, $hDestKey)\nCopies the specified registry key, along with its values and subkeys, to the specified destination key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCreateKey($hKey [, $sSubKey [, $iAccess [, $iOptions [, $tSecurity]]]])\nCreates the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteEmptyKey($hKey [, $sSubKey])\nDeletes an empty key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteKey($hKey [, $sSubKey])\nDeletes a subkey and its values (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteKeyValue($hKey, $sSubKey, $sValueName)\nRemoves the specified value from the specified registry key and subkey (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteTree($hKey [, $sSubKey])\nDeletes a subkey and all its descendants (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteTreeEx($hKey [, $sSubKey])\nDeletes the subkeys and values of the specified key recursively (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteValue($hKey, $sValueName)\nRemoves a named value from the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDisableReflectionKey($hKey)\nDisables registry reflection for the specified key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDuplicateHKey($hKey)\nDuplicates a registry key's handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegEnableReflectionKey($hKey)\nRestores registry reflection for the specified disabled key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegEnumKey($hKey, $iIndex)\nEnumerates the subkeys of the specified open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegEnumValue($hKey, $iIndex)\nEnumerates the values for the specified open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegFlushKey($hKey)\nWrites all the attributes of the specified open registry key into the registry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterApplicationRestart([$iFlags [, $sCmd]])\nRegisters the active instance of an application for restart (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterClassEx($tWNDCLASSEX)\nRegisters a window class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterHotKey($hWnd, $ID, $iModifiers, $vKey)\nDefines a system-wide hot key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterPowerSettingNotification($hWnd, $GUID)\nRegisters the application to receive power setting notifications for the specific power setting event (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterShellHookWindow($hWnd)\nRegisters a specified Shell window to receive certain messages for events or notifications (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegLoadMUIString($hKey, $sValueName [, $sDirectory])\nLoads the specified string from the specified key and subkey (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegNotifyChangeKeyValue($hKey, $iFilter [, $fSubtree [, $fAsync [, $hEvent]]])\nNotifies the caller about changes to the attributes or contents of a specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegOpenKey($hKey [, $sSubKey [, $iAccess]])\nOpens the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryInfoKey($hKey)\nRetrieves information about the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryLastWriteTime($hKey)\nRetrieves information about the last write time to the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryMultipleValues($hKey, ByRef $aValent, ByRef $pBuffer [, $iStart [, $iEnd]])\nRetrieves the type and data for a list of value names associated with an open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryReflectionKey($hKey)\nDetermines whether reflection has been disabled or enabled for the specified key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryValue($hKey, $sValueName, ByRef $tValueData, $iBytes)\nRetrieves the type and data for the specified value name associated with an open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegRestoreKey($hKey, $sFile)\nReads the registry information in a specified file and copies it over the specified key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegSaveKey($hKey, $sFile [, $tSecurity])\nSaves the specified key and all of its subkeys and values to a new file, in the standard format (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegSetValue($hKey, $sValueName, $iType, $tValueData, $iBytes)\nSets the data and type of a specified value under a registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReleaseMutex($hMutex)\nReleases ownership of the specified mutex object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReleaseSemaphore($hSemaphore [, $iIncrease])\nIncreases the count of the specified semaphore object by a specified amount (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReleaseStream($pStream)\nReleases a stream object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveClipboardFormatListener($hWnd)\nRemoves the given window from the system-maintained clipboard format listener list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveDirectory($sPath)\nDeletes an existing empty directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveFontMemResourceEx($hFont)\nRemoves the fonts added from a memory image (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveFontResourceEx($sFont [, $iFlag [, $fNotify]])\nRemoves the fonts in the specified file from the system font table (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveWindowSubclass($hWnd, $pSubclassProc, $ID)\nRemoves a subclass callback from a window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReOpenFile($hFile, $iAccess, $iShare [, $iFlags])\nReopens the specified file system object with different access rights, sharing mode, and flags (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReplaceFile($sReplacedFile, $sReplacementFile [, $sBackupFile [, $iFlags]])\nReplaces one file with another file, and creates a backup copy of the original file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReplaceTextDlg($hOwner [, $sFindWhat [, $sReplaceWith [, $iFlags [, $pFindProc [, $lParam]]]]])\nCreates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ResetEvent($hEvent)\nSets the specified event object to the nonsignaled state (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ResizeBitmap($hBitmap, $iWidth, $iHeight [, $iMode])\nChanges the size of a bitmap to the specified dimensions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RestartDlg([$sText [, $iFlags [, $hParent]]])\nDisplays a dialog box that prompts the user to restart Microsoft Windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RestoreDC($hDC, $ID)\nRestores a device context (DC)\nto the specified state (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RGB($iRed, $iGreen, $iBlue)\nCreates a RGB color value based on red, green, and blue components (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RotatePoints(ByRef $aPoint, $iXC, $iYC, $iAngle [, $iStart [, $iEnd]])\nRotates a points from the array by the specified angle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RoundRect($hDC, $tRECT, $iWidth, $iHeight)\nDraws a rectangle with rounded corners (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SaveDC($hDC)\nSaves the current state of the specified device context (DC)\nby copying data describing selected objects and graphic modes to a context stack (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SaveHBITMAPToFile($sFile, $hBitmap [, $iXPelsPerMeter [, $iYPelsPerMeter]])\nSaves a specified bitmap to the specified bitmap (.bmp)\nfile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SaveHICONToFile($sFile, Const ByRef $aIcon [, $fCompress [, $iStart [, $iEnd]]])\nSaves a specified single or multiple icon (HICON)\nto the specified icon (.ico)\nfile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ScaleWindowExt($hDC, $iXNum, $iXDenom, $iYNum, $iYDenom)\nModifies the window for a device context using the ratios formed by the specified multiplicands and divisors (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SelectClipPath($hDC [, $iMode])\nSelects the current path as a clipping region, combining the new region with any existing clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SelectClipRgn($hDC, $hRgn)\nSelects a region as the current clipping region for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SendMessageTimeout($hWnd, $iMsg [, $wParam [, $lParam [, $iTimeout [, $iFlags]]]])\nSends the specified message to one of more windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetActiveWindow($hWnd)\nActivates the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetArcDirection($hDC, $iDirection)\nSets the drawing arc direction (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetBitmapBits($hBitmap, $iSize, $pBits)\nSets the bits of color data for a bitmap to the specified values (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetBitmapDimensionEx($hBitmap, $iWidth, $iHeight)\nAssigns preferred dimensions to a compatible bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetBoundsRect($hDC, $iFlags [, $tRECT])\nControls the accumulation of bounding rectangle information for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetClassLongEx($hWnd, $iIndex, $iNewLong)\nReplaces the specified value into the specified window belongs (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCompression($sPath, $iCompression)\nSets the compression state of a file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCaretBlinkTime($iDuration)\nSets the caret blink time (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCaretPos($iX, $iY)\nMoves the caret to the specified coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCurrentDirectory($sDir)\nChanges the current directory for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCurrentProcessExplicitAppUserModelID($sAppID)\nSpecifies a unique application-defined Application User Model ID that identifies the current process to the taskbar (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDCBrushColor($hDC, $iRGB)\nSets the current device context (DC)\nbrush color to the specified color value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDCPenColor($hDC, $iRGB)\nSets the current device context (DC)\npen color to the specified color value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDefaultPrinter($sPrinter)\nSets the printer name of the default printer for the current user on the local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDeviceGammaRamp($hDC, Const ByRef $aRamp)\nSets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDIBColorTable($hBitmap, $tColorTable, $iColorCount)\nSets RGB color table in the DIB section bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDIBitsToDevice($hDC, $iXDest, $iYDest, $iWidth, $iHeight, $iXSrc, $iYSrc, $iStartScan, $iScanLines, $tBITMAPINFO, $iUsage, $pBits)\nSets the pixels in the specified rectangle on the device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDllDirectory($sPath)\nAdds a directory to the search path used to locate DLLs for the application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetEnhMetaFileBits($tBits)\nCreates a memory-based enhanced-format metafile from the specified data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetErrorMode($iMode)\nControls whether the system will handle the specified types of serious errors or whether the process will handle them (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetFileAttributes($sFile, $iAttributes)\nSets the attributes for a file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetFilePointerEx($hFile, $iPos [, $iMethod])\nMoves the file pointer of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetForegroundWindow($hWnd)\nPuts the specified window into the foreground and activates its (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetFRBuffer($iChars)\nSets the size of the internal buffer that used the _WinAPI_FindTextDlg()\nand _WinAPI_ReplaceTextDlg()\nfunctions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetGraphicsMode($hDC, $iMode)\nSets the graphics mode for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetHandleInformation($hObject, $iMask, $iFlags)\nSets certain properties of an object handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetInformationJobObject($hJob, $iJobObjectInfoClass, $tJobObjectInfo)\nSets limits for a job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetKeyboardLayout($hWnd, $iLanguage [, $iFlags])\nSets an input locale identifier to the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetKeyboardState($tState)\nCopies a 256-byte array of keyboard key states into the calling process's keyboard input-state table (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetLayeredWindowAttributes($hWnd, $iRGB, $iAlpha, $iFlags)\nSets the opacity and transparency color key of a layered window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetLocaleInfo($LCID, $iType, $sData)\nSets an item of information in the user override portion of the current locale (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetMapMode($hDC, $iMode)\nSets the mapping mode of the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetMessageExtraInfo($lParam)\nSets the extra message information for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetParent($hWndChild, $hWndParent)\nChanges the parent window of the specified child window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetPixel($hDC, $iX, $iY, $iRGB)\nSets the pixel at the specified coordinates to the specified color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetPolyFillMode($hDC [, $iMode])\nSets the polygon fill mode for functions that fill polygons (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetPriorityClass($iPriority [, $PID])\nSets the priority class for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetProcessShutdownParameters($iLevel [, $fDialog])\nSets a shutdown order for a process relative to the other processes in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetProcessWindowStation($hStation)\nAssigns the specified window station to the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetRectRgn($hRgn, $tRECT)\nConverts a region into a rectangular region with the specified coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetROP2($hDC, $iMode)\nRetrieves the foreground mix mode of the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetStretchBltMode($hDC, $iMode)\nSets the bitmap stretching mode in the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetSystemCursor($hCursor, $ID [, $fCopy])\nEnables an application to customize the system cursors (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTextAlign($hDC [, $iMode])\nSets the text-alignment flags for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTextCharacterExtra($hDC, $iCharExtra)\nSets the intercharacter spacing for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTextJustification($hDC, $iBreakExtra, $iBreakCount)\nSpecifies the amount of space the system should add to the break characters in a string of text (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThemeAppProperties($iFlags)\nSets the flags that determine how visual styles are implemented in the calling application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThreadDesktop($hDesktop)\nAssigns the specified desktop to the calling thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThreadErrorMode($iMode)\nControls whether the system will handle the specified types of serious errors or whether the calling thread will handle them (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThreadExecutionState($iFlags)\nPrevents the system from entering sleep or turning off the display while the current application is running (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTimer($hWnd, $iTimerID, $iElapse, $pTimerFunc)\nCreates a timer with the specified time-out value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetUDFColorMode($iMode)\nSets the color mode for the WinAPIEx library (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetUserObjectInformation($hObject, $iIndex, $tData)\nSets information about the specified window station or desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetVolumeMountPoint($sPath, $GUID)\nAssociates a volume with a drive letter or a directory on another volume (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowDisplayAffinity($hWnd, $iAffinity)\nStores the display affinity setting in kernel mode on the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowExt($hDC, $iXExtent, $iYExtent)\nSets the horizontal and vertical extents of the window for a device context by using the specified values (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowLongEx($hWnd, $iIndex, $iNewLong)\nChanges an attribute of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowOrg($hDC, $iX, $iY)\nSpecifies which window point maps to the viewport origin (0,0)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowSubclass($hWnd, $pSubclassProc, $ID [, $pData])\nInstalls or updates a window subclass callback (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowTheme($hWnd [, $sName [, $sList]])\nCauses a window to use a different set of visual style information than its class normally uses (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWinEventHook( $iEventMin, $iEventMax, $pWinEventProc [, $iProcessID [, $iThreadID [, $iFlags]]])\nSets an event hook function for a range of events (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWorldTransform($hDC, $tXFORM)\nSets a two-dimensional linear transformation between world space and page space for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SfcIsFileProtected($sFile)\nDetermines whether the specified file is protected (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SfcIsKeyProtected($hKey [, $sSubKey [, $iFlag]])\nDetermines whether the specified registry key is protected (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellAddToRecentDocs($sFile)\nAdds a file to the most recently and frequently item list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellChangeNotify($iEvent, $iFlags [, $iItem1 [, $iItem2]])\nNotifies the system of an event that an application has performed (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellChangeNotifyDeregister($ID)\nUnregisters the client's window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellChangeNotifyRegister($hWnd, $iMsg, $iEvents, $iSources, $aPaths [, $fRecursive])\nRegisters a window to receive notifications from the file system or Shell (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellEmptyRecycleBin([$sRoot [, $iFlags [, $hParent]]])\nEmpties the Recycle Bin on the specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellExecute($sFile [, $sArgs [, $sDir [, $sVerb [, $iShow [, $hParent]]]]])\nPerforms an operation on a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellExtractAssociatedIcon($sFile [, $fSmall])\nReturns a handle to the icon that associated with the specified file's (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellExtractIcon($sIcon, $iIndex, $iWidth, $iHeight)\nExtracts the icon with the specified dimension from the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellFileOperation($sFrom, $sTo, $iFunc, $iFlags [, $sTitle [, $hParent]])\nCopies, moves, renames, or deletes a file system object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetFileInfo($sPath, $iFlags, $iAttributes, ByRef $tSHFILEINFO)\nRetrieves information about an object in the file system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetKnownFolderPath($GUID [, $iFlags [, $hToken]])\nRetrieves the full path of a known folder identified (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetLocalizedName($sPath)\nRetrieves the localized name of a file in a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetPathFromIDList($PIDL)\nConverts an item identifier list to a file system path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSetFolderCustomSettings($sPath, $iFlag, ByRef $tSHFCS)\nSets or retrieves custom folder settings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSettings($iFlags)\nRetrieves Shell state settings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSpecialFolderLocation($CSIDL)\nRetrieves a PIDL structure of a special folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSpecialFolderPath($CSIDL [, $fCreate])\nRetrieves the path of a special folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetStockIconInfo($SIID, $iFlags)\nRetrieves information about system-defined Shell icons (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellILCreateFromPath($sPath)\nCreates a pointer to an item identifier list (PIDL)\nfrom a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellNotifyIcon($iMessage, $tNOTIFYICONDATA)\nSends a message to the taskbar's status area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellNotifyIconGetRect($hWnd, $ID [, $tGUID])\nGets the screen coordinates of the bounding rectangle of a notification icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellObjectProperties($sPath [, $iType [, $sProperty [, $hParent]]])\nInvokes the Properties context menu command on a Shell object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellOpenFolderAndSelectItems($sPath [, $aNames [, $iStart [, $iEnd [, $iFlags]]]])\nOpens a Windows Explorer window with specified items in a particular folder selected (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellOpenWithDlg($sFile [, $iFlags [, $hParent]])\nDisplays the Open With dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellQueryRecycleBin([$sRoot])\nRetrieves the size of the Recycle Bin and the number of items in it, for a specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellQueryUserNotificationState()\nChecks the state of the computer for the current user (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellRemoveLocalizedName($sPath)\nRemoves the localized name of a file in a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellRestricted($iRestriction)\nDetermines whether a specified administrator policy is in effect (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellSetLocalizedName($sPath, $sModule, $iResID)\nSets the localized name of a file in a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellSetSettings($iFlags, $fSet)\nSets Shell state settings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellStartNetConnectionDlg([$sRemote [, $iFlags [, $hParent]]])\nDisplays a general browsing dialog box for a network resource connection (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShowCaret($hWnd)\nMakes the caret visible on the screen at the caret's current position (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShowLastError([$sText [, $fAbort [, $iLanguage]]])\nShows the last error code and message (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShowOwnedPopups($hWnd, $fShow)\nShows or hides all pop-up windows owned by the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownBlockReasonCreate($hWnd, $sText)\nIndicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownBlockReasonDestroy($hWnd)\nIndicates that the system can be shut down and frees the reason string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownBlockReasonQuery($hWnd)\nRetrieves the reason string set by the _WinAPI_ShutdownBlockReasonCreate()\nfunction (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownDlg()\nDisplays a Windows Shutdown dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SizeOfResource($hInstance, $hResource)\nReturns the size, in bytes, of the specified resource (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StretchBlt($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRop)\nCopies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StretchDIBits($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $tBITMAPINFO, $iUsage, $pBits, $iRop)\nCopies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle, stretching or compressing the rows and columns by using the specified raster operation, if necessary (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrFormatByteSize($iSize)\nConverts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrFormatByteSizeEx($iSize)\nConverts a numeric value into a string that represents the number expressed as separated groups of digits to the left of the decimal (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrFormatKBSize($iSize)\nConverts a numeric value into a string that represents the number expressed as a size value in kilobytes (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrFromTimeInterval($iTime [, $iDigits])\nConverts a time interval to a string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrLen($pString [, $fUnicode])\nReturns the length of the specified string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrokeAndFillPath($hDC)\nCloses any open figures in a path, strokes the outline of the path, and fills its interior (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrokePath($hDC)\nRenders the specified path by using the current pen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StructToArray($tStruct [, $iItems])\nConverts the structure to the array of strings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SubtractRect($tRECT1, $tRECT2)\nDetermines the coordinates of a rectangle formed by subtracting one rectangle from another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwitchColor($iColor)\nConverts a color from BGR to RGB and vice versa (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwitchDesktop($hDesktop)\nMakes the specified desktop visible and activates it (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwitchToThisWindow($hWnd [, $fAltTab])\nSwitches the focus to a specified window and bring it to the foreground (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwapDWord($iValue)\nConverts a ULONG from little-endian to big-endian, and vice versa (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwapQWord($iValue)\nConverts a ULONGLONG from little-endian to big-endian, and vice versa (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwapWord($iValue)\nConverts a USHORT from little-endian to big-endian, and vice versa (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TextOut($hDC, $iX, $iY, $sText)\nWrites a string at the specified location, using the currently selected font, background color, and text color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TileWindows($aWnds [, $tRECT [, $hParent [, $iFlags [, $iStart [, $iEnd]]]]])\nTiles the specified child windows of the specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TransparentBlt($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRGB)\nPerforms a bit-block transfer of the color data corresponding to a rectangle of pixels (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TrackMouseEvent($hWnd, $iFlags [, $iTime])\nPosts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnhookWinEvent($hEventHook)\nRemoves an event hook function (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnionRect($tRECT1, $tRECT2)\nCreates the union of two rectangles (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnionStruct($tStruct1, $tStruct2 [, $sStruct])\nCreates the structure of two structures (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UniqueHardwareID([$iFlags])\nGenerates a unique hardware identifier (ID)\nfor local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnloadKeyboardLayout($hLocale)\nUnloads an input locale identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnlockFile($hFile, $iOffset, $iLenght)\nUnlocks a region in an open file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnmapViewOfFile($pAddress)\nUnmaps a mapped view of a file from the calling process's address space (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterApplicationRestart()\nRemoves the active instance of an application from the restart list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterClass($sClass [, $hInstance])\nUnregisters a window class, freeing the memory required for the class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterHotKey($hWnd, $ID)\nFrees a hot key previously registered by the calling thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterPowerSettingNotification($hNotify)\nUnregisters the power setting notification (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UpdateLayeredWindowEx($hWnd, $iX, $iY, $hBitmap [, $iOpacity [, $fDelete]])\nUpdates a bitmap translucency of a layered window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UpdateResource($hUpdate, $sType, $sName, $iLanguage, $pData, $iSize)\nAdds, deletes, or replaces a resource in a portable executable (PE)\nfile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlCreateFromPath($sPath)\nConverts a Microsoft MS-DOS path to a canonicalized URL (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlEscape($sUrl [, $iFlags])\nConverts characters in a URL that might be altered during transport across the Internet into their corresponding escape sequences (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlFixup($sUrl)\nAttempts to correct a URL whose protocol identifier is incorrect (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlGetPart($sUrl, $iPart)\nRetrieves a specified part from the URL (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlIs($sUrl [, $iType])\nTests whether or not a URL is a specified type (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlUnescape($sUrl [, $iFlags])\nConverts escape sequences back into ordinary characters (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ValidateRect($hWnd [, $tRECT])\nRemoves a rectangle from the current update region of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ValidateRect($hWnd [, $hRgn])\nRemoves a region from the current update region of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_VerQueryRoot($sFile)\nRetrieves fixed (code page independent)\nversion information from the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_VerQueryValue($sFile [, $sValues])\nRetrieves specified version information from the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_WidenPath($hDC)\nRedefines the current path as the area that would be painted if the path were stroked (Requires: #Include <WinAPIEx.au3>)
_WinAPI_WindowFromDC($hDC)\nRetrieves a handle to the window associated with the specified display device context (DC)\n(Requires: #Include <WinAPIEx.au3>)
_WinAPI_Wow64EnableWow64FsRedirection($fEnable)\nEnables or disables file system redirection for the calling thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ZeroMemory($pDestination, $iLenght)\nFills a block of memory with zeros (Requires: #Include <WinAPIEx.au3>)
