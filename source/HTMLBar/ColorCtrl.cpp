#include "stdafx.h"
#include "ColorCtrl.h"

COLORREF s_color[LINE_COUNT][COL_COUNT]={
	/*{ 0x000000,0x000033,0x000066,0x000099,0x0000CC,0x0000FF,0x003300,0x003333,0x003366,0x003399,0x0033CC,0x0033FF },
	{ 0x006600,0x006633,0x006666,0x006699,0x0066CC,0x0066FF,0x009900,0x009933,0x009966,0x009999,0x0099CC,0x0099FF },
	{ 0x00CC00,0x00CC33,0x00CC66,0x00CC99,0x00CCCC,0x00CCFF,0x00FF00,0x00FF33,0x00FF66,0x00FF99,0x00FFCC,0x00FFFF },
	{ 0x330000,0x330033,0x330066,0x330099,0x3300CC,0x3300FF,0x333300,0x333333,0x333366,0x333399,0x3333CC,0x3333FF },
	{ 0x336600,0x336633,0x336666,0x336699,0x3366CC,0x3366FF,0x339900,0x339933,0x339966,0x339999,0x3399CC,0x3399FF },
	{ 0x33CC00,0x33CC33,0x33CC66,0x33CC99,0x33CCCC,0x33CCFF,0x33FF00,0x33FF33,0x33FF66,0x33FF99,0x33FFCC,0x33FFFF },
	{ 0x660000,0x660033,0x660066,0x660099,0x6600CC,0x6600FF,0x663300,0x663333,0x663366,0x663399,0x6633CC,0x6633FF },
	{ 0x666600,0x666633,0x666666,0x666699,0x6666CC,0x6666FF,0x669900,0x669933,0x669966,0x669999,0x6699CC,0x6699FF },
	{ 0x66CC00,0x66CC33,0x66CC66,0x66CC99,0x66CCCC,0x66CCFF,0x66FF00,0x66FF33,0x66FF66,0x66FF99,0x66FFCC,0x66FFFF },
	{ 0x990000,0x990033,0x990066,0x990099,0x9900CC,0x9900FF,0x993300,0x993333,0x993366,0x993399,0x9933CC,0x9933FF },
	{ 0x996600,0x996633,0x996666,0x996699,0x9966CC,0x9966FF,0x999900,0x999933,0x999966,0x999999,0x9999CC,0x9999FF },
	{ 0x99CC00,0x99CC33,0x99CC66,0x99CC99,0x99CCCC,0x99CCFF,0x99FF00,0x99FF33,0x99FF66,0x99FF99,0x99FFCC,0x99FFFF },
	{ 0xCC0000,0xCC0033,0xCC0066,0xCC0099,0xCC00CC,0xCC00FF,0xCC3300,0xCC3333,0xCC3366,0xCC3399,0xCC33CC,0xCC33FF },
	{ 0xCC6600,0xCC6633,0xCC6666,0xCC6699,0xCC66CC,0xCC66FF,0xCC9900,0xCC9933,0xCC9966,0xCC9999,0xCC99CC,0xCC99FF },
	{ 0xCCCC00,0xCCCC33,0xCCCC66,0xCCCC99,0xCCCCCC,0xCCCCFF,0xCCFF00,0xCCFF33,0xCCFF66,0xCCFF99,0xCCFFCC,0xCCFFFF },
	{ 0xFF0000,0xFF0033,0xFF0066,0xFF0099,0xFF00CC,0xFF00FF,0xFF3300,0xFF3333,0xFF3366,0xFF3399,0xFF33CC,0xFF33FF },
	{ 0xFF6600,0xFF6633,0xFF6666,0xFF6699,0xFF66CC,0xFF66FF,0xFF9900,0xFF9933,0xFF9966,0xFF9999,0xFF99CC,0xFF99FF },
	{ 0xFFCC00,0xFFCC33,0xFFCC66,0xFFCC99,0xFFCCCC,0xFFCCFF,0xFFFF00,0xFFFF33,0xFFFF66,0xFFFF99,0xFFFFCC,0xFFFFFF },*/
	{0x0000cc,0x0033cc,0x0066cc,0x0099cc,0x00cccc,0x00ffcc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,0x00ffff},
{0x000066,0x003366,0x006666,0x009966,0x00cc66,0x00ff66,0x000099,0x003399,0x006699,0x009999,0x00cc99,0x00ff99},
{0x000000,0x003300,0x006600,0x009900,0x00cc00,0x00ff00,0x000033,0x003333,0x006633,0x009933,0x00cc33,0x00ff33},
{0x3300cc,0x3333cc,0x3366cc,0x3399cc,0x33cccc,0x33ffcc,0x3300ff,0x3333ff,0x3366ff,0x3399ff,0x33ccff,0x33ffff},
{0x330066,0x333366,0x336666,0x339966,0x33cc66,0x33ff66,0x330099,0x333399,0x336699,0x339999,0x33cc99,0x33ff99},
{0x330000,0x333300,0x336600,0x339900,0x33cc00,0x33ff00,0x330033,0x333333,0x336633,0x339933,0x33cc33,0x33ff33},
{0x6600cc,0x6633cc,0x6666cc,0x6699cc,0x66cccc,0x66ffcc,0x6600ff,0x6633ff,0x6666ff,0x6699ff,0x66ccff,0x66ffff},
{0x660066,0x663366,0x666666,0x669966,0x66cc66,0x66ff66,0x660099,0x663399,0x666699,0x669999,0x66cc99,0x66ff99},
{0x660000,0x663300,0x666600,0x669900,0x66cc00,0x66ff00,0x660033,0x663333,0x666633,0x669933,0x66cc33,0x66ff33},
{0x9900cc,0x9933cc,0x9966cc,0x9999cc,0x99cccc,0x99ffcc,0x9900ff,0x9933ff,0x9966ff,0x9999ff,0x99ccff,0x99ffff},
{0x990066,0x993366,0x996666,0x999966,0x99cc66,0x99ff66,0x990099,0x993399,0x996699,0x999999,0x99cc99,0x99ff99},
{0x990000,0x993300,0x996600,0x999900,0x99cc00,0x99ff00,0x990033,0x993333,0x996633,0x999933,0x99cc33,0x99ff33},
{0xcc00cc,0xcc33cc,0xcc66cc,0xcc99cc,0xcccccc,0xccffcc,0xcc00ff,0xcc33ff,0xcc66ff,0xcc99ff,0xccccff,0xccffff},
{0xcc0066,0xcc3366,0xcc6666,0xcc9966,0xcccc66,0xccff66,0xcc0099,0xcc3399,0xcc6699,0xcc9999,0xcccc99,0xccff99},
{0xcc0000,0xcc3300,0xcc6600,0xcc9900,0xcccc00,0xccff00,0xcc0033,0xcc3333,0xcc6633,0xcc9933,0xcccc33,0xccff33},
{0xff00cc,0xff33cc,0xff66cc,0xff99cc,0xffcccc,0xffffcc,0xff00ff,0xff33ff,0xff66ff,0xff99ff,0xffccff,0xffffff},
{0xff0066,0xff3366,0xff6666,0xff9966,0xffcc66,0xffff66,0xff0099,0xff3399,0xff6699,0xff9999,0xffcc99,0xffff99},
{0xff0000,0xff3300,0xff6600,0xff9900,0xffcc00,0xffff00,0xff0033,0xff3333,0xff6633,0xff9933,0xffcc33,0xffff33}
};

CHtmlColorCtrl::CHtmlColorCtrl()
{
	m_ptMouse.x=m_ptMouse.y=-1;
	m_bTrackingMouse=FALSE;
	m_bOnButton=FALSE;
	m_clr=0;
	m_hEdit=NULL;
}

COLORREF CHtmlColorCtrl::GetWebColor(DWORD dw)
{
	int r=(dw&0xFF0000)>>16;
	int g=(dw&0x00FF00)>>8;
	int b=dw&0xFF;
	return RGB(r, g, b);
}


LRESULT CHtmlColorCtrl::OnLButtonDown(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& bHandled)
{
	do{
		COLORREF clr=0;
		if( m_bOnButton ){
			CColorDialog dlg(0, CC_FULLOPEN | CC_ANYCOLOR, m_hEdit);
			if( dlg.DoModal()!=IDOK )
				break;
			clr=dlg.GetColor();
		}
		else if( m_ptMouse.x>=0 && m_ptMouse.x<COL_COUNT && m_ptMouse.y>=0 && m_ptMouse.y<LINE_COUNT )
			clr=s_color[m_ptMouse.y][m_ptMouse.x];
		else
			break;

		int r=(clr&0xFF0000)>>16;
		int g=(clr&0x00FF00)>>8;
		int b=clr&0xFF;
		TCHAR szText[16]={0};
		SecureHelper::sprintf_x(szText, 16, L"#%02X%02X%02X", r,g,b);
		
		if( m_hEdit ){
			if( m_strInsert.IsEmpty() ){
				::SendMessage(m_hEdit, ECM_INSERTSNIPPET, (WPARAM)szText, lstrlen(szText));
			}
			else{
				m_strInsert.Replace( L"${COLOR}", szText);
				::SendMessage(m_hEdit, ECM_INSERTSNIPPET, (WPARAM)(LPCTSTR)m_strInsert, m_strInsert.GetLength());
				m_strInsert.Empty();
			}
		}
	}
	while(0);
	ShowWindow(SW_HIDE);
	return 0;
}

LRESULT CHtmlColorCtrl::OnKillFocus(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& bHandled)
{
	ShowWindow(SW_HIDE);
	bHandled=FALSE;
	return 0;
}

LRESULT CHtmlColorCtrl::OnPaint(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/)
{
	CPaintDC _dc(m_hWnd);
	CMemoryDC dc(_dc.m_hDC, _dc.m_ps.rcPaint);
	
	RECT rcClient;
	GetClientRect(&rcClient);
	dc.FillSolidRect(&rcClient, RGB(255,255,255));

	for( int i=0; i<LINE_COUNT; i++ )
	{
		for( int j=0; j<COL_COUNT; j++ ){
			CRect rc( BOX_SIZE*j, BOX_SIZE*i, (j+1)*BOX_SIZE, (i+1)*BOX_SIZE );
			rc.DeflateRect(1,1);
			if( i==m_ptMouse.y && j==m_ptMouse.x ){
				HPEN hOld=dc.SelectPen( (HPEN)GetStockObject(DC_PEN) );
				dc.SetDCPenColor( RGB(0,0, 255) );
				rc.InflateRect(1,1);
				dc.Rectangle(&rc);
				rc.DeflateRect(1,1);
				dc.Rectangle(&rc);
				dc.SelectPen(hOld);
			}
			else{
				dc.Rectangle(&rc);
			}

			rc.DeflateRect(2,2);
			dc.FillSolidRect(&rc, GetWebColor(s_color[i][j]));
		}
	}

	if( m_ptMouse.x>=0 && m_ptMouse.x<COL_COUNT && m_ptMouse.y>=0 && m_ptMouse.y<LINE_COUNT )
		m_clr=s_color[m_ptMouse.y][m_ptMouse.x];

	dc.SelectFont(m_font);
	CRect rcText(0, LINE_COUNT*BOX_SIZE, COL_COUNT*BOX_SIZE, LINE_COUNT*BOX_SIZE+20);
	rcText.DeflateRect(1,1);
	dc.Rectangle(&rcText);
	rcText.DeflateRect(2,2);

	int r=(m_clr&0xFF0000)>>16;
	int g=(m_clr&0x00FF00)>>8;
	int b=m_clr&0xFF;
	COLORREF clrBk=RGB(r, g, b);
	COLORREF clrFg=RGB(0xFF-r, 0xFF-g, 0xFF-b);

	TCHAR szText[10]={0};
	SecureHelper::sprintf_x(szText, 10, L"%02X%02X%02X", r,g,b);

	dc.FillSolidRect(&rcText, clrBk);
	dc.SetBkMode(TRANSPARENT);
	dc.SetTextColor(clrFg);
	dc.DrawText(szText, lstrlen(szText), &rcText, DT_CENTER|DT_VCENTER|DT_SINGLELINE);

	CRect rcBtn=rcClient;
	rcBtn.top=rcText.bottom+2;
	rcBtn.DeflateRect(1,1);
	dc.Rectangle(&rcBtn);
	if( m_bOnButton ){
		rcBtn.DeflateRect(2,2);
		dc.FillSolidRect(&rcBtn, RGB(192,192,192));
	}

	dc.SetTextColor(0);
	dc.DrawText(L"...", 3, &rcBtn, DT_CENTER|DT_VCENTER|DT_SINGLELINE);
	
	return 0;
}

LRESULT CHtmlColorCtrl::OnEraseBkgnd(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM lParam, BOOL& /*bHandled*/)
{
	return 1;
}

LRESULT CHtmlColorCtrl::OnMouseLeave(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM lParam, BOOL& /*bHandled*/)
{
	m_bTrackingMouse=FALSE;
	m_ptMouse.x=m_ptMouse.y=-1;
	m_bOnButton=FALSE;

	ShowWindow(SW_HIDE);
	return 0;
}

LRESULT CHtmlColorCtrl::OnMouseMove(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM lParam, BOOL& /*bHandled*/)
{
	CPoint pt(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));
	RECT rcClient;
	if( GetClientRect(&rcClient) ){
		if(!m_bTrackingMouse){
			TRACKMOUSEEVENT tme;
			tme.cbSize = sizeof(tme);
			tme.hwndTrack = m_hWnd;
			tme.dwFlags = /*TME_HOVER|*/TME_LEAVE;
			m_bTrackingMouse = TrackMouseEvent(&tme);
		}

		m_ptMouse.x=min(pt.x/BOX_SIZE, COL_COUNT-1);
		m_ptMouse.y=min(pt.y/BOX_SIZE, LINE_COUNT-1);

		CRect rcBtn(0, LINE_COUNT*BOX_SIZE+20, COL_COUNT*BOX_SIZE, rcClient.bottom);
		m_bOnButton=rcBtn.PtInRect(pt);
		if( m_bOnButton )
			m_ptMouse.x=m_ptMouse.y=-1;
		InvalidateRect(&rcClient);
	}

	return 0;
}
